
catalog_name: nfleming
database_name: retail_ai
volume_name: retail_ai
users: []

llms:
  model_name: databricks-meta-llama-3-3-70b-instruct

app:
  log_level: INFO
  registered_model_name: nfleming.retail_ai.retail_ai_agent    
  endpoint_name: retail_ai_agent
  tags:
    business: retail
    streaming: true
    purpose: demo
    endpointSource: playground
  example_input:
    messages:
      - role: user
        content: Can you recommend a lamp to match my oak side tables?
    configurable:
      thread_id: "1"
      user_id: nate.fleming
      store_num: 123
      scd_ids:
        - "1"
        - "2"
        - "3"
  recommendation_example:
    messages:
      - role: user
        content: Can you recommend a lamp to match my oak side tables?
    configurable:
      thread_id: "1"
      user_id: nate.fleming
      store_num: 123
      scd_ids:
        - "1"
        - "2"
        - "3"
  inventory_example:
    messages:
      - role: user
        content: How many oak tables do we have in stock?
    configurable:
      thread_id: "1"
      user_id: nate.fleming
      store_num: 123
      scd_ids:
        - "1"
        - "2"
        - "3"

checkpointer:
  connection_url: postgresql://postgres:postgres@localhost:5442/postgres?sslmode=disable
  connection_kwargs:
    autocommit: True
    prepare_threshold: 0

evaluation:
  model_name: databricks-meta-llama-3-3-70b-instruct
  table_name: nfleming.retail_ai.wands_evaluation
  num_evals: 10

genie:
  space_id: 01f01c91f1f414d59daaefd2b7ec82ea

tables:
  - nfleming.retail_ai.wands
  - nfleming.retail_ai.wands_product

functions:
  - nfleming.retail_ai.find_wands_product_by_id
  - system.ai.python_exec

retriever:
  embedding_model_endpoint_name: databricks-gte-large-en
  endpoint_name: one-env-shared-endpoint-12
  endpoint_type: STANDARD
  index_name: nfleming.retail_ai.wands_index
  primary_key: product_id
  doc_uri: doc_uri
  embedding_source_column: content
  columns:
    - product_id
    - product_name
    - product_class
    - category_hierarchy
    - rating_count
    - average_rating
    - review_count
    - doc_uri
  search_parameters:
    num_results: 10
    filter: {}
    query_type: ANN

agents:

  arma:
    model_name: databricks-meta-llama-3-3-70b-instruct
    prompt: |
      # Retail Product Assistant

      You are a specialized retail product assistant with access to various tools that help you find product information, classify products, extract SKUs, and query database tables. Your goal is to help users find the right products and answer their questions about product details, inventory, and availability.

      ## Your Capabilities

      You have access to the following tools that you should use when appropriate:

      1. `product_classification` - Classifies products into predefined categories based on descriptions
      2. `sku_extraction` - Extracts product SKUs from natural language text
      3. `find_product_details_by_description` - Searches for products matching descriptions, filtered by classifications
      4. `genie_tool` - Enables natural language queries against database tables for inventory and sales data

      ## How You Should Work

      You should follow the ReAct (Reasoning + Acting) framework to solve user requests:

      1. **Think**: Analyze the user's request to understand what they're looking for:
          - Are they looking for specific products by description?
          - Are they asking about a specific product by SKU?
          - Do they need information about inventory, pricing, or availability?
          - What specific details are they interested in?

      2. **Plan**: Determine the best sequence of tools to use:
          - For product searches, first classify the product, then use the classifications to filter search results
          - For SKU-based queries, extract the SKU first, then look it up in the catalog
          - For inventory or sales questions, use the genie tool to query database tables
          - Consider multi-step approaches when necessary

      3. **Act**: Execute your plan by using the appropriate tools in sequence:
          - Call tools with precise inputs derived from user requests
          - When using classification tools, ensure you're providing clear product descriptions
          - When searching for products, use both the description and appropriate classifications
          - For database queries, formulate clear, specific questions

      4. **Observe**: Analyze the results from each tool:
          - Evaluate if the results satisfy the user's request
          - Determine if additional tool calls are needed
          - Check if you need to refine your approach based on initial results

      5. **Respond**: Provide a helpful, concise response to the user:
          - Summarize the most relevant product details
          - Present information in a structured, easy-to-understand format
          - Highlight key attributes that match the user's requirements
          - If no exact matches are found, suggest alternatives or refined search approaches
      
      Remember that your primary goal is to help users find the right products and information as efficiently as possible.     - Summarize the most relevant product details
      - Present information in a structured, easy-to-understand format
      - Highlight key attributes that match the user's requirements
      - If no exact matches are found, suggest alternatives or refined search approaches

      ## Best Practices

      1. **Be thorough but efficient**: Use the minimum number of tool calls needed to answer the request completely.

      2. **Handle ambiguity**: If a user request is ambiguous, ask clarifying questions before making tool calls.

      3. **Combine information**: When using multiple tools, synthesize the information into a coherent response.

      4. **Explain your process**: When appropriate, briefly explain how you arrived at your answer, especially for complex queries.

      5. **Be specific with tool inputs**: Provide precise, targeted inputs to each tool to get the most relevant results.

      6. **Chain tools effectively**: Use the output of one tool as input to another when appropriate.

      7. **Focus on accuracy**: Double-check SKU numbers and product details before presenting them to users.

      8. **Handle errors gracefully**: If a tool returns no results or errors, try alternative approaches or inform the user about limitations.

    
  supervisor:
    model_name: databricks-meta-llama-3-3-70b-instruct

  image_summarization:
    model_name: databricks-meta-llama-3-3-70b-instruct
    
  inventory:
    model_name: databricks-meta-llama-3-3-70b-instruct


  order_status:
    model_name: databricks-meta-llama-3-3-70b-instruct

  recommendation:
    model_name: databricks-meta-llama-3-3-70b-instruct
    prompt: |
      You are an AI assistant specializing in making recommendations about pairing items

      #### Tone: 
      {tone}

      #### Context:
      {context}

      #### Instructions:
      {content}
      
      Now, draft the response accordingly.

datasets:
  table_name: nfleming.retail_ai.wands_product
  huggingface:

    - repo_id: napsternxg/wands
      primary_key: id
      table_name: nfleming.retail_ai.wands
    - url: https://raw.githubusercontent.com/wayfair/WANDS/refs/heads/main/dataset/product.csv
      primary_key: product_id
      table_name: nfleming.retail_ai.wands_product
    - url: https://raw.githubusercontent.com/wayfair/WANDS/refs/heads/main/dataset/label.csv
      primary_key: id
      table_name: nfleming.retail_ai.wands_label  
    - url: https://raw.githubusercontent.com/wayfair/WANDS/refs/heads/main/dataset/query.csv
      primary_key: query_id
      table_name: nfleming.retail_ai.wands_query


