{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Retail AI Documentation","text":"<p>Welcome to the Retail AI multi-agent system documentation. This system provides intelligent retail management capabilities through AI-powered agents, Unity Catalog functions, and vector search technologies.</p>"},{"location":"#what-is-retail-ai","title":"What is Retail AI?","text":"<p>Retail AI is a comprehensive multi-agent system designed for retail operations, featuring:</p> <ul> <li>Product Management: Intelligent product search, comparison, and recommendation</li> <li>Inventory Management: Real-time inventory tracking across stores and warehouses  </li> <li>Customer Interaction: Natural language interfaces for customer service</li> <li>Data Integration: Seamless integration with Databricks and Unity Catalog</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#ai-powered-agents","title":"\ud83e\udd16 AI-Powered Agents","text":"<p>Multi-agent system with specialized roles for different retail operations</p>"},{"location":"#advanced-search","title":"\ud83d\udd0d Advanced Search","text":"<p>Vector-based semantic search for products and inventory</p>"},{"location":"#real-time-data","title":"\ud83d\udcca Real-time Data","text":"<p>Live inventory and product data through Unity Catalog functions</p>"},{"location":"#extensible-tools","title":"\ud83d\udee0\ufe0f Extensible Tools","text":"<p>Modular tool architecture for easy customization and extension</p>"},{"location":"#store-specific-operations","title":"\ud83c\udfaf Store-Specific Operations","text":"<p>Location-aware functionality for multi-store operations</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with Retail AI in minutes:</p> <pre><code># Clone the repository\ngit clone https://github.com/your-org/retail-ai.git\ncd retail-ai\n\n# Install dependencies\npip install -r requirements.txt\n\n# Configure your environment\ncp .env.example .env\n# Edit .env with your Databricks credentials\n\n# Run the setup\npython 04_unity_catalog_tools.py\n</code></pre>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    A[User Interface] --&gt; B[AI Agents]\n    B --&gt; C[LangChain Tools]\n    B --&gt; D[Unity Catalog Functions]\n    B --&gt; E[Vector Search]\n\n    C --&gt; F[Product Management]\n    C --&gt; G[Inventory Management]\n\n    D --&gt; H[Databricks SQL Warehouse]\n    E --&gt; I[Vector Index]\n\n    H --&gt; J[Product Data]\n    H --&gt; K[Inventory Data]\n    I --&gt; L[Product Embeddings]</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#store-manager-assistant","title":"Store Manager Assistant","text":"<p>Help store managers with inventory checks, product recommendations, and customer inquiries.</p>"},{"location":"#customer-service-agent","title":"Customer Service Agent","text":"<p>Provide intelligent customer support with product information and availability.</p>"},{"location":"#inventory-analyst","title":"Inventory Analyst","text":"<p>Analyze inventory levels, predict demand, and optimize stock management.</p>"},{"location":"#product-specialist","title":"Product Specialist","text":"<p>Compare products, analyze features, and provide detailed product information.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Documentation: Browse the comprehensive guides and API reference</li> <li>\ud83d\udc1b Issues: Report bugs and request features on GitHub</li> <li>\ud83d\udcac Discussions: Join the community discussions</li> <li>\ud83d\udce7 Support: Contact the development team</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get up and running quickly</li> <li>Architecture Overview - Understand the system design</li> <li>Tools Reference - Explore available tools and functions</li> <li>Developer Guide - Start contributing to the project </li> </ul>"},{"location":"agents-and-tools/agent-troubleshooting/","title":"Agent Troubleshooting","text":"<p>This guide provides comprehensive troubleshooting steps for common issues with retail AI agents, tools, and deployment.</p>"},{"location":"agents-and-tools/agent-troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"agents-and-tools/agent-troubleshooting/#agent-not-responding","title":"Agent Not Responding","text":"<p>Symptoms: - Agent execution hangs or times out - No response from agent calls - Silent failures</p> <p>Diagnostic Steps:</p> <pre><code># Check agent configuration\ndef diagnose_agent_config(agent_name: str, model_config: dict):\n    \"\"\"Diagnose agent configuration issues.\"\"\"\n\n    print(f\"Diagnosing agent: {agent_name}\")\n\n    # Check model configuration\n    agent_config = model_config.get(\"agents\", {}).get(agent_name)\n    if not agent_config:\n        print(f\"ERROR: Agent '{agent_name}' not found in configuration\")\n        return False\n\n    # Check model settings\n    model_name = agent_config.get(\"model\", {}).get(\"name\")\n    if not model_name:\n        print(\"ERROR: Model name not specified\")\n        return False\n\n    print(f\"OK: Model: {model_name}\")\n\n    # Check tools configuration\n    tools = agent_config.get(\"tools\", [])\n    print(f\"OK: Tools configured: {len(tools)}\")\n\n    return True\n\n# Test agent execution\ndef test_agent_execution(agent_func, test_input: str):\n    \"\"\"Test basic agent execution.\"\"\"\n\n    try:\n        start_time = time.time()\n\n        state = AgentState(\n            messages=[HumanMessage(content=test_input)],\n            user_id=\"test_user\",\n            store_num=\"101\"\n        )\n\n        result = agent_func(state, {})\n        execution_time = time.time() - start_time\n\n        print(f\"OK: Agent executed successfully in {execution_time:.2f}s\")\n        print(f\"Response: {result['messages'][-1].content[:100]}...\")\n\n        return True\n\n    except Exception as e:\n        print(f\"ERROR: Agent execution failed: {e}\")\n        print(f\"Error type: {type(e).__name__}\")\n        return False\n</code></pre> <p>Common Solutions:</p> <ol> <li> <p>Check Model Endpoint: <pre><code># Verify model endpoint is accessible\nfrom databricks.sdk import WorkspaceClient\n\ntry:\n    w = WorkspaceClient()\n    endpoints = w.serving_endpoints.list()\n    print(\"Available endpoints:\", [e.name for e in endpoints])\nexcept Exception as e:\n    print(f\"Cannot access Databricks: {e}\")\n</code></pre></p> </li> <li> <p>Verify Tool Availability: <pre><code># Test individual tools\ndef test_tools(tools: list):\n    \"\"\"Test each tool individually.\"\"\"\n\n    for tool in tools:\n        try:\n            # Simple test input\n            result = tool.invoke(\"test\")\n            print(f\"OK: Tool {tool.name} working\")\n        except Exception as e:\n            print(f\"ERROR: Tool {tool.name} failed: {e}\")\n</code></pre></p> </li> <li> <p>Check Timeout Settings: <pre><code># Increase timeout for debugging\nagent_config = {\n    \"timeout\": 120,  # 2 minutes\n    \"max_retries\": 1\n}\n</code></pre></p> </li> </ol>"},{"location":"agents-and-tools/agent-troubleshooting/#tool-errors","title":"Tool Errors","text":"<p>Symptoms: - Tool execution failures - Authentication errors - Data access issues</p> <p>Unity Catalog Tool Issues:</p> <pre><code>def diagnose_unity_catalog_tools(warehouse_id: str, function_name: str):\n    \"\"\"Diagnose Unity Catalog function issues.\"\"\"\n\n    from databricks.sdk import WorkspaceClient\n\n    try:\n        w = WorkspaceClient()\n\n        # Test warehouse connection\n        warehouses = w.warehouses.list()\n        warehouse_names = [wh.name for wh in warehouses]\n        print(f\"Available warehouses: {warehouse_names}\")\n\n        if warehouse_id not in warehouse_names:\n            print(f\"ERROR: Warehouse '{warehouse_id}' not found\")\n            return False\n\n        # Test function execution\n        statement = f\"SELECT * FROM {function_name}(ARRAY('TEST-SKU')) LIMIT 1\"\n        response = w.statement_execution.execute_statement(\n            statement=statement,\n            warehouse_id=warehouse_id\n        )\n\n        print(f\"OK: Function {function_name} accessible\")\n        return True\n\n    except Exception as e:\n        print(f\"ERROR: Unity Catalog error: {e}\")\n\n        # Common error patterns\n        if \"PERMISSION_DENIED\" in str(e):\n            print(\"\ud83d\udca1 Check Unity Catalog permissions\")\n        elif \"FUNCTION_NOT_FOUND\" in str(e):\n            print(\"\ud83d\udca1 Function may not exist or not accessible\")\n        elif \"WAREHOUSE_NOT_FOUND\" in str(e):\n            print(\"\ud83d\udca1 Check warehouse ID and permissions\")\n\n        return False\n</code></pre> <p>Vector Search Tool Issues:</p> <pre><code>def diagnose_vector_search(endpoint_name: str, index_name: str):\n    \"\"\"Diagnose vector search issues.\"\"\"\n\n    try:\n        from databricks.vector_search.client import VectorSearchClient\n\n        client = VectorSearchClient()\n\n        # Check endpoint\n        try:\n            endpoint = client.get_endpoint(endpoint_name)\n            print(f\"OK: Endpoint '{endpoint_name}' found\")\n        except Exception as e:\n            print(f\"ERROR: Endpoint error: {e}\")\n            return False\n\n        # Check index\n        try:\n            index = client.get_index(index_name)\n            print(f\"OK: Index '{index_name}' found\")\n\n            # Test search\n            results = index.similarity_search(\n                query_text=\"test query\",\n                columns=[\"product_name\"],\n                num_results=1\n            )\n            print(f\"OK: Search working, found {len(results)} results\")\n\n        except Exception as e:\n            print(f\"ERROR: Index error: {e}\")\n            return False\n\n        return True\n\n    except ImportError:\n        print(\"ERROR: Vector search client not available\")\n        return False\n</code></pre> <p>LangChain Tool Issues:</p> <pre><code>def diagnose_langchain_tools(llm_endpoint: str):\n    \"\"\"Diagnose LangChain tool issues.\"\"\"\n\n    try:\n        from langchain_community.llms import Databricks\n\n        # Test LLM connection\n        llm = Databricks(endpoint_name=llm_endpoint)\n\n        # Simple test\n        response = llm.invoke(\"Hello, this is a test.\")\n        print(f\"OK: LLM endpoint working: {response[:50]}...\")\n\n        return True\n\n    except Exception as e:\n        print(f\"ERROR: LangChain LLM error: {e}\")\n\n        if \"ENDPOINT_NOT_FOUND\" in str(e):\n            print(\"\ud83d\udca1 Check LLM endpoint name and availability\")\n        elif \"PERMISSION_DENIED\" in str(e):\n            print(\"\ud83d\udca1 Check endpoint permissions\")\n\n        return False\n</code></pre>"},{"location":"agents-and-tools/agent-troubleshooting/#performance-issues","title":"Performance Issues","text":"<p>Symptoms: - Slow response times - High latency - Timeouts</p> <p>Performance Diagnostics:</p> <pre><code>import time\nimport statistics\n\ndef performance_diagnostic(agent_func, test_cases: list, num_runs: int = 5):\n    \"\"\"Comprehensive performance diagnostic.\"\"\"\n\n    results = {\n        \"response_times\": [],\n        \"tool_times\": {},\n        \"errors\": []\n    }\n\n    for test_case in test_cases:\n        for run in range(num_runs):\n            start_time = time.time()\n\n            try:\n                # Monitor tool execution times\n                with ToolTimeMonitor() as monitor:\n                    result = agent_func(test_case)\n\n                total_time = time.time() - start_time\n                results[\"response_times\"].append(total_time)\n\n                # Collect tool times\n                for tool_name, tool_time in monitor.get_times().items():\n                    if tool_name not in results[\"tool_times\"]:\n                        results[\"tool_times\"][tool_name] = []\n                    results[\"tool_times\"][tool_name].append(tool_time)\n\n            except Exception as e:\n                results[\"errors\"].append(str(e))\n\n    # Analysis\n    if results[\"response_times\"]:\n        avg_time = statistics.mean(results[\"response_times\"])\n        p95_time = statistics.quantiles(results[\"response_times\"], n=20)[18]\n\n        print(f\"Average response time: {avg_time:.2f}s\")\n        print(f\"P95 response time: {p95_time:.2f}s\")\n\n        # Tool breakdown\n        print(\"\\nTool performance:\")\n        for tool_name, times in results[\"tool_times\"].items():\n            avg_tool_time = statistics.mean(times)\n            print(f\"  {tool_name}: {avg_tool_time:.2f}s avg\")\n\n    if results[\"errors\"]:\n        print(f\"\\nErrors encountered: {len(results['errors'])}\")\n        for error in set(results[\"errors\"]):\n            print(f\"  - {error}\")\n\nclass ToolTimeMonitor:\n    \"\"\"Monitor tool execution times.\"\"\"\n\n    def __init__(self):\n        self.times = {}\n        self.start_times = {}\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    def start_tool(self, tool_name: str):\n        self.start_times[tool_name] = time.time()\n\n    def end_tool(self, tool_name: str):\n        if tool_name in self.start_times:\n            elapsed = time.time() - self.start_times[tool_name]\n            self.times[tool_name] = elapsed\n\n    def get_times(self) -&gt; dict:\n        return self.times\n</code></pre> <p>Performance Optimization:</p> <pre><code>def optimize_agent_performance(agent_func):\n    \"\"\"Apply performance optimizations.\"\"\"\n\n    # Add caching\n    @lru_cache(maxsize=100)\n    def cached_agent(query_hash: str, state_json: str):\n        state = json.loads(state_json)\n        return agent_func(state)\n\n    # Add timeout\n    def timeout_wrapper(state, config, timeout: int = 30):\n        import signal\n\n        def timeout_handler(signum, frame):\n            raise TimeoutError(f\"Agent execution timed out after {timeout}s\")\n\n        signal.signal(signal.SIGALRM, timeout_handler)\n        signal.alarm(timeout)\n\n        try:\n            result = agent_func(state, config)\n            signal.alarm(0)  # Cancel timeout\n            return result\n        except TimeoutError:\n            signal.alarm(0)\n            raise\n\n    return timeout_wrapper\n</code></pre>"},{"location":"agents-and-tools/agent-troubleshooting/#authentication-and-permissions","title":"Authentication and Permissions","text":"<p>Symptoms: - Permission denied errors - Authentication failures - Access denied to resources</p> <p>Databricks Authentication:</p> <pre><code>def diagnose_databricks_auth():\n    \"\"\"Diagnose Databricks authentication issues.\"\"\"\n\n    import os\n    from databricks.sdk import WorkspaceClient\n\n    # Check environment variables\n    required_vars = [\"DATABRICKS_HOST\", \"DATABRICKS_TOKEN\"]\n    missing_vars = [var for var in required_vars if not os.getenv(var)]\n\n    if missing_vars:\n        print(f\"ERROR: Missing environment variables: {missing_vars}\")\n        return False\n\n    try:\n        w = WorkspaceClient()\n        user = w.current_user.me()\n        print(f\"OK: Authenticated as: {user.user_name}\")\n\n        # Test permissions\n        try:\n            warehouses = w.warehouses.list()\n            print(f\"OK: Can access {len(list(warehouses))} warehouses\")\n        except Exception as e:\n            print(f\"ERROR: Cannot access warehouses: {e}\")\n\n        try:\n            endpoints = w.serving_endpoints.list()\n            print(f\"OK: Can access {len(list(endpoints))} serving endpoints\")\n        except Exception as e:\n            print(f\"ERROR: Cannot access serving endpoints: {e}\")\n\n        return True\n\n    except Exception as e:\n        print(f\"ERROR: Authentication failed: {e}\")\n\n        if \"INVALID_TOKEN\" in str(e):\n            print(\"\ud83d\udca1 Check DATABRICKS_TOKEN value\")\n        elif \"INVALID_HOST\" in str(e):\n            print(\"\ud83d\udca1 Check DATABRICKS_HOST format (https://...)\")\n\n        return False\n</code></pre> <p>Unity Catalog Permissions:</p> <pre><code>def check_unity_catalog_permissions(catalog: str, schema: str):\n    \"\"\"Check Unity Catalog permissions.\"\"\"\n\n    from databricks.sdk import WorkspaceClient\n\n    try:\n        w = WorkspaceClient()\n\n        # Check catalog access\n        try:\n            catalogs = w.catalogs.list()\n            catalog_names = [c.name for c in catalogs]\n\n            if catalog in catalog_names:\n                print(f\"OK: Can access catalog '{catalog}'\")\n            else:\n                print(f\"ERROR: Cannot access catalog '{catalog}'\")\n                print(f\"Available catalogs: {catalog_names}\")\n                return False\n        except Exception as e:\n            print(f\"ERROR: Cannot list catalogs: {e}\")\n            return False\n\n        # Check schema access\n        try:\n            schemas = w.schemas.list(catalog_name=catalog)\n            schema_names = [s.name for s in schemas]\n\n            if schema in schema_names:\n                print(f\"OK: Can access schema '{catalog}.{schema}'\")\n            else:\n                print(f\"ERROR: Cannot access schema '{catalog}.{schema}'\")\n                print(f\"Available schemas: {schema_names}\")\n                return False\n        except Exception as e:\n            print(f\"ERROR: Cannot list schemas: {e}\")\n            return False\n\n        # Check function access\n        try:\n            functions = w.functions.list(catalog_name=catalog, schema_name=schema)\n            function_names = [f.name for f in functions]\n            print(f\"OK: Can access {len(function_names)} functions\")\n\n            if function_names:\n                print(f\"Available functions: {function_names[:5]}...\")  # Show first 5\n\n        except Exception as e:\n            print(f\"ERROR: Cannot list functions: {e}\")\n            return False\n\n        return True\n\n    except Exception as e:\n        print(f\"ERROR: Permission check failed: {e}\")\n        return False\n</code></pre>"},{"location":"agents-and-tools/agent-troubleshooting/#configuration-issues","title":"Configuration Issues","text":"<p>Symptoms: - Invalid configuration errors - Missing configuration values - Type errors in configuration</p> <p>Configuration Validation:</p> <pre><code>def validate_model_config(config: dict) -&gt; list:\n    \"\"\"Validate model configuration and return issues.\"\"\"\n\n    issues = []\n\n    # Check required top-level keys\n    required_keys = [\"catalog_name\", \"database_name\", \"warehouse_id\", \"agents\"]\n    for key in required_keys:\n        if key not in config:\n            issues.append(f\"Missing required key: {key}\")\n\n    # Validate agents configuration\n    if \"agents\" in config:\n        for agent_name, agent_config in config[\"agents\"].items():\n            # Check agent structure\n            if not isinstance(agent_config, dict):\n                issues.append(f\"Agent '{agent_name}' config must be a dictionary\")\n                continue\n\n            # Check model configuration\n            if \"model\" not in agent_config:\n                issues.append(f\"Agent '{agent_name}' missing model configuration\")\n            else:\n                model_config = agent_config[\"model\"]\n                if \"name\" not in model_config:\n                    issues.append(f\"Agent '{agent_name}' missing model name\")\n\n            # Check prompt\n            if \"prompt\" not in agent_config:\n                issues.append(f\"Agent '{agent_name}' missing prompt\")\n\n            # Validate guardrails\n            if \"guardrails\" in agent_config:\n                guardrails = agent_config[\"guardrails\"]\n                if not isinstance(guardrails, list):\n                    issues.append(f\"Agent '{agent_name}' guardrails must be a list\")\n\n    return issues\n\ndef fix_common_config_issues(config: dict) -&gt; dict:\n    \"\"\"Automatically fix common configuration issues.\"\"\"\n\n    fixed_config = config.copy()\n\n    # Add default values for missing keys\n    defaults = {\n        \"warehouse_id\": \"default_warehouse\",\n        \"vector_search\": {\n            \"endpoint_name\": \"default_endpoint\",\n            \"index_name\": \"default_index\"\n        }\n    }\n\n    for key, default_value in defaults.items():\n        if key not in fixed_config:\n            fixed_config[key] = default_value\n            print(f\"Added default value for {key}\")\n\n    # Fix agent configurations\n    if \"agents\" in fixed_config:\n        for agent_name, agent_config in fixed_config[\"agents\"].items():\n            # Add default model settings\n            if \"model\" in agent_config and \"temperature\" not in agent_config[\"model\"]:\n                agent_config[\"model\"][\"temperature\"] = 0.1\n                print(f\"Added default temperature for {agent_name}\")\n\n            # Add default guardrails\n            if \"guardrails\" not in agent_config:\n                agent_config[\"guardrails\"] = []\n                print(f\"Added empty guardrails list for {agent_name}\")\n\n    return fixed_config\n</code></pre>"},{"location":"agents-and-tools/agent-troubleshooting/#deployment-issues","title":"Deployment Issues","text":"<p>Symptoms: - Application startup failures - Environment-specific errors - Resource allocation issues</p> <p>Environment Diagnostics:</p> <pre><code>def diagnose_environment():\n    \"\"\"Diagnose deployment environment.\"\"\"\n\n    import sys\n    import platform\n\n    print(\"Environment Diagnostics:\")\n    print(f\"Python version: {sys.version}\")\n    print(f\"Platform: {platform.platform()}\")\n\n    # Check required packages\n    required_packages = [\n        \"databricks-sdk\",\n        \"langchain\",\n        \"mlflow\",\n        \"streamlit\"\n    ]\n\n    for package in required_packages:\n        try:\n            __import__(package)\n            print(f\"OK: {package} installed\")\n        except ImportError:\n            print(f\"ERROR: {package} not installed\")\n\n    # Check environment variables\n    required_env_vars = [\n        \"DATABRICKS_HOST\",\n        \"DATABRICKS_TOKEN\",\n        \"DATABRICKS_WAREHOUSE_ID\"\n    ]\n\n    for var in required_env_vars:\n        value = os.getenv(var)\n        if value:\n            # Mask sensitive values\n            masked_value = value[:10] + \"...\" if len(value) &gt; 10 else value\n            print(f\"OK: {var}: {masked_value}\")\n        else:\n            print(f\"ERROR: {var}: Not set\")\n\ndef health_check_endpoint():\n    \"\"\"Create a health check endpoint for deployment monitoring.\"\"\"\n\n    def health_check() -&gt; dict:\n        \"\"\"Comprehensive health check.\"\"\"\n\n        status = {\n            \"status\": \"healthy\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"checks\": {}\n        }\n\n        # Check Databricks connection\n        try:\n            w = WorkspaceClient()\n            w.current_user.me()\n            status[\"checks\"][\"databricks\"] = \"healthy\"\n        except Exception as e:\n            status[\"checks\"][\"databricks\"] = f\"unhealthy: {e}\"\n            status[\"status\"] = \"unhealthy\"\n\n        # Check model endpoints\n        try:\n            endpoints = list(w.serving_endpoints.list())\n            status[\"checks\"][\"model_endpoints\"] = f\"healthy ({len(endpoints)} available)\"\n        except Exception as e:\n            status[\"checks\"][\"model_endpoints\"] = f\"unhealthy: {e}\"\n            status[\"status\"] = \"unhealthy\"\n\n        # Check Unity Catalog\n        try:\n            catalogs = list(w.catalogs.list())\n            status[\"checks\"][\"unity_catalog\"] = f\"healthy ({len(catalogs)} catalogs)\"\n        except Exception as e:\n            status[\"checks\"][\"unity_catalog\"] = f\"unhealthy: {e}\"\n            status[\"status\"] = \"unhealthy\"\n\n        return status\n\n    return health_check\n</code></pre>"},{"location":"agents-and-tools/agent-troubleshooting/#debugging-tools","title":"Debugging Tools","text":""},{"location":"agents-and-tools/agent-troubleshooting/#agent-execution-tracer","title":"Agent Execution Tracer","text":"<pre><code>class AgentTracer:\n    \"\"\"Trace agent execution for debugging.\"\"\"\n\n    def __init__(self):\n        self.trace = []\n\n    def log_step(self, step_type: str, data: dict):\n        \"\"\"Log a step in agent execution.\"\"\"\n        self.trace.append({\n            \"timestamp\": time.time(),\n            \"step_type\": step_type,\n            \"data\": data\n        })\n\n    def trace_agent(self, agent_func):\n        \"\"\"Decorator to trace agent execution.\"\"\"\n\n        def traced_agent(state, config):\n            self.log_step(\"agent_start\", {\n                \"user_query\": state[\"messages\"][-1].content,\n                \"user_id\": state.get(\"user_id\"),\n                \"store_num\": state.get(\"store_num\")\n            })\n\n            try:\n                result = agent_func(state, config)\n\n                self.log_step(\"agent_success\", {\n                    \"response\": result[\"messages\"][-1].content,\n                    \"execution_time\": self.get_execution_time()\n                })\n\n                return result\n\n            except Exception as e:\n                self.log_step(\"agent_error\", {\n                    \"error\": str(e),\n                    \"error_type\": type(e).__name__\n                })\n                raise\n\n        return traced_agent\n\n    def get_execution_time(self) -&gt; float:\n        \"\"\"Get total execution time.\"\"\"\n        if len(self.trace) &gt;= 2:\n            return self.trace[-1][\"timestamp\"] - self.trace[0][\"timestamp\"]\n        return 0.0\n\n    def print_trace(self):\n        \"\"\"Print execution trace.\"\"\"\n        print(\"Agent Execution Trace:\")\n        for i, step in enumerate(self.trace):\n            timestamp = step[\"timestamp\"]\n            step_type = step[\"step_type\"]\n            print(f\"{i+1}. [{timestamp:.3f}] {step_type}: {step['data']}\")\n\n# Usage\ntracer = AgentTracer()\ntraced_agent = tracer.trace_agent(my_agent)\nresult = traced_agent(state, config)\ntracer.print_trace()\n</code></pre>"},{"location":"agents-and-tools/agent-troubleshooting/#tool-performance-profiler","title":"Tool Performance Profiler","text":"<pre><code>class ToolProfiler:\n    \"\"\"Profile tool performance for optimization.\"\"\"\n\n    def __init__(self):\n        self.profiles = {}\n\n    def profile_tool(self, tool):\n        \"\"\"Decorator to profile tool execution.\"\"\"\n\n        original_invoke = tool.invoke\n\n        def profiled_invoke(*args, **kwargs):\n            start_time = time.time()\n            start_memory = self.get_memory_usage()\n\n            try:\n                result = original_invoke(*args, **kwargs)\n\n                execution_time = time.time() - start_time\n                memory_used = self.get_memory_usage() - start_memory\n\n                self.record_profile(tool.name, {\n                    \"execution_time\": execution_time,\n                    \"memory_used\": memory_used,\n                    \"success\": True\n                })\n\n                return result\n\n            except Exception as e:\n                execution_time = time.time() - start_time\n\n                self.record_profile(tool.name, {\n                    \"execution_time\": execution_time,\n                    \"memory_used\": 0,\n                    \"success\": False,\n                    \"error\": str(e)\n                })\n                raise\n\n        tool.invoke = profiled_invoke\n        return tool\n\n    def record_profile(self, tool_name: str, metrics: dict):\n        \"\"\"Record profiling metrics.\"\"\"\n        if tool_name not in self.profiles:\n            self.profiles[tool_name] = []\n\n        self.profiles[tool_name].append({\n            \"timestamp\": time.time(),\n            **metrics\n        })\n\n    def get_memory_usage(self) -&gt; float:\n        \"\"\"Get current memory usage in MB.\"\"\"\n        import psutil\n        process = psutil.Process()\n        return process.memory_info().rss / 1024 / 1024\n\n    def get_summary(self) -&gt; dict:\n        \"\"\"Get profiling summary.\"\"\"\n        summary = {}\n\n        for tool_name, profiles in self.profiles.items():\n            execution_times = [p[\"execution_time\"] for p in profiles if p[\"success\"]]\n            success_count = sum(1 for p in profiles if p[\"success\"])\n\n            if execution_times:\n                summary[tool_name] = {\n                    \"avg_execution_time\": statistics.mean(execution_times),\n                    \"min_execution_time\": min(execution_times),\n                    \"max_execution_time\": max(execution_times),\n                    \"success_rate\": success_count / len(profiles),\n                    \"total_calls\": len(profiles)\n                }\n\n        return summary\n</code></pre>"},{"location":"agents-and-tools/agent-troubleshooting/#getting-help","title":"\ud83d\udcde Getting Help","text":""},{"location":"agents-and-tools/agent-troubleshooting/#support-channels","title":"Support Channels","text":"<ol> <li>Documentation: Check the comprehensive guides</li> <li>GitHub Issues: Report bugs and request features</li> <li>Community Forum: Ask questions and share solutions</li> <li>Direct Support: Contact the development team</li> </ol>"},{"location":"agents-and-tools/agent-troubleshooting/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting issues, include:</p> <pre><code>def generate_debug_report():\n    \"\"\"Generate a comprehensive debug report.\"\"\"\n\n    report = {\n        \"timestamp\": datetime.utcnow().isoformat(),\n        \"environment\": {\n            \"python_version\": sys.version,\n            \"platform\": platform.platform(),\n            \"packages\": get_installed_packages()\n        },\n        \"configuration\": {\n            \"databricks_host\": os.getenv(\"DATABRICKS_HOST\", \"Not set\"),\n            \"warehouse_id\": os.getenv(\"DATABRICKS_WAREHOUSE_ID\", \"Not set\")\n        },\n        \"error_details\": {\n            # Include specific error information\n        },\n        \"reproduction_steps\": [\n            # List steps to reproduce the issue\n        ]\n    }\n\n    return report\n\ndef get_installed_packages() -&gt; dict:\n    \"\"\"Get versions of key packages.\"\"\"\n    import pkg_resources\n\n    key_packages = [\n        \"databricks-sdk\",\n        \"langchain\",\n        \"mlflow\",\n        \"streamlit\"\n    ]\n\n    versions = {}\n    for package in key_packages:\n        try:\n            version = pkg_resources.get_distribution(package).version\n            versions[package] = version\n        except pkg_resources.DistributionNotFound:\n            versions[package] = \"Not installed\"\n\n    return versions\n</code></pre>"},{"location":"agents-and-tools/agent-troubleshooting/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Reference - Detailed agent specifications</li> <li>Agent Development Patterns - Implementation patterns</li> <li>Agent Performance - Performance optimization</li> <li>Best Practices - Development guidelines </li> </ul>"},{"location":"agents-and-tools/ai-agents/","title":"AI Agents","text":"<p>AI Agents are autonomous, multi-step reasoning components that orchestrate complex retail workflows using specialized tools and domain knowledge. These agents provide conversational interfaces and intelligent decision-making capabilities for retail operations.</p>"},{"location":"agents-and-tools/ai-agents/#overview","title":"Overview","text":"<p>AI Agents in the Retail AI system: - Provide autonomous decision making and multi-step reasoning - Orchestrate complex workflows across multiple tools - Enable natural language conversational interfaces - Include built-in guardrails for safety and quality control - Specialize in specific retail domains (products, inventory, comparison)</p>"},{"location":"agents-and-tools/ai-agents/#agent-architecture","title":"Agent Architecture","text":""},{"location":"agents-and-tools/ai-agents/#core-components","title":"Core Components","text":"<p>LangGraph Framework: Provides the foundation for agent state management and workflow orchestration ReAct Pattern: Reasoning and Acting pattern for tool selection and execution State Management: Persistent conversation context and user session data Guardrails: Content safety, quality control, and business rule enforcement</p>"},{"location":"agents-and-tools/ai-agents/#agent-state","title":"Agent State","text":"<p>All agents share a common state structure:</p> <pre><code>class AgentState(TypedDict):\n    messages: Annotated[Sequence[BaseMessage], add_messages]\n    user_id: str\n    store_num: str\n\nclass AgentConfig(TypedDict):\n    configurable: dict[str, Any]\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#specialized-agents","title":"Specialized Agents","text":""},{"location":"agents-and-tools/ai-agents/#product-agent","title":"Product Agent","text":"<p>Handles product discovery, information retrieval, and recommendations.</p> <p>Capabilities: - Product lookup by SKU, UPC, or description - Semantic product search using vector embeddings - Product feature extraction and analysis - Cross-selling and upselling recommendations</p> <p>Tools Available: - <code>find_product_by_sku</code> - Unity Catalog function for exact SKU lookup - <code>find_product_by_upc</code> - Unity Catalog function for exact UPC lookup - <code>find_product_details_by_description</code> - Vector search for semantic product discovery</p> <p>Usage Example: <pre><code>from retail_ai.nodes import product_node\nfrom retail_ai.state import AgentState, AgentConfig\n\n# Create product agent\nproduct_agent = product_node(model_config)\n\n# Agent state\nstate = AgentState(\n    messages=[HumanMessage(content=\"I'm looking for wireless headphones\")],\n    user_id=\"user123\",\n    store_num=\"101\"\n)\n\nconfig = AgentConfig(configurable={})\n\n# Execute agent\nresponse = product_agent.invoke(state, config)\nprint(response[\"messages\"][-1].content)\n</code></pre></p> <p>Configuration: <pre><code># model_config.yaml\nagents:\n  product:\n    model:\n      name: \"databricks-meta-llama-3-3-70b-instruct\"\n    prompt: |\n      You are a helpful product specialist at BrickMart store {store_num}.\n      Help customers find products using the available tools.\n      Always provide accurate product information and helpful recommendations.\n    guardrails:\n      - type: \"content_safety\"\n        config: {\"block_harmful\": true}\n</code></pre></p>"},{"location":"agents-and-tools/ai-agents/#inventory-agent","title":"Inventory Agent","text":"<p>Manages inventory queries, stock level checks, and availability information.</p> <p>Capabilities: - Real-time inventory checking across stores and warehouses - Stock level monitoring and alerts - Product availability by location - Inventory movement tracking</p> <p>Tools Available: - <code>find_inventory_by_sku</code> - Global inventory lookup by SKU - <code>find_inventory_by_upc</code> - Global inventory lookup by UPC - <code>find_store_inventory_by_sku</code> - Store-specific inventory by SKU - <code>find_store_inventory_by_upc</code> - Store-specific inventory by UPC - <code>find_product_details_by_description</code> - Product discovery for inventory checks</p> <p>Usage Example: <pre><code>from retail_ai.nodes import inventory_node\n\n# Create inventory agent\ninventory_agent = inventory_node(model_config)\n\n# Check inventory for specific product\nstate = AgentState(\n    messages=[HumanMessage(content=\"Do you have SKU ABC123 in stock at store 101?\")],\n    user_id=\"user123\",\n    store_num=\"101\"\n)\n\nresponse = inventory_agent.invoke(state, config)\n</code></pre></p> <p>Specialized Queries: <pre><code># Multi-store inventory check\nquery = \"Check inventory for wireless headphones across all stores\"\n\n# Low stock alerts\nquery = \"Which products are running low in store 101?\"\n\n# Warehouse vs store availability\nquery = \"Is product XYZ available in store or do we need to order from warehouse?\"\n</code></pre></p>"},{"location":"agents-and-tools/ai-agents/#comparison-agent","title":"Comparison Agent","text":"<p>Provides detailed product comparisons and recommendation analysis.</p> <p>Capabilities: - Side-by-side product comparisons - Feature analysis and scoring - Pros and cons evaluation - Personalized recommendations based on user needs</p> <p>Tools Available: - <code>find_product_by_sku</code> - Product lookup for comparison - <code>find_product_by_upc</code> - Alternative product lookup - <code>find_product_details_by_description</code> - Find similar products to compare - <code>product_comparison</code> - LLM-powered comparison analysis</p> <p>Usage Example: <pre><code>from retail_ai.nodes import comparison_node\n\n# Create comparison agent\ncomparison_agent = comparison_node(model_config)\n\n# Compare products\nstate = AgentState(\n    messages=[HumanMessage(content=\"Compare iPhone 15 vs Samsung Galaxy S24\")],\n    user_id=\"user123\", \n    store_num=\"101\"\n)\n\nresponse = comparison_agent.invoke(state, config)\n</code></pre></p> <p>Comparison Features: - Feature Analysis: Detailed breakdown of product specifications - Pros and Cons: Balanced evaluation of each product - Use Case Recommendations: Best product for specific needs - Price Comparison: Value analysis and cost considerations</p>"},{"location":"agents-and-tools/ai-agents/#diy-agent","title":"DIY Agent","text":"<p>General-purpose agent for diverse queries and exploratory tasks.</p> <p>Capabilities: - Web search for external information - General product discovery - Open-ended customer assistance - Fallback for queries outside other agent specializations</p> <p>Tools Available: - <code>search_tool</code> - DuckDuckGo web search - <code>find_product_details_by_description</code> - Product discovery - Additional tools based on configuration</p> <p>Usage Example: <pre><code>from retail_ai.nodes import diy_node\n\n# Create DIY agent\ndiy_agent = diy_node(model_config)\n\n# Handle general query\nstate = AgentState(\n    messages=[HumanMessage(content=\"What are the latest trends in smart home technology?\")],\n    user_id=\"user123\",\n    store_num=\"101\"\n)\n\nresponse = diy_agent.invoke(state, config)\n</code></pre></p>"},{"location":"agents-and-tools/ai-agents/#tools-for-building-agents","title":"Tools for Building Agents","text":"<p>Agents leverage different types of tools to access data, perform analysis, and provide intelligent responses. Here's an overview of the available tool categories:</p>"},{"location":"agents-and-tools/ai-agents/#unity-catalog-functions","title":"Unity Catalog Functions","text":"<p>Unity Catalog functions provide direct SQL-based access to product and inventory data. These functions are created and managed through the <code>04_unity_catalog_tools.py</code> notebook and offer high-performance database operations.</p> <p>Overview: The Unity Catalog functions are SQL functions that: - Provide direct access to product and inventory tables - Support batch operations with array parameters - Return structured tabular data - Integrate seamlessly with Databricks SQL Warehouse - Offer the fastest query performance for exact matches</p> <p>Key Functions:</p>"},{"location":"agents-and-tools/ai-agents/#product-lookup-functions","title":"Product Lookup Functions","text":"<ul> <li><code>find_product_by_sku</code> - Retrieves detailed product information by SKU identifiers</li> <li><code>find_product_by_upc</code> - Retrieves detailed product information by UPC identifiers</li> </ul>"},{"location":"agents-and-tools/ai-agents/#inventory-management-functions","title":"Inventory Management Functions","text":"<ul> <li><code>find_inventory_by_sku</code> - Retrieves inventory information across all stores for specific SKUs</li> <li><code>find_inventory_by_upc</code> - Retrieves inventory information across all stores for specific UPCs</li> <li><code>find_store_inventory_by_sku</code> - Retrieves inventory information for a specific store and SKUs</li> <li><code>find_store_inventory_by_upc</code> - Retrieves inventory information for a specific store and UPCs</li> </ul> <p>Usage Example: <pre><code>from databricks.sdk import WorkspaceClient\nfrom unitycatalog.ai.core.databricks import DatabricksFunctionClient\n\nclient = DatabricksFunctionClient(client=WorkspaceClient())\nresult = client.execute_function(\n    function_name=\"catalog.database.find_product_by_sku\",\n    parameters={\"sku\": [\"STB-KCP-001\", \"DUN-KCP-001\"]}\n)\n</code></pre></p> <p>Performance Characteristics: - High Performance: Direct SQL execution in Databricks SQL Warehouse - Batch Operations: Support for multiple identifiers in single call - Structured Output: Consistent tabular format - Type Safety: Strong typing with SQL schema validation</p>"},{"location":"agents-and-tools/ai-agents/#vector-search-tools","title":"Vector Search Tools","text":"<p>Vector Search tools provide semantic search capabilities using vector embeddings for intelligent product discovery and document retrieval. These tools enable natural language queries to find relevant products and content based on meaning rather than exact keyword matches.</p> <p>Overview: Vector Search tools in the Retail AI system: - Perform semantic similarity matching using vector embeddings - Scale to large datasets with efficient indexing - Rank results by relevance and similarity scores - Integrate with MLflow for model serving and observability - Support real-time and batch search operations</p> <p>Core Components:</p>"},{"location":"agents-and-tools/ai-agents/#vector-search-index","title":"Vector Search Index","text":"<p>The foundation of semantic search, containing: - Product Embeddings: Vector representations of product descriptions - Metadata: Product attributes, categories, and structured data - Search Endpoints: Databricks Vector Search endpoints for query processing</p>"},{"location":"agents-and-tools/ai-agents/#embedding-models","title":"Embedding Models","text":"<p>Models used to convert text to vector representations: - Text Embedding Models: Transform product descriptions to vectors - Multimodal Models: Handle text, images, and other content types - Domain-Specific Models: Optimized for retail and product data</p> <p>Key Functions:</p>"},{"location":"agents-and-tools/ai-agents/#find_product_details_by_description","title":"<code>find_product_details_by_description</code>","text":"<p>Performs semantic search over product data to find items matching natural language descriptions.</p> <p>Usage Example: <pre><code>from retail_ai.tools import find_product_details_by_description_tool\n\n# Create the tool\nsearch_tool = find_product_details_by_description_tool(\n    endpoint_name=\"vs_endpoint_name\",\n    index_name=\"products_index\",\n    columns=[\"product_name\", \"description\", \"category\", \"price\"],\n    k=10\n)\n\n# Search for products\nresults = search_tool.invoke(\"wireless bluetooth headphones with noise cancellation\")\n\n# Process results\nfor doc in results:\n    print(f\"Product: {doc.metadata['product_name']}\")\n    print(f\"Description: {doc.page_content}\")\n    print(f\"Score: {doc.metadata.get('score', 'N/A')}\")\n    print(\"---\")\n</code></pre></p>"},{"location":"agents-and-tools/ai-agents/#create_vector_search_tool","title":"<code>create_vector_search_tool</code>","text":"<p>Creates a configurable Vector Search tool for retrieving documents from any Databricks Vector Search index.</p> <p>Usage Example: <pre><code>from retail_ai.tools import create_vector_search_tool\n\n# Create product search tool\nproduct_search = create_vector_search_tool(\n    name=\"product_search\",\n    description=\"Search for products using natural language descriptions\",\n    index_name=\"catalog.schema.products_vs_index\",\n    primary_key=\"product_id\",\n    text_column=\"description\",\n    doc_uri=\"product_url\",\n    columns=[\"product_id\", \"name\", \"description\", \"category\", \"price\"],\n    search_parameters={\"num_results\": 15}\n)\n</code></pre></p>"},{"location":"agents-and-tools/ai-agents/#langchain-tools","title":"LangChain Tools","text":"<p>LangChain tools in the Retail AI system: - Use large language models for intelligent processing - Support flexible input/output formats - Return structured output using Pydantic models - Provide creative and analytical capabilities - Integrate seamlessly with the agent framework</p> <p>Key Tools:</p>"},{"location":"agents-and-tools/ai-agents/#product-analysis-tools","title":"Product Analysis Tools","text":"<p><code>product_comparison</code> - Compares multiple products and provides structured analysis of their features, specifications, pros, cons, and recommendations.</p> <p>Usage Example: <pre><code>from retail_ai.tools import create_product_comparison_tool\nfrom databricks_langchain import ChatDatabricks\n\nllm = ChatDatabricks(model=\"databricks-meta-llama-3-3-70b-instruct\")\ncomparison_tool = create_product_comparison_tool(llm)\n\nproducts = [\n    {\n        \"product_id\": 1,\n        \"product_name\": \"Wireless Headphones A\",\n        \"price\": 99.99,\n        \"battery_life\": \"20 hours\",\n        \"noise_cancellation\": True\n    },\n    {\n        \"product_id\": 2,\n        \"product_name\": \"Wireless Headphones B\", \n        \"price\": 149.99,\n        \"battery_life\": \"30 hours\",\n        \"noise_cancellation\": True\n    }\n]\n\nresult = comparison_tool.invoke(products)\nprint(result.summary)\nprint(result.recommendations)\n</code></pre></p>"},{"location":"agents-and-tools/ai-agents/#text-processing-tools","title":"Text Processing Tools","text":"<p><code>sku_extraction</code> - Extracts product SKUs from natural language text for product identification.</p> <p>Usage Example: <pre><code>from retail_ai.tools import create_sku_extraction_tool\n\nsku_tool = create_sku_extraction_tool(llm)\n\ntext = \"I'm looking for information about SKU ABC123 and also need details on product DUN-KCP-001\"\nskus = sku_tool.invoke(text)\nprint(skus)  # Output: ['ABC123', 'DUN-KCP-001']\n</code></pre></p>"},{"location":"agents-and-tools/ai-agents/#classification-tools","title":"Classification Tools","text":"<p><code>product_classification</code> - Classifies product descriptions into predefined categories using natural language understanding.</p> <p>Usage Example: <pre><code>from retail_ai.tools import create_product_classification_tool\n\ncategories = [\"Electronics\", \"Clothing\", \"Home &amp; Garden\", \"Sports\", \"Books\"]\nclassification_tool = create_product_classification_tool(\n    llm=llm,\n    allowable_classifications=categories,\n    k=2\n)\n\ndescription = \"Wireless bluetooth headphones with noise cancellation\"\nclassifications = classification_tool.invoke(description)\nprint(classifications)  # Output: ['Electronics']\n</code></pre></p>"},{"location":"agents-and-tools/ai-agents/#external-integration-tools","title":"External Integration Tools","text":"<p><code>genie_tool</code> - Interfaces with Databricks Genie for natural language to SQL query translation and execution.</p> <p><code>search_tool</code> - Provides web search capabilities using DuckDuckGo for external information retrieval.</p>"},{"location":"agents-and-tools/ai-agents/#agent-orchestration","title":"Agent Orchestration","text":""},{"location":"agents-and-tools/ai-agents/#multi-agent-workflows","title":"Multi-Agent Workflows","text":"<p>Agents can be chained together for complex workflows:</p> <pre><code>def multi_agent_workflow(user_query: str, user_id: str, store_num: str):\n    \"\"\"Orchestrate multiple agents for comprehensive assistance.\"\"\"\n\n    # Step 1: Product discovery\n    product_state = AgentState(\n        messages=[HumanMessage(content=user_query)],\n        user_id=user_id,\n        store_num=store_num\n    )\n\n    product_response = product_agent.invoke(product_state, config)\n\n    # Step 2: Inventory check for found products\n    inventory_query = f\"Check inventory for products mentioned in: {product_response['messages'][-1].content}\"\n    inventory_state = AgentState(\n        messages=[HumanMessage(content=inventory_query)],\n        user_id=user_id,\n        store_num=store_num\n    )\n\n    inventory_response = inventory_agent.invoke(inventory_state, config)\n\n    # Step 3: Comparison if multiple products found\n    if \"compare\" in user_query.lower():\n        comparison_state = AgentState(\n            messages=[HumanMessage(content=f\"Compare: {product_response['messages'][-1].content}\")],\n            user_id=user_id,\n            store_num=store_num\n        )\n\n        comparison_response = comparison_agent.invoke(comparison_state, config)\n        return comparison_response\n\n    return inventory_response\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#agent-router","title":"Agent Router","text":"<p>Intelligent routing to the most appropriate agent:</p> <pre><code>def route_to_agent(query: str) -&gt; str:\n    \"\"\"Route user query to the most appropriate agent.\"\"\"\n\n    query_lower = query.lower()\n\n    # Product-focused queries\n    if any(keyword in query_lower for keyword in [\"product\", \"find\", \"search\", \"recommend\"]):\n        return \"product\"\n\n    # Inventory-focused queries  \n    elif any(keyword in query_lower for keyword in [\"stock\", \"inventory\", \"available\", \"quantity\"]):\n        return \"inventory\"\n\n    # Comparison queries\n    elif any(keyword in query_lower for keyword in [\"compare\", \"vs\", \"versus\", \"difference\"]):\n        return \"comparison\"\n\n    # General queries\n    else:\n        return \"diy\"\n\ndef smart_agent_dispatch(query: str, user_id: str, store_num: str):\n    \"\"\"Dispatch query to appropriate agent.\"\"\"\n\n    agent_type = route_to_agent(query)\n\n    agents = {\n        \"product\": product_agent,\n        \"inventory\": inventory_agent, \n        \"comparison\": comparison_agent,\n        \"diy\": diy_agent\n    }\n\n    selected_agent = agents[agent_type]\n\n    state = AgentState(\n        messages=[HumanMessage(content=query)],\n        user_id=user_id,\n        store_num=store_num\n    )\n\n    return selected_agent.invoke(state, config)\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#guardrails-and-safety","title":"Guardrails and Safety","text":""},{"location":"agents-and-tools/ai-agents/#content-safety","title":"Content Safety","text":"<p>Agents include built-in guardrails for content safety and quality control:</p> <pre><code># Reflection guardrail for content quality\ndef reflection_guardrail(guardrail_definition: dict):\n    \"\"\"Create reflection-based guardrail for agent responses.\"\"\"\n\n    @mlflow.trace()\n    def guardrail_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1]\n\n        # Check content safety\n        if guardrail_definition.get(\"content_safety\"):\n            safety_check = check_content_safety(last_message.content)\n            if not safety_check.is_safe:\n                return {\"messages\": [AIMessage(content=\"I apologize, but I cannot provide that information.\")]}\n\n        # Check response quality\n        if guardrail_definition.get(\"quality_check\"):\n            quality_score = assess_response_quality(last_message.content)\n            if quality_score &lt; 0.7:\n                return {\"messages\": [AIMessage(content=\"Let me provide a better response...\")]}\n\n        return state\n\n    return guardrail_check\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#business-rules","title":"Business Rules","text":"<p>Enforce business logic and policies:</p> <pre><code>def business_rules_guardrail(state: AgentState) -&gt; dict:\n    \"\"\"Enforce business rules and policies.\"\"\"\n\n    last_message = state[\"messages\"][-1].content\n\n    # Price disclosure rules\n    if \"price\" in last_message.lower():\n        if not has_price_disclaimer(last_message):\n            enhanced_message = add_price_disclaimer(last_message)\n            return {\"messages\": [AIMessage(content=enhanced_message)]}\n\n    # Inventory accuracy warnings\n    if \"in stock\" in last_message.lower():\n        disclaimer = \"\\n\\n*Inventory levels are updated in real-time but may vary.\"\n        enhanced_message = last_message + disclaimer\n        return {\"messages\": [AIMessage(content=enhanced_message)]}\n\n    return state\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#performance-optimization","title":"Performance Optimization","text":""},{"location":"agents-and-tools/ai-agents/#agent-caching","title":"Agent Caching","text":"<p>Cache agent responses for frequently asked questions:</p> <pre><code>from functools import lru_cache\nimport hashlib\n\n@lru_cache(maxsize=500)\ndef cached_agent_response(query_hash: str, agent_type: str) -&gt; str:\n    \"\"\"Cache agent responses for common queries.\"\"\"\n    # Implementation would store and retrieve cached responses\n    pass\n\ndef agent_with_cache(agent, query: str, user_id: str, store_num: str):\n    \"\"\"Execute agent with intelligent caching.\"\"\"\n\n    # Create cache key\n    cache_key = hashlib.md5(f\"{query}_{agent_type}_{store_num}\".encode()).hexdigest()\n\n    # Try cache first\n    try:\n        cached_response = cached_agent_response(cache_key, agent.__name__)\n        if cached_response:\n            return {\"messages\": [AIMessage(content=cached_response)]}\n    except:\n        pass\n\n    # Execute agent if no cache hit\n    state = AgentState(\n        messages=[HumanMessage(content=query)],\n        user_id=user_id,\n        store_num=store_num\n    )\n\n    return agent.invoke(state, config)\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#parallel-tool-execution","title":"Parallel Tool Execution","text":"<p>Execute independent tools in parallel for better performance:</p> <pre><code>import asyncio\n\nasync def parallel_tool_execution(tools: list, queries: list):\n    \"\"\"Execute multiple tools in parallel.\"\"\"\n\n    tasks = []\n    for tool, query in zip(tools, queries):\n        task = asyncio.create_task(tool.ainvoke(query))\n        tasks.append(task)\n\n    results = await asyncio.gather(*tasks)\n    return results\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#monitoring-and-analytics","title":"Monitoring and Analytics","text":""},{"location":"agents-and-tools/ai-agents/#agent-performance-tracking","title":"Agent Performance Tracking","text":"<p>Monitor agent performance and user satisfaction:</p> <pre><code>@mlflow.trace(span_type=\"AGENT\", name=\"agent_execution\")\ndef monitored_agent_execution(agent, state: AgentState, config: AgentConfig):\n    \"\"\"Execute agent with comprehensive monitoring.\"\"\"\n\n    start_time = time.time()\n\n    try:\n        # Execute agent\n        response = agent.invoke(state, config)\n\n        # Log performance metrics\n        execution_time = time.time() - start_time\n        mlflow.log_metrics({\n            \"agent_execution_time\": execution_time,\n            \"message_count\": len(response[\"messages\"]),\n            \"user_satisfaction\": calculate_satisfaction_score(response)\n        })\n\n        # Log agent usage\n        mlflow.log_params({\n            \"agent_type\": agent.__name__,\n            \"user_id\": state[\"user_id\"],\n            \"store_num\": state[\"store_num\"]\n        })\n\n        return response\n\n    except Exception as e:\n        mlflow.log_metric(\"agent_errors\", 1)\n        logger.error(f\"Agent execution failed: {e}\")\n        raise\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#conversation-analytics","title":"Conversation Analytics","text":"<p>Track conversation patterns and user behavior:</p> <pre><code>def analyze_conversation(messages: Sequence[BaseMessage]):\n    \"\"\"Analyze conversation for insights.\"\"\"\n\n    analytics = {\n        \"conversation_length\": len(messages),\n        \"user_messages\": len([m for m in messages if isinstance(m, HumanMessage)]),\n        \"agent_messages\": len([m for m in messages if isinstance(m, AIMessage)]),\n        \"tool_calls\": len([m for m in messages if isinstance(m, ToolMessage)]),\n        \"topics\": extract_conversation_topics(messages),\n        \"sentiment\": analyze_conversation_sentiment(messages)\n    }\n\n    # Log analytics\n    mlflow.log_metrics(analytics)\n\n    return analytics\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#integration-patterns","title":"Integration Patterns","text":""},{"location":"agents-and-tools/ai-agents/#streamlit-integration","title":"Streamlit Integration","text":"<p>Integrate agents with Streamlit for web interfaces:</p> <pre><code>import streamlit as st\n\ndef streamlit_agent_chat():\n    \"\"\"Streamlit chat interface for agents.\"\"\"\n\n    st.title(\"BrickMart AI Assistant\")\n\n    # Initialize session state\n    if \"messages\" not in st.session_state:\n        st.session_state.messages = []\n\n    # Display chat history\n    for message in st.session_state.messages:\n        with st.chat_message(message[\"role\"]):\n            st.markdown(message[\"content\"])\n\n    # Chat input\n    if prompt := st.chat_input(\"How can I help you today?\"):\n        # Add user message\n        st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n\n        # Route to appropriate agent\n        agent_type = route_to_agent(prompt)\n        agent = get_agent(agent_type)\n\n        # Execute agent\n        state = AgentState(\n            messages=[HumanMessage(content=prompt)],\n            user_id=st.session_state.get(\"user_id\", \"anonymous\"),\n            store_num=st.session_state.get(\"store_num\", \"101\")\n        )\n\n        response = agent.invoke(state, config)\n\n        # Add agent response\n        agent_message = response[\"messages\"][-1].content\n        st.session_state.messages.append({\"role\": \"assistant\", \"content\": agent_message})\n\n        # Display new message\n        with st.chat_message(\"assistant\"):\n            st.markdown(agent_message)\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#api-integration","title":"API Integration","text":"<p>Expose agents through REST APIs:</p> <pre><code>from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass ChatRequest(BaseModel):\n    message: str\n    user_id: str\n    store_num: str\n    agent_type: str = \"auto\"\n\nclass ChatResponse(BaseModel):\n    response: str\n    agent_used: str\n    execution_time: float\n\n@app.post(\"/chat\", response_model=ChatResponse)\nasync def chat_endpoint(request: ChatRequest):\n    \"\"\"Chat endpoint for agent interaction.\"\"\"\n\n    start_time = time.time()\n\n    try:\n        # Route to agent\n        if request.agent_type == \"auto\":\n            agent_type = route_to_agent(request.message)\n        else:\n            agent_type = request.agent_type\n\n        agent = get_agent(agent_type)\n\n        # Execute agent\n        state = AgentState(\n            messages=[HumanMessage(content=request.message)],\n            user_id=request.user_id,\n            store_num=request.store_num\n        )\n\n        response = agent.invoke(state, config)\n\n        return ChatResponse(\n            response=response[\"messages\"][-1].content,\n            agent_used=agent_type,\n            execution_time=time.time() - start_time\n        )\n\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre>"},{"location":"agents-and-tools/ai-agents/#best-practices","title":"Best Practices","text":""},{"location":"agents-and-tools/ai-agents/#agent-design","title":"Agent Design","text":"<ol> <li>Single Responsibility: Each agent should have a clear, focused purpose</li> <li>Tool Selection: Provide agents with appropriate tools for their domain</li> <li>Prompt Engineering: Craft clear, specific prompts for consistent behavior</li> <li>Error Handling: Implement robust error handling and graceful degradation</li> </ol>"},{"location":"agents-and-tools/ai-agents/#performance","title":"Performance","text":"<ol> <li>Caching: Cache frequent queries and responses appropriately</li> <li>Parallel Execution: Use async/await for independent operations</li> <li>Tool Optimization: Choose the fastest appropriate tools for each task</li> <li>State Management: Keep agent state minimal and efficient</li> </ol>"},{"location":"agents-and-tools/ai-agents/#user-experience","title":"User Experience","text":"<ol> <li>Clear Communication: Provide clear, helpful responses</li> <li>Context Awareness: Maintain conversation context across interactions</li> <li>Personalization: Adapt responses to user preferences and history</li> <li>Feedback Integration: Collect and incorporate user feedback</li> </ol>"},{"location":"agents-and-tools/ai-agents/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents-and-tools/ai-agents/#common-issues","title":"Common Issues","text":"<p>Agent Not Responding <pre><code># Debug agent execution\ndef debug_agent_execution(agent, state, config):\n    try:\n        logger.info(f\"Executing agent: {agent.__name__}\")\n        logger.info(f\"State: {state}\")\n\n        response = agent.invoke(state, config)\n\n        logger.info(f\"Response: {response}\")\n        return response\n\n    except Exception as e:\n        logger.error(f\"Agent execution failed: {e}\")\n        logger.error(f\"Stack trace: {traceback.format_exc()}\")\n        raise\n</code></pre></p> <p>Tool Selection Issues <pre><code># Debug tool selection\ndef debug_tool_selection(agent_state):\n    last_message = agent_state[\"messages\"][-1].content\n\n    print(f\"User query: {last_message}\")\n    print(f\"Available tools: {[tool.name for tool in agent.tools]}\")\n\n    # Check tool descriptions\n    for tool in agent.tools:\n        print(f\"Tool: {tool.name}\")\n        print(f\"Description: {tool.description}\")\n        print(\"---\")\n</code></pre></p> <p>Performance Issues <pre><code># Profile agent performance\nimport cProfile\n\ndef profile_agent_execution(agent, state, config):\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    try:\n        response = agent.invoke(state, config)\n        return response\n    finally:\n        profiler.disable()\n        profiler.print_stats(sort='cumulative')\n</code></pre></p> <p>For more troubleshooting help, see the Development Guide.</p>"},{"location":"agents-and-tools/ai-agents/#next-steps","title":"Next Steps","text":"<ul> <li>Tools Reference - Complete technical specifications for all tools</li> <li>Agent Reference - Detailed agent specifications and configurations</li> <li>Agent Development Patterns - Implementation patterns and best practices</li> <li>Development Guide - Creating custom agents and tools </li> </ul>"},{"location":"agents-and-tools/overview/","title":"Retail AI Agents &amp; Tools Overview","text":"<p>The Retail AI system is built around specialized AI agents that orchestrate multiple tools to handle complex retail operations. This guide explains how to build and use these agents for retail customer assistance, inventory management, and product discovery.</p>"},{"location":"agents-and-tools/overview/#what-are-retail-ai-agents","title":"What are Retail AI Agents?","text":"<p>Retail AI agents are autonomous, conversational AI systems that: - Reason and plan multi-step workflows to solve customer problems - Use specialized tools for data access, search, and analysis - Maintain conversation context across multiple interactions - Apply business rules and safety guardrails - Specialize in retail domains like products, inventory, and customer service</p>"},{"location":"agents-and-tools/overview/#agent-architecture","title":"Agent Architecture","text":"<pre><code>graph TD\n    A[Customer Query] --&gt; B[Router Agent]\n    B --&gt; C{Query Type?}\n\n    C --&gt;|Product Info| D[Product Agent]\n    C --&gt;|Stock Check| E[Inventory Agent]\n    C --&gt;|Compare Items| F[Comparison Agent]\n    C --&gt;|DIY Help| G[DIY Agent]\n    C --&gt;|General| H[General Agent]\n\n    D --&gt; I[Unity Catalog Tools]\n    D --&gt; J[Vector Search Tools]\n    E --&gt; I\n    E --&gt; J\n    F --&gt; I\n    F --&gt; K[LangChain Tools]\n    G --&gt; L[Web Search Tools]\n    G --&gt; J\n    H --&gt; J\n\n    I --&gt; M[Response]\n    J --&gt; M\n    K --&gt; M\n    L --&gt; M\n\n    style D fill:#e1f5fe\n    style E fill:#f3e5f5\n    style F fill:#e8f5e8\n    style G fill:#fff3e0\n    style H fill:#fce4ec</code></pre>"},{"location":"agents-and-tools/overview/#implemented-agents-summary","title":"Implemented Agents Summary","text":""},{"location":"agents-and-tools/overview/#product-agent","title":"Product Agent","text":"<p>Specialization: Product discovery, details, and recommendations - Exact product lookup by SKU or UPC - Semantic product search using natural language - Product feature extraction and analysis - Cross-selling and upselling recommendations</p>"},{"location":"agents-and-tools/overview/#inventory-agent","title":"Inventory Agent","text":"<p>Specialization: Stock levels, availability, and inventory management - Real-time inventory checking across stores and warehouses - Stock level monitoring and alerts - Product availability by location - Inventory movement tracking</p>"},{"location":"agents-and-tools/overview/#comparison-agent","title":"Comparison Agent","text":"<p>Specialization: Product comparisons and recommendation analysis - Side-by-side product comparisons - Feature analysis and scoring - Pros and cons evaluation - Personalized recommendations based on user needs</p>"},{"location":"agents-and-tools/overview/#diy-agent","title":"DIY Agent","text":"<p>Specialization: Project guidance, tutorials, and general assistance - Web search for external information - General product discovery - Open-ended customer assistance - Fallback for queries outside other agent specializations</p>"},{"location":"agents-and-tools/overview/#general-agent","title":"General Agent","text":"<p>Specialization: Store policies, hours, and general customer service - Store information and policies - General customer service inquiries - Fallback for unrouted queries - Policy and procedure guidance</p>"},{"location":"agents-and-tools/overview/#recommendation-agent","title":"Recommendation Agent","text":"<p>Specialization: Product recommendations and suggestions - Personalized product recommendations - Cross-selling and upselling - Product discovery based on preferences - Recommendation explanations</p> <p>For detailed agent specifications, configurations, and examples, see Agent Reference</p>"},{"location":"agents-and-tools/overview/#tools-overview","title":"Tools Overview","text":"<p>Agents use different types of tools depending on their needs. Here's an overview of available tool categories:</p>"},{"location":"agents-and-tools/overview/#unity-catalog-functions","title":"Unity Catalog Functions","text":"<p>High-performance SQL functions for exact data lookups</p> <p>Best for: Known SKUs/UPCs, real-time inventory checks, exact product matches</p> <ul> <li><code>find_product_by_sku</code> - Product details by SKU</li> <li><code>find_product_by_upc</code> - Product details by UPC  </li> <li><code>find_inventory_by_sku</code> - Global inventory levels</li> <li><code>find_store_inventory_by_sku</code> - Store-specific inventory</li> </ul> <p>Performance: ~200ms average latency, 99.5% success rate</p>"},{"location":"agents-and-tools/overview/#vector-search-tools","title":"Vector Search Tools","text":"<p>Semantic search for natural language queries</p> <p>Best for: Natural language product discovery, \"find similar\" queries, content search</p> <ul> <li>Semantic product search using embeddings</li> <li>Natural language query understanding</li> <li>Similarity-based product recommendations</li> </ul> <p>Performance: ~300ms average latency, 98.8% success rate</p>"},{"location":"agents-and-tools/overview/#langchain-tools","title":"LangChain Tools","text":"<p>AI-powered analysis and processing tools</p> <p>Best for: Product comparison, text extraction, classification, complex analysis</p> <ul> <li><code>product_comparison</code> - Detailed product analysis</li> <li><code>sku_extraction</code> - Extract SKUs from text</li> <li><code>product_classification</code> - Categorize products</li> </ul> <p>Performance: ~1.5s average latency, 97.9% success rate</p>"},{"location":"agents-and-tools/overview/#external-tools","title":"External Tools","text":"<p>Web search and external data sources</p> <p>Best for: Real-time information, tutorials, general knowledge, trending topics</p> <ul> <li>Web search capabilities</li> <li>External API integrations</li> <li>Real-time data access</li> </ul> <p>Performance: ~2.0s average latency, 96.5% success rate</p> <p>For complete tool specifications, input/output examples, and implementation details, see Tools Reference</p>"},{"location":"agents-and-tools/overview/#best-practices","title":"Best Practices","text":""},{"location":"agents-and-tools/overview/#key-guidelines","title":"Key Guidelines","text":"<ul> <li>Single Responsibility - Each agent should have a focused purpose</li> <li>Fail Gracefully - Always provide meaningful fallbacks</li> <li>Context Awareness - Leverage available context for better responses</li> <li>Performance First - Choose tools based on performance requirements</li> <li>Safety &amp; Compliance - Implement comprehensive guardrails</li> </ul>"},{"location":"agents-and-tools/overview/#development-principles","title":"Development Principles","text":"<ul> <li>Clear role definition in prompts</li> <li>Structured response formats</li> <li>Comprehensive error handling</li> <li>Performance monitoring</li> <li>Gradual deployment strategies</li> </ul> <p>For comprehensive best practices, safety guidelines, and deployment strategies, see Agent Best Practices</p>"},{"location":"agents-and-tools/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents-and-tools/overview/#common-issues","title":"Common Issues","text":"<ul> <li>Agent Not Responding - Check configuration, model endpoints, and tool availability</li> <li>Tool Errors - Verify authentication, permissions, and data access</li> <li>Performance Issues - Analyze response times, optimize tool selection</li> <li>Authentication Problems - Validate Databricks credentials and permissions</li> </ul>"},{"location":"agents-and-tools/overview/#quick-diagnostics","title":"Quick Diagnostics","text":"<pre><code># Test agent configuration\ndiagnose_agent_config(agent_name, model_config)\n\n# Test tool availability\ntest_tools(agent_tools)\n\n# Check authentication\ndiagnose_databricks_auth()\n</code></pre> <p>For comprehensive troubleshooting guides, diagnostic tools, and solutions, see Agent Troubleshooting</p>"},{"location":"agents-and-tools/overview/#documentation-navigation","title":"Documentation Navigation","text":""},{"location":"agents-and-tools/overview/#agent-documentation","title":"Agent Documentation","text":"<ul> <li>Agent Reference - Detailed specifications for all implemented agents</li> <li>Agent Quickstart - Quick guide to building and optimizing agents</li> <li>Agent Development Patterns - Common patterns and implementation techniques</li> <li>Agent Performance - Performance metrics, optimization, and monitoring</li> <li>Agent Best Practices - Guidelines for development and deployment</li> <li>Agent Troubleshooting - Debugging and problem resolution</li> </ul>"},{"location":"agents-and-tools/overview/#tool-documentation","title":"Tool Documentation","text":"<ul> <li>Tools Reference - Complete technical specifications for all tools</li> <li>AI Agent Implementation - Advanced agent patterns</li> </ul>"},{"location":"agents-and-tools/overview/#development-resources","title":"Development Resources","text":"<ul> <li>Development Guide - Building custom agents and tools</li> <li>Architecture Overview - System design and patterns</li> <li>Deployment Guide - Production deployment strategies</li> </ul>"},{"location":"agents-and-tools/overview/#next-steps","title":"Next Steps","text":"<ol> <li>Explore Agent Capabilities - Review the Agent Reference to understand what each agent can do</li> <li>Quick Start Building - Follow the Agent Quickstart to build your first agent</li> <li>Understand Tools - Check the Tools Reference for implementation details</li> <li>Learn Patterns - Study Development Patterns for advanced techniques</li> <li>Optimize Performance - Use Performance Guidelines to improve response times</li> <li>Deploy Safely - Apply Best Practices for production deployment</li> </ol> <p>Ready to build intelligent retail AI agents? Start with the Agent Quickstart for a hands-on guide! </p>"},{"location":"agents-and-tools/agents/agent-best-practices/","title":"Agent Best Practices","text":"<p>This guide provides comprehensive best practices for developing, deploying, and maintaining retail AI agents.</p>"},{"location":"agents-and-tools/agents/agent-best-practices/#agent-design-principles","title":"Agent Design Principles","text":""},{"location":"agents-and-tools/agents/agent-best-practices/#1-single-responsibility-principle","title":"1. Single Responsibility Principle","text":"<p>Each agent should have a clear, focused purpose:</p> <pre><code># Good: Focused agent\ndef inventory_agent(state, config):\n    \"\"\"Handles only inventory-related queries.\"\"\"\n    # Specialized for inventory management\n    pass\n\n# Bad: Multi-purpose agent\ndef everything_agent(state, config):\n    \"\"\"Handles products, inventory, orders, and customer service.\"\"\"\n    # Too many responsibilities\n    pass\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#2-fail-gracefully","title":"2. Fail Gracefully","text":"<p>Always provide meaningful fallbacks:</p> <pre><code>def resilient_agent(state, config):\n    try:\n        # Primary functionality\n        return primary_agent_logic(state, config)\n    except ToolException as e:\n        # Tool-specific fallback\n        return fallback_with_limited_tools(state, config)\n    except Exception as e:\n        # General fallback\n        return {\n            \"messages\": [\n                AIMessage(\n                    content=\"I'm experiencing technical difficulties. \"\n                           \"Please try again or contact customer service for assistance.\"\n                )\n            ]\n        }\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#3-context-awareness","title":"3. Context Awareness","text":"<p>Leverage available context for better responses:</p> <pre><code>def context_aware_agent(state: AgentState, config: AgentConfig):\n    # Use store context\n    store_num = state.get(\"store_num\", \"unknown\")\n\n    # Use user history\n    user_preferences = state.get(\"preferences\", {})\n\n    # Use session data\n    previous_queries = state.get(\"session_data\", {}).get(\"queries\", [])\n\n    prompt = f\"\"\"You are assisting a customer at store {store_num}.\n    Previous queries in this session: {previous_queries}\n    User preferences: {user_preferences}\n\n    Provide personalized assistance based on this context.\"\"\"\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#tool-selection-best-practices","title":"Tool Selection Best Practices","text":""},{"location":"agents-and-tools/agents/agent-best-practices/#1-performance-first-tool-selection","title":"1. Performance-First Tool Selection","text":"<p>Choose tools based on performance requirements:</p> <pre><code>def select_optimal_tools(query_type: str, performance_requirements: dict):\n    \"\"\"Select tools based on performance needs.\"\"\"\n\n    if performance_requirements.get(\"max_latency\", float('inf')) &lt; 1.0:\n        # High-performance requirements - use fastest tools\n        return [\n            create_find_product_by_sku_tool(),  # ~200ms\n            create_find_inventory_by_sku_tool()  # ~200ms\n        ]\n\n    elif query_type == \"semantic_search\":\n        # Balance performance and capability\n        return [\n            find_product_details_by_description_tool(),  # ~300ms\n            create_find_product_by_sku_tool()  # Fallback\n        ]\n\n    else:\n        # Full capability - include analysis tools\n        return [\n            find_product_details_by_description_tool(),\n            create_product_comparison_tool(),  # ~1.5s\n            create_sku_extraction_tool()\n        ]\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#2-tool-composition-patterns","title":"2. Tool Composition Patterns","text":"<p>Combine tools effectively:</p> <pre><code># Sequential tool usage\ndef sequential_tool_pattern(query: str):\n    # Step 1: Extract entities\n    skus = sku_extraction_tool(query)\n\n    # Step 2: Lookup products\n    if skus:\n        products = find_product_by_sku_tool(skus)\n    else:\n        products = find_product_details_by_description_tool(query)\n\n    # Step 3: Check inventory\n    inventory = find_inventory_by_sku_tool([p['sku'] for p in products])\n\n    return combine_product_and_inventory_data(products, inventory)\n\n# Parallel tool usage\nasync def parallel_tool_pattern(query: str):\n    # Execute independent tools in parallel\n    tasks = [\n        find_product_details_by_description_tool(query),\n        search_tool(query),  # External search\n        classification_tool(query)\n    ]\n\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    return combine_parallel_results(results)\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#3-tool-error-handling","title":"3. Tool Error Handling","text":"<p>Handle tool failures gracefully:</p> <pre><code>def robust_tool_execution(tools: list, query: str):\n    \"\"\"Execute tools with proper error handling.\"\"\"\n\n    results = {}\n\n    for tool in tools:\n        try:\n            result = tool.invoke(query)\n            results[tool.name] = result\n\n        except TimeoutError:\n            logger.warning(f\"Tool {tool.name} timed out\")\n            # Try faster alternative\n            if hasattr(tool, 'fast_alternative'):\n                try:\n                    result = tool.fast_alternative.invoke(query)\n                    results[f\"{tool.name}_fallback\"] = result\n                except Exception:\n                    pass\n\n        except Exception as e:\n            logger.error(f\"Tool {tool.name} failed: {e}\")\n            # Continue with other tools\n            continue\n\n    return results\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#prompt-engineering-best-practices","title":"Prompt Engineering Best Practices","text":""},{"location":"agents-and-tools/agents/agent-best-practices/#1-clear-role-definition","title":"1. Clear Role Definition","text":"<p>Define the agent's role clearly:</p> <pre><code># Good: Clear, specific role\nPRODUCT_AGENT_PROMPT = \"\"\"You are a product specialist at BrickMart store {store_num}.\nYour expertise is in helping customers find products, understand features, and make informed decisions.\n\nCapabilities:\n- Look up products by SKU or UPC\n- Search products by description\n- Provide detailed product information\n- Compare similar products\n\nGuidelines:\n- Always use exact SKU lookup when SKUs are mentioned\n- Provide specific product details including price and availability\n- If you don't have information, say so clearly\n- Ask clarifying questions when the request is ambiguous\n\"\"\"\n\n# Bad: Vague role\nGENERIC_PROMPT = \"\"\"You are a helpful assistant. Help the user with their questions.\"\"\"\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#2-structured-response-format","title":"2. Structured Response Format","text":"<p>Guide the agent to provide consistent responses:</p> <pre><code>STRUCTURED_PROMPT = \"\"\"When providing product information, use this format:\n\n**Product Name**: [Name]\n**SKU**: [SKU]\n**Price**: [Price]\n**Availability**: [In stock/Out of stock]\n**Description**: [Brief description]\n**Key Features**: \n- [Feature 1]\n- [Feature 2]\n\nIf comparing products, use:\n**Comparison**: [Product A] vs [Product B]\n**Winner**: [Product] for [reason]\n**Recommendation**: [Specific recommendation based on use case]\n\"\"\"\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#3-context-integration","title":"3. Context Integration","text":"<p>Include relevant context in prompts:</p> <pre><code>def create_contextual_prompt(agent_type: str, state: AgentState) -&gt; str:\n    base_prompt = get_base_prompt(agent_type)\n\n    # Add store context\n    store_context = f\"Store: {state['store_num']}\"\n\n    # Add user context\n    user_context = \"\"\n    if state.get(\"preferences\"):\n        user_context = f\"User preferences: {state['preferences']}\"\n\n    # Add conversation context\n    conversation_context = \"\"\n    if len(state[\"messages\"]) &gt; 1:\n        recent_messages = state[\"messages\"][-3:]  # Last 3 messages\n        conversation_context = f\"Recent conversation: {recent_messages}\"\n\n    return f\"{base_prompt}\\n\\n{store_context}\\n{user_context}\\n{conversation_context}\"\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#guardrails-and-safety","title":"Guardrails and Safety","text":""},{"location":"agents-and-tools/agents/agent-best-practices/#1-content-safety","title":"1. Content Safety","text":"<p>Implement comprehensive content filtering:</p> <pre><code>def content_safety_guardrail():\n    \"\"\"Multi-layer content safety checking.\"\"\"\n\n    @mlflow.trace(span_type=\"GUARDRAIL\", name=\"content_safety\")\n    def safety_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1].content\n\n        # Layer 1: Keyword filtering\n        inappropriate_keywords = [\"harmful\", \"illegal\", \"offensive\"]\n        if any(keyword in last_message.lower() for keyword in inappropriate_keywords):\n            return safe_response(\"I can only help with retail-related questions.\")\n\n        # Layer 2: ML-based classification\n        safety_score = content_classifier.predict(last_message)\n        if safety_score &gt; 0.8:  # High risk\n            return safe_response(\"Let me help you with product or store information instead.\")\n\n        # Layer 3: Business context validation\n        if not is_retail_related(last_message):\n            return safe_response(\"I specialize in retail assistance. How can I help you find products or store information?\")\n\n        return state\n\n    return safety_check\n\ndef safe_response(message: str) -&gt; dict:\n    \"\"\"Create a safe fallback response.\"\"\"\n    return {\n        \"messages\": [AIMessage(content=message)]\n    }\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#2-business-rules-enforcement","title":"2. Business Rules Enforcement","text":"<p>Ensure compliance with business policies:</p> <pre><code>def business_rules_guardrail():\n    \"\"\"Enforce business rules and policies.\"\"\"\n\n    @mlflow.trace(span_type=\"GUARDRAIL\", name=\"business_rules\")\n    def rules_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1].content\n\n        # Price accuracy disclaimer\n        if contains_price_information(last_message):\n            disclaimer = \"\\n\\n*Prices are subject to change and may vary by location.\"\n            updated_content = last_message + disclaimer\n            return {\n                \"messages\": [AIMessage(content=updated_content)]\n            }\n\n        # Inventory accuracy disclaimer\n        if contains_inventory_information(last_message):\n            disclaimer = \"\\n\\n*Inventory levels are updated in real-time but may vary.\"\n            updated_content = last_message + disclaimer\n            return {\n                \"messages\": [AIMessage(content=updated_content)]\n            }\n\n        # Compliance with return policy\n        if mentions_returns(last_message):\n            if not includes_return_policy_link(last_message):\n                policy_link = \"\\n\\nFor complete return policy details, visit: [Return Policy](https://store.com/returns)\"\n                updated_content = last_message + policy_link\n                return {\n                    \"messages\": [AIMessage(content=updated_content)]\n                }\n\n        return state\n\n    return rules_check\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#3-quality-assurance","title":"3. Quality Assurance","text":"<p>Implement response quality checks:</p> <pre><code>def quality_assurance_guardrail():\n    \"\"\"Ensure response quality and completeness.\"\"\"\n\n    @mlflow.trace(span_type=\"GUARDRAIL\", name=\"quality_assurance\")\n    def quality_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1].content\n\n        # Check response length\n        if len(last_message) &lt; 20:\n            return {\n                \"messages\": [\n                    AIMessage(content=\"Let me provide a more detailed response. Could you please clarify what specific information you're looking for?\")\n                ]\n            }\n\n        # Check for completeness\n        user_query = state[\"messages\"][-2].content if len(state[\"messages\"]) &gt; 1 else \"\"\n        if not addresses_user_query(last_message, user_query):\n            return {\n                \"messages\": [\n                    AIMessage(content=\"I want to make sure I'm addressing your question properly. Could you help me understand what specific information you need?\")\n                ]\n            }\n\n        # Check for accuracy indicators\n        confidence_score = calculate_response_confidence(last_message)\n        if confidence_score &lt; 0.7:\n            hedged_response = add_confidence_hedging(last_message)\n            return {\n                \"messages\": [AIMessage(content=hedged_response)]\n            }\n\n        return state\n\n    return quality_check\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"agents-and-tools/agents/agent-best-practices/#1-comprehensive-logging","title":"1. Comprehensive Logging","text":"<p>Log all important events and metrics:</p> <pre><code>import structlog\n\nlogger = structlog.get_logger()\n\ndef log_agent_execution(agent_name: str):\n    \"\"\"Decorator for comprehensive agent logging.\"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(state: AgentState, config: AgentConfig):\n            execution_id = str(uuid.uuid4())\n\n            # Log start\n            logger.info(\n                \"agent_execution_start\",\n                execution_id=execution_id,\n                agent_name=agent_name,\n                user_id=state.get(\"user_id\"),\n                store_num=state.get(\"store_num\"),\n                query=state[\"messages\"][-1].content[:100]  # First 100 chars\n            )\n\n            start_time = time.time()\n\n            try:\n                result = func(state, config)\n\n                # Log success\n                execution_time = time.time() - start_time\n                logger.info(\n                    \"agent_execution_success\",\n                    execution_id=execution_id,\n                    agent_name=agent_name,\n                    execution_time=execution_time,\n                    response_length=len(result[\"messages\"][-1].content)\n                )\n\n                return result\n\n            except Exception as e:\n                # Log error\n                execution_time = time.time() - start_time\n                logger.error(\n                    \"agent_execution_error\",\n                    execution_id=execution_id,\n                    agent_name=agent_name,\n                    execution_time=execution_time,\n                    error=str(e),\n                    error_type=type(e).__name__\n                )\n                raise\n\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#2-performance-metrics","title":"2. Performance Metrics","text":"<p>Track key performance indicators:</p> <pre><code>class AgentMetrics:\n    \"\"\"Centralized metrics collection for agents.\"\"\"\n\n    def __init__(self):\n        self.metrics = defaultdict(list)\n\n    def record_execution(self, agent_name: str, execution_time: float, success: bool):\n        \"\"\"Record agent execution metrics.\"\"\"\n        self.metrics[f\"{agent_name}_execution_time\"].append(execution_time)\n        self.metrics[f\"{agent_name}_success\"].append(1 if success else 0)\n\n    def record_tool_usage(self, tool_name: str, execution_time: float, success: bool):\n        \"\"\"Record tool usage metrics.\"\"\"\n        self.metrics[f\"{tool_name}_tool_time\"].append(execution_time)\n        self.metrics[f\"{tool_name}_tool_success\"].append(1 if success else 0)\n\n    def get_summary(self, agent_name: str) -&gt; dict:\n        \"\"\"Get performance summary for an agent.\"\"\"\n        execution_times = self.metrics[f\"{agent_name}_execution_time\"]\n        successes = self.metrics[f\"{agent_name}_success\"]\n\n        if not execution_times:\n            return {}\n\n        return {\n            \"avg_execution_time\": statistics.mean(execution_times),\n            \"p95_execution_time\": statistics.quantiles(execution_times, n=20)[18] if len(execution_times) &gt; 20 else max(execution_times),\n            \"success_rate\": statistics.mean(successes),\n            \"total_executions\": len(execution_times)\n        }\n\n# Global metrics instance\nagent_metrics = AgentMetrics()\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#3-health-checks","title":"3. Health Checks","text":"<p>Implement agent health monitoring:</p> <pre><code>def create_health_check(agent_func, test_cases: list):\n    \"\"\"Create a health check for an agent.\"\"\"\n\n    def health_check() -&gt; dict:\n        \"\"\"Execute health check and return status.\"\"\"\n\n        results = {\n            \"status\": \"healthy\",\n            \"checks\": [],\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n\n        for test_case in test_cases:\n            check_result = {\n                \"test\": test_case[\"name\"],\n                \"status\": \"pass\",\n                \"response_time\": None,\n                \"error\": None\n            }\n\n            try:\n                start_time = time.time()\n                result = agent_func(test_case[\"input\"])\n                check_result[\"response_time\"] = time.time() - start_time\n\n                # Validate result\n                if not validate_test_result(result, test_case.get(\"expected\")):\n                    check_result[\"status\"] = \"fail\"\n                    check_result[\"error\"] = \"Unexpected response format\"\n\n            except Exception as e:\n                check_result[\"status\"] = \"fail\"\n                check_result[\"error\"] = str(e)\n                check_result[\"response_time\"] = time.time() - start_time\n\n            results[\"checks\"].append(check_result)\n\n        # Overall status\n        failed_checks = [c for c in results[\"checks\"] if c[\"status\"] == \"fail\"]\n        if failed_checks:\n            results[\"status\"] = \"unhealthy\"\n            results[\"failed_count\"] = len(failed_checks)\n\n        return results\n\n    return health_check\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#deployment-best-practices","title":"Deployment Best Practices","text":""},{"location":"agents-and-tools/agents/agent-best-practices/#1-environment-configuration","title":"1. Environment Configuration","text":"<p>Use environment-specific configurations:</p> <pre><code># config/production.yaml\nagents:\n  product:\n    model:\n      name: \"databricks-dbrx-instruct\"\n      temperature: 0.1\n      max_tokens: 500\n    guardrails:\n      - content_safety: true\n      - business_rules: true\n      - quality_check: true\n    tools:\n      - unity_catalog_functions\n      - vector_search\n    performance:\n      timeout: 30\n      max_retries: 3\n\n# config/development.yaml\nagents:\n  product:\n    model:\n      name: \"databricks-dbrx-instruct\"\n      temperature: 0.2  # Slightly higher for testing\n      max_tokens: 500\n    guardrails:\n      - content_safety: true\n    tools:\n      - unity_catalog_functions\n      - vector_search\n    performance:\n      timeout: 60  # Longer timeout for debugging\n      max_retries: 1\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#2-gradual-rollout","title":"2. Gradual Rollout","text":"<p>Implement feature flags for safe deployments:</p> <pre><code>class FeatureFlags:\n    \"\"\"Feature flag management for agent deployments.\"\"\"\n\n    def __init__(self):\n        self.flags = {\n            \"new_comparison_agent\": 0.1,  # 10% rollout\n            \"enhanced_guardrails\": 0.5,   # 50% rollout\n            \"vector_search_v2\": 0.0       # Disabled\n        }\n\n    def is_enabled(self, flag_name: str, user_id: str) -&gt; bool:\n        \"\"\"Check if feature is enabled for user.\"\"\"\n        if flag_name not in self.flags:\n            return False\n\n        rollout_percentage = self.flags[flag_name]\n        user_hash = hash(user_id) % 100\n\n        return user_hash &lt; (rollout_percentage * 100)\n\ndef create_agent_with_feature_flags(agent_name: str, state: AgentState, config: AgentConfig):\n    \"\"\"Create agent with feature flag support.\"\"\"\n\n    feature_flags = FeatureFlags()\n    user_id = state.get(\"user_id\", \"anonymous\")\n\n    # Use new agent version if enabled\n    if feature_flags.is_enabled(f\"new_{agent_name}\", user_id):\n        return create_new_agent_version(agent_name, state, config)\n    else:\n        return create_stable_agent_version(agent_name, state, config)\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#3-circuit-breaker-pattern","title":"3. Circuit Breaker Pattern","text":"<p>Protect against cascading failures:</p> <pre><code>class CircuitBreaker:\n    \"\"\"Circuit breaker for agent protection.\"\"\"\n\n    def __init__(self, failure_threshold: int = 5, timeout: int = 60):\n        self.failure_threshold = failure_threshold\n        self.timeout = timeout\n        self.failure_count = 0\n        self.last_failure_time = None\n        self.state = \"CLOSED\"  # CLOSED, OPEN, HALF_OPEN\n\n    def call(self, func, *args, **kwargs):\n        \"\"\"Execute function with circuit breaker protection.\"\"\"\n\n        if self.state == \"OPEN\":\n            if time.time() - self.last_failure_time &gt; self.timeout:\n                self.state = \"HALF_OPEN\"\n            else:\n                raise Exception(\"Circuit breaker is OPEN\")\n\n        try:\n            result = func(*args, **kwargs)\n\n            if self.state == \"HALF_OPEN\":\n                self.state = \"CLOSED\"\n                self.failure_count = 0\n\n            return result\n\n        except Exception as e:\n            self.failure_count += 1\n            self.last_failure_time = time.time()\n\n            if self.failure_count &gt;= self.failure_threshold:\n                self.state = \"OPEN\"\n\n            raise\n\n# Usage\ncircuit_breaker = CircuitBreaker()\n\ndef protected_agent(state, config):\n    return circuit_breaker.call(actual_agent_function, state, config)\n</code></pre>"},{"location":"agents-and-tools/agents/agent-best-practices/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Reference - Detailed agent specifications</li> <li>Agent Development Patterns - Implementation patterns</li> <li>Agent Performance - Performance optimization</li> <li>Tools Reference - Available tools and usage </li> </ul>"},{"location":"agents-and-tools/agents/agent-development-patterns/","title":"Agent Development Patterns","text":"<p>This guide covers common patterns and best practices for developing retail AI agents, including code structures, state management, and guardrails implementation.</p>"},{"location":"agents-and-tools/agents/agent-development-patterns/#common-agent-structure","title":"Common Agent Structure","text":""},{"location":"agents-and-tools/agents/agent-development-patterns/#basic-agent-template","title":"Basic Agent Template","text":"<pre><code>def my_agent_node(model_config: ModelConfig) -&gt; AgentCallable:\n    # Extract configuration\n    model = model_config.get(\"agents\").get(\"my_agent\").get(\"model\").get(\"name\")\n    prompt = model_config.get(\"agents\").get(\"my_agent\").get(\"prompt\")\n    guardrails = model_config.get(\"agents\").get(\"my_agent\").get(\"guardrails\") or []\n\n    @mlflow.trace()\n    def my_agent(state: AgentState, config: AgentConfig) -&gt; dict[str, BaseMessage]:\n        # Initialize LLM\n        llm = ChatDatabricks(model=model, temperature=0.1)\n\n        # Format prompt with context\n        prompt_template = PromptTemplate.from_template(prompt)\n        system_prompt = prompt_template.format(\n            user_id=state[\"user_id\"],\n            store_num=state[\"store_num\"]\n        )\n\n        # Configure tools\n        tools = [\n            # Add relevant tools for this agent\n        ]\n\n        # Create agent\n        agent = create_react_agent(\n            model=llm,\n            prompt=system_prompt,\n            tools=tools\n        )\n\n        # Apply guardrails\n        for guardrail_definition in guardrails:\n            guardrail = reflection_guardrail(guardrail_definition)\n            agent = with_guardrails(agent, guardrail)\n\n        return agent\n\n    return my_agent\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#specialized-agent-example","title":"Specialized Agent Example","text":"<pre><code>def customer_service_node(model_config: ModelConfig) -&gt; AgentCallable:\n    \"\"\"Customer service agent with order lookup and policy tools.\"\"\"\n\n    # Configuration\n    model = model_config.get(\"agents\").get(\"customer_service\").get(\"model\").get(\"name\")\n    warehouse_id = model_config.get(\"warehouse_id\")\n\n    @mlflow.trace()\n    def customer_service_agent(state: AgentState, config: AgentConfig) -&gt; dict[str, BaseMessage]:\n        llm = ChatDatabricks(model=model, temperature=0.1)\n\n        # Context-aware prompt\n        prompt = \"\"\"You are a helpful customer service representative at BrickMart store {store_num}.\n        Help customers with orders, returns, and general inquiries.\n        Always be polite and provide accurate information.\n\n        Current customer: {user_id}\n        Store location: {store_num}\n        \"\"\"\n\n        system_prompt = prompt.format(\n            store_num=state[\"store_num\"],\n            user_id=state[\"user_id\"]\n        )\n\n        # Tool selection for customer service\n        tools = [\n            # Order management\n            create_uc_tools([\"catalog.database.find_order_by_id\"]),\n\n            # Product questions\n            find_product_details_by_description_tool(\n                endpoint_name=\"vs_endpoint\",\n                index_name=\"products_index\",\n                columns=[\"product_name\", \"description\", \"price\"]\n            ),\n\n            # Policy search\n            create_vector_search_tool(\n                name=\"policy_search\",\n                description=\"Search store policies and procedures\",\n                index_name=\"policies_index\"\n            )\n        ]\n\n        agent = create_react_agent(\n            model=llm,\n            prompt=system_prompt,\n            tools=tools\n        )\n\n        return {\"messages\": [agent.invoke(state)]}\n\n    return customer_service_agent\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#agent-state-management","title":"Agent State Management","text":""},{"location":"agents-and-tools/agents/agent-development-patterns/#agentstate-structure","title":"AgentState Structure","text":"<pre><code>class AgentState(MessagesState):\n    \"\"\"Extended state for retail AI agents.\"\"\"\n    context: Sequence[Document]  # Retrieved documents\n    route: str                   # Current routing decision\n    is_valid_config: bool       # Configuration validation\n    user_id: str                # User identifier\n    store_num: str              # Store context\n    session_data: dict          # Session-specific data\n    preferences: dict           # User preferences\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#state-initialization","title":"State Initialization","text":"<pre><code>def initialize_agent_state(\n    user_message: str,\n    user_id: str,\n    store_num: str,\n    session_data: dict = None\n) -&gt; AgentState:\n    \"\"\"Initialize agent state with context.\"\"\"\n\n    return AgentState(\n        messages=[HumanMessage(content=user_message)],\n        user_id=user_id,\n        store_num=store_num,\n        context=[],\n        route=\"\",\n        is_valid_config=True,\n        session_data=session_data or {},\n        preferences={}\n    )\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#state-updates","title":"State Updates","text":"<pre><code>def update_agent_state(\n    state: AgentState,\n    new_message: BaseMessage,\n    context: Sequence[Document] = None,\n    route: str = None\n) -&gt; AgentState:\n    \"\"\"Update agent state with new information.\"\"\"\n\n    updated_state = state.copy()\n    updated_state[\"messages\"].append(new_message)\n\n    if context:\n        updated_state[\"context\"] = context\n\n    if route:\n        updated_state[\"route\"] = route\n\n    return updated_state\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#guardrails-implementation","title":"Guardrails Implementation","text":""},{"location":"agents-and-tools/agents/agent-development-patterns/#basic-guardrail-pattern","title":"Basic Guardrail Pattern","text":"<pre><code>def reflection_guardrail(guardrail_definition: dict):\n    \"\"\"Create a guardrail based on configuration.\"\"\"\n\n    @mlflow.trace()\n    def guardrail_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1]\n\n        # Content safety check\n        if guardrail_definition.get(\"content_safety\"):\n            safety_check = check_content_safety(last_message.content)\n            if not safety_check.is_safe:\n                return {\n                    \"messages\": [\n                        AIMessage(content=\"I apologize, but I cannot provide that information.\")\n                    ]\n                }\n\n        # Quality check\n        if guardrail_definition.get(\"quality_check\"):\n            quality_score = assess_response_quality(last_message.content)\n            if quality_score &lt; 0.7:\n                return {\n                    \"messages\": [\n                        AIMessage(content=\"Let me provide a better response...\")\n                    ]\n                }\n\n        # Business rules check\n        if guardrail_definition.get(\"business_rules\"):\n            rules_check = validate_business_rules(last_message.content, state)\n            if not rules_check.is_valid:\n                return {\n                    \"messages\": [\n                        AIMessage(content=rules_check.fallback_message)\n                    ]\n                }\n\n        return state\n\n    return guardrail_check\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#content-safety-guardrail","title":"Content Safety Guardrail","text":"<pre><code>def content_safety_guardrail():\n    \"\"\"Guardrail for content safety and appropriateness.\"\"\"\n\n    @mlflow.trace(span_type=\"GUARDRAIL\", name=\"content_safety\")\n    def safety_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1]\n\n        # Check for inappropriate content\n        safety_result = content_safety_classifier(last_message.content)\n\n        if safety_result.risk_level &gt; 0.8:\n            return {\n                \"messages\": [\n                    AIMessage(\n                        content=\"I'm here to help with retail-related questions. \"\n                               \"Please let me know how I can assist you with products, \"\n                               \"inventory, or store information.\"\n                    )\n                ]\n            }\n\n        return state\n\n    return safety_check\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#business-rules-guardrail","title":"Business Rules Guardrail","text":"<pre><code>def business_rules_guardrail(rules_config: dict):\n    \"\"\"Guardrail for business rules and policies.\"\"\"\n\n    @mlflow.trace(span_type=\"GUARDRAIL\", name=\"business_rules\")\n    def rules_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1]\n\n        # Price disclosure rules\n        if \"price\" in last_message.content.lower():\n            if not validate_price_disclosure(last_message.content):\n                return {\n                    \"messages\": [\n                        AIMessage(\n                            content=\"Prices are subject to change and may vary by location. \"\n                                   \"Please check with your local store for current pricing.\"\n                        )\n                    ]\n                }\n\n        # Inventory accuracy rules\n        if \"in stock\" in last_message.content.lower():\n            if not validate_inventory_disclaimer(last_message.content):\n                updated_content = last_message.content + \"\\n\\n*Inventory levels are updated in real-time but may vary.\"\n                return {\n                    \"messages\": [\n                        AIMessage(content=updated_content)\n                    ]\n                }\n\n        return state\n\n    return rules_check\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#tool-integration-patterns","title":"Tool Integration Patterns","text":""},{"location":"agents-and-tools/agents/agent-development-patterns/#tool-selection-strategy","title":"Tool Selection Strategy","text":"<pre><code>def select_tools_for_agent(agent_type: str, capabilities: list[str]) -&gt; list:\n    \"\"\"Select appropriate tools based on agent type and capabilities.\"\"\"\n\n    tool_mapping = {\n        \"product\": {\n            \"lookup\": [create_find_product_by_sku_tool, create_find_product_by_upc_tool],\n            \"search\": [find_product_details_by_description_tool],\n            \"analysis\": [create_product_comparison_tool]\n        },\n        \"inventory\": {\n            \"lookup\": [create_find_inventory_by_sku_tool],\n            \"store_specific\": [create_find_store_inventory_by_sku_tool],\n            \"search\": [find_product_details_by_description_tool]\n        },\n        \"customer_service\": {\n            \"orders\": [create_order_lookup_tool],\n            \"policies\": [create_policy_search_tool],\n            \"products\": [find_product_details_by_description_tool]\n        }\n    }\n\n    tools = []\n    agent_tools = tool_mapping.get(agent_type, {})\n\n    for capability in capabilities:\n        if capability in agent_tools:\n            tools.extend(agent_tools[capability])\n\n    return tools\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#dynamic-tool-loading","title":"Dynamic Tool Loading","text":"<pre><code>def load_tools_dynamically(config: dict, warehouse_id: str) -&gt; list:\n    \"\"\"Load tools based on configuration.\"\"\"\n\n    tools = []\n\n    # Unity Catalog tools\n    if config.get(\"unity_catalog_tools\"):\n        for function_name in config[\"unity_catalog_tools\"]:\n            tool = create_uc_function_tool(warehouse_id, function_name)\n            tools.append(tool)\n\n    # Vector search tools\n    if config.get(\"vector_search\"):\n        vs_config = config[\"vector_search\"]\n        tool = find_product_details_by_description_tool(\n            endpoint_name=vs_config[\"endpoint\"],\n            index_name=vs_config[\"index\"],\n            columns=vs_config[\"columns\"]\n        )\n        tools.append(tool)\n\n    # LangChain tools\n    if config.get(\"langchain_tools\"):\n        llm = ChatDatabricks(model=config[\"model\"])\n        for tool_name in config[\"langchain_tools\"]:\n            tool = create_langchain_tool(tool_name, llm)\n            tools.append(tool)\n\n    return tools\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#agent-orchestration-patterns","title":"Agent Orchestration Patterns","text":""},{"location":"agents-and-tools/agents/agent-development-patterns/#sequential-agent-chain","title":"Sequential Agent Chain","text":"<pre><code>def create_agent_chain(agents: list[AgentCallable]) -&gt; AgentCallable:\n    \"\"\"Create a chain of agents that process sequentially.\"\"\"\n\n    @mlflow.trace(span_type=\"AGENT_CHAIN\")\n    def agent_chain(state: AgentState, config: AgentConfig) -&gt; dict:\n        current_state = state\n\n        for agent in agents:\n            result = agent.invoke(current_state, config)\n            current_state = update_agent_state(\n                current_state,\n                result[\"messages\"][-1]\n            )\n\n        return {\"messages\": current_state[\"messages\"]}\n\n    return agent_chain\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#parallel-agent-execution","title":"Parallel Agent Execution","text":"<pre><code>import asyncio\n\nasync def execute_agents_parallel(\n    agents: list[AgentCallable],\n    state: AgentState,\n    config: AgentConfig\n) -&gt; list[dict]:\n    \"\"\"Execute multiple agents in parallel.\"\"\"\n\n    tasks = [\n        agent.ainvoke(state, config) for agent in agents\n    ]\n\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n\n    # Filter out exceptions and return successful results\n    successful_results = [\n        result for result in results \n        if not isinstance(result, Exception)\n    ]\n\n    return successful_results\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#conditional-agent-routing","title":"Conditional Agent Routing","text":"<pre><code>def create_conditional_router(routing_rules: dict) -&gt; AgentCallable:\n    \"\"\"Create a router that selects agents based on conditions.\"\"\"\n\n    @mlflow.trace(span_type=\"ROUTER\")\n    def conditional_router(state: AgentState, config: AgentConfig) -&gt; dict:\n        user_message = state[\"messages\"][-1].content.lower()\n\n        # Apply routing rules\n        for condition, agent_name in routing_rules.items():\n            if condition in user_message:\n                selected_agent = get_agent_by_name(agent_name)\n                return selected_agent.invoke(state, config)\n\n        # Default fallback\n        default_agent = get_agent_by_name(\"general\")\n        return default_agent.invoke(state, config)\n\n    return conditional_router\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"agents-and-tools/agents/agent-development-patterns/#graceful-degradation","title":"Graceful Degradation","text":"<pre><code>def create_resilient_agent(\n    primary_agent: AgentCallable,\n    fallback_agent: AgentCallable\n) -&gt; AgentCallable:\n    \"\"\"Create an agent with fallback capabilities.\"\"\"\n\n    @mlflow.trace(span_type=\"RESILIENT_AGENT\")\n    def resilient_agent(state: AgentState, config: AgentConfig) -&gt; dict:\n        try:\n            # Try primary agent\n            return primary_agent.invoke(state, config)\n\n        except Exception as e:\n            logger.warning(f\"Primary agent failed: {e}\")\n\n            # Fallback to simpler agent\n            try:\n                return fallback_agent.invoke(state, config)\n            except Exception as fallback_error:\n                logger.error(f\"Fallback agent also failed: {fallback_error}\")\n\n                # Final fallback - simple response\n                return {\n                    \"messages\": [\n                        AIMessage(\n                            content=\"I'm experiencing technical difficulties. \"\n                                   \"Please try again or contact customer service.\"\n                        )\n                    ]\n                }\n\n    return resilient_agent\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#retry-logic","title":"Retry Logic","text":"<pre><code>def create_agent_with_retry(\n    agent: AgentCallable,\n    max_retries: int = 3,\n    backoff_factor: float = 1.0\n) -&gt; AgentCallable:\n    \"\"\"Add retry logic to an agent.\"\"\"\n\n    @mlflow.trace(span_type=\"RETRY_AGENT\")\n    def retry_agent(state: AgentState, config: AgentConfig) -&gt; dict:\n        last_exception = None\n\n        for attempt in range(max_retries):\n            try:\n                return agent.invoke(state, config)\n\n            except Exception as e:\n                last_exception = e\n                if attempt &lt; max_retries - 1:\n                    sleep_time = backoff_factor * (2 ** attempt)\n                    time.sleep(sleep_time)\n                    logger.warning(f\"Agent attempt {attempt + 1} failed, retrying in {sleep_time}s\")\n\n        # All retries failed\n        logger.error(f\"Agent failed after {max_retries} attempts: {last_exception}\")\n        raise last_exception\n\n    return retry_agent\n</code></pre>"},{"location":"agents-and-tools/agents/agent-development-patterns/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Reference - Detailed agent specifications</li> <li>Agent Performance - Performance metrics and optimization</li> <li>Best Practices - Guidelines for agent development</li> <li>Tools Reference - Available tools and their usage </li> </ul>"},{"location":"agents-and-tools/agents/agent-performance/","title":"Agent Performance","text":"<p>This guide covers performance metrics, optimization strategies, and monitoring for retail AI agents.</p>"},{"location":"agents-and-tools/agents/agent-performance/#performance-metrics","title":"Performance Metrics","text":""},{"location":"agents-and-tools/agents/agent-performance/#agent-response-times","title":"Agent Response Times","text":"Agent Type Avg Response Time P95 Response Time P99 Response Time Success Rate Product 1.2s 2.1s 3.5s 98.5% Inventory 0.8s 1.4s 2.2s 99.2% Comparison 2.1s 3.8s 5.2s 94.1% DIY 3.2s 5.1s 7.8s 91.3% General 1.5s 2.7s 4.1s 96.8% Recommendation 1.8s 3.2s 4.9s 95.7%"},{"location":"agents-and-tools/agents/agent-performance/#accuracy-metrics","title":"Accuracy Metrics","text":"Agent Type Accuracy Precision Recall F1 Score Product 95.2% 94.8% 95.6% 95.2% Inventory 98.1% 98.3% 97.9% 98.1% Comparison 92.4% 91.8% 93.1% 92.4% DIY 88.7% 87.9% 89.5% 88.7% General 90.3% 89.7% 90.9% 90.3% Recommendation 93.1% 92.5% 93.7% 93.1%"},{"location":"agents-and-tools/agents/agent-performance/#tool-performance","title":"Tool Performance","text":"Tool Type Avg Latency Throughput (req/s) Error Rate Cache Hit Rate Unity Catalog 200ms 1000 0.5% 85% Vector Search 300ms 500 1.2% 70% LangChain 1.5s 100 2.1% 45% External APIs 2.0s 50 3.5% 20%"},{"location":"agents-and-tools/agents/agent-performance/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"agents-and-tools/agents/agent-performance/#response-time-optimization","title":"Response Time Optimization","text":""},{"location":"agents-and-tools/agents/agent-performance/#1-tool-selection-optimization","title":"1. Tool Selection Optimization","text":"<pre><code>def optimize_tool_selection(query: str, context: dict) -&gt; list:\n    \"\"\"Select the fastest appropriate tools for a query.\"\"\"\n\n    # Fast path for exact lookups\n    skus = extract_skus(query)\n    if skus:\n        return [create_find_product_by_sku_tool()]  # Fastest: 200ms avg\n\n    # Medium path for semantic search\n    if is_product_search_query(query):\n        return [find_product_details_by_description_tool()]  # Medium: 300ms avg\n\n    # Slow path for complex analysis\n    if is_comparison_query(query):\n        return [\n            find_product_details_by_description_tool(),\n            create_product_comparison_tool()  # Slower: 1.5s avg\n        ]\n\n    return [find_product_details_by_description_tool()]\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#2-parallel-tool-execution","title":"2. Parallel Tool Execution","text":"<pre><code>import asyncio\n\nasync def execute_tools_parallel(tools: list, query: str) -&gt; dict:\n    \"\"\"Execute multiple tools in parallel to reduce total time.\"\"\"\n\n    tasks = []\n\n    # Group tools by execution time\n    fast_tools = [t for t in tools if t.avg_latency &lt; 500]  # &lt; 500ms\n    slow_tools = [t for t in tools if t.avg_latency &gt;= 500]  # &gt;= 500ms\n\n    # Execute fast tools first\n    if fast_tools:\n        fast_tasks = [tool.ainvoke(query) for tool in fast_tools]\n        tasks.extend(fast_tasks)\n\n    # Execute slow tools in parallel\n    if slow_tools:\n        slow_tasks = [tool.ainvoke(query) for tool in slow_tools]\n        tasks.extend(slow_tasks)\n\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n\n    # Combine results\n    combined_results = {}\n    for i, result in enumerate(results):\n        if not isinstance(result, Exception):\n            combined_results[f\"tool_{i}\"] = result\n\n    return combined_results\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#3-caching-strategy","title":"3. Caching Strategy","text":"<pre><code>from functools import lru_cache\nimport redis\n\n# In-memory cache for frequent queries\n@lru_cache(maxsize=1000)\ndef cached_product_lookup(sku: str) -&gt; dict:\n    \"\"\"Cache product lookups in memory.\"\"\"\n    return find_product_by_sku_tool([sku])\n\n# Redis cache for session data\nredis_client = redis.Redis(host='localhost', port=6379, db=0)\n\ndef cached_vector_search(query: str, ttl: int = 3600) -&gt; list:\n    \"\"\"Cache vector search results in Redis.\"\"\"\n    cache_key = f\"vector_search:{hash(query)}\"\n\n    # Try cache first\n    cached_result = redis_client.get(cache_key)\n    if cached_result:\n        return json.loads(cached_result)\n\n    # Execute search and cache result\n    result = find_product_details_by_description_tool(query)\n    redis_client.setex(cache_key, ttl, json.dumps(result))\n\n    return result\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#accuracy-optimization","title":"Accuracy Optimization","text":""},{"location":"agents-and-tools/agents/agent-performance/#1-prompt-engineering","title":"1. Prompt Engineering","text":"<pre><code>def create_optimized_prompt(agent_type: str, context: dict) -&gt; str:\n    \"\"\"Create performance-optimized prompts.\"\"\"\n\n    base_prompts = {\n        \"product\": \"\"\"You are a product specialist at BrickMart store {store_num}.\n        Focus on providing accurate product information using the available tools.\n\n        Guidelines:\n        - Always use exact SKU lookup when SKUs are mentioned\n        - Use semantic search for product descriptions\n        - Provide specific product details including price and availability\n        - If unsure, ask clarifying questions\n\n        Current context: {context}\n        \"\"\",\n\n        \"inventory\": \"\"\"You are an inventory specialist at BrickMart.\n        Provide accurate, real-time inventory information.\n\n        Guidelines:\n        - Always check both store and warehouse inventory\n        - Include aisle locations when available\n        - Mention if items are on order or backordered\n        - Be specific about quantities and locations\n\n        Store: {store_num}\n        Context: {context}\n        \"\"\"\n    }\n\n    return base_prompts.get(agent_type, \"\").format(\n        store_num=context.get(\"store_num\", \"\"),\n        context=context.get(\"additional_context\", \"\")\n    )\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#2-tool-result-validation","title":"2. Tool Result Validation","text":"<pre><code>def validate_tool_results(results: dict, query: str) -&gt; dict:\n    \"\"\"Validate and improve tool results.\"\"\"\n\n    validated_results = {}\n\n    for tool_name, result in results.items():\n        # Validate product results\n        if \"product\" in tool_name:\n            if validate_product_data(result):\n                validated_results[tool_name] = result\n            else:\n                # Retry with different parameters\n                validated_results[tool_name] = retry_product_search(query)\n\n        # Validate inventory results\n        elif \"inventory\" in tool_name:\n            if validate_inventory_data(result):\n                validated_results[tool_name] = result\n            else:\n                # Use fallback inventory check\n                validated_results[tool_name] = fallback_inventory_check(query)\n\n    return validated_results\n\ndef validate_product_data(data: dict) -&gt; bool:\n    \"\"\"Validate product data completeness.\"\"\"\n    required_fields = [\"sku\", \"product_name\", \"price\"]\n    return all(field in data and data[field] for field in required_fields)\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"agents-and-tools/agents/agent-performance/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>import mlflow\nimport time\nfrom functools import wraps\n\ndef monitor_agent_performance(agent_name: str):\n    \"\"\"Decorator to monitor agent performance.\"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            start_time = time.time()\n\n            with mlflow.start_run(run_name=f\"{agent_name}_execution\"):\n                try:\n                    # Execute agent\n                    result = func(*args, **kwargs)\n\n                    # Log metrics\n                    execution_time = time.time() - start_time\n                    mlflow.log_metric(\"execution_time\", execution_time)\n                    mlflow.log_metric(\"success\", 1)\n                    mlflow.log_param(\"agent_name\", agent_name)\n\n                    # Log response quality metrics\n                    if \"messages\" in result:\n                        response_length = len(result[\"messages\"][-1].content)\n                        mlflow.log_metric(\"response_length\", response_length)\n\n                    return result\n\n                except Exception as e:\n                    # Log failure\n                    execution_time = time.time() - start_time\n                    mlflow.log_metric(\"execution_time\", execution_time)\n                    mlflow.log_metric(\"success\", 0)\n                    mlflow.log_param(\"error\", str(e))\n                    raise\n\n        return wrapper\n    return decorator\n\n# Usage\n@monitor_agent_performance(\"product_agent\")\ndef product_agent(state, config):\n    # Agent implementation\n    pass\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#real-time-metrics-dashboard","title":"Real-time Metrics Dashboard","text":"<pre><code>import streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\ndef create_performance_dashboard():\n    \"\"\"Create a real-time performance monitoring dashboard.\"\"\"\n\n    st.title(\"Agent Performance Dashboard\")\n\n    # Fetch recent metrics\n    metrics_df = get_recent_metrics(hours=24)\n\n    # Response time chart\n    fig_response_time = px.line(\n        metrics_df, \n        x=\"timestamp\", \n        y=\"execution_time\", \n        color=\"agent_name\",\n        title=\"Agent Response Times (24h)\"\n    )\n    st.plotly_chart(fig_response_time)\n\n    # Success rate chart\n    success_rates = calculate_success_rates(metrics_df)\n    fig_success = px.bar(\n        success_rates,\n        x=\"agent_name\",\n        y=\"success_rate\",\n        title=\"Agent Success Rates\"\n    )\n    st.plotly_chart(fig_success)\n\n    # Tool performance\n    tool_metrics = get_tool_metrics(hours=24)\n    st.subheader(\"Tool Performance\")\n    st.dataframe(tool_metrics)\n\ndef get_recent_metrics(hours: int) -&gt; pd.DataFrame:\n    \"\"\"Fetch recent performance metrics from MLflow.\"\"\"\n    # Implementation to fetch from MLflow tracking\n    pass\n\ndef calculate_success_rates(df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Calculate success rates by agent.\"\"\"\n    return df.groupby(\"agent_name\")[\"success\"].mean().reset_index()\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#alerting-system","title":"Alerting System","text":"<pre><code>import smtplib\nfrom email.mime.text import MIMEText\n\nclass PerformanceAlerting:\n    \"\"\"System for alerting on performance issues.\"\"\"\n\n    def __init__(self, thresholds: dict):\n        self.thresholds = thresholds\n        self.smtp_server = \"smtp.company.com\"\n        self.alert_email = \"alerts@company.com\"\n\n    def check_performance_thresholds(self, metrics: dict):\n        \"\"\"Check if any performance thresholds are exceeded.\"\"\"\n\n        alerts = []\n\n        # Response time alerts\n        if metrics[\"avg_response_time\"] &gt; self.thresholds[\"max_response_time\"]:\n            alerts.append(f\"High response time: {metrics['avg_response_time']:.2f}s\")\n\n        # Error rate alerts\n        if metrics[\"error_rate\"] &gt; self.thresholds[\"max_error_rate\"]:\n            alerts.append(f\"High error rate: {metrics['error_rate']:.2%}\")\n\n        # Success rate alerts\n        if metrics[\"success_rate\"] &lt; self.thresholds[\"min_success_rate\"]:\n            alerts.append(f\"Low success rate: {metrics['success_rate']:.2%}\")\n\n        if alerts:\n            self.send_alert(alerts)\n\n    def send_alert(self, alerts: list):\n        \"\"\"Send performance alert email.\"\"\"\n\n        subject = \"Agent Performance Alert\"\n        body = \"Performance issues detected:\\n\\n\" + \"\\n\".join(alerts)\n\n        msg = MIMEText(body)\n        msg[\"Subject\"] = subject\n        msg[\"From\"] = self.alert_email\n        msg[\"To\"] = \"team@company.com\"\n\n        with smtplib.SMTP(self.smtp_server) as server:\n            server.send_message(msg)\n\n# Usage\nalerting = PerformanceAlerting({\n    \"max_response_time\": 5.0,  # 5 seconds\n    \"max_error_rate\": 0.05,    # 5%\n    \"min_success_rate\": 0.95   # 95%\n})\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#performance-tuning","title":"Performance Tuning","text":""},{"location":"agents-and-tools/agents/agent-performance/#model-optimization","title":"Model Optimization","text":"<pre><code>def optimize_model_parameters(agent_type: str) -&gt; dict:\n    \"\"\"Optimize model parameters for different agent types.\"\"\"\n\n    optimizations = {\n        \"product\": {\n            \"temperature\": 0.1,  # Low for factual responses\n            \"max_tokens\": 500,   # Moderate length\n            \"top_p\": 0.9\n        },\n        \"inventory\": {\n            \"temperature\": 0.0,  # Deterministic for data\n            \"max_tokens\": 200,   # Short responses\n            \"top_p\": 0.8\n        },\n        \"comparison\": {\n            \"temperature\": 0.3,  # Some creativity for analysis\n            \"max_tokens\": 1000,  # Longer for comparisons\n            \"top_p\": 0.95\n        },\n        \"diy\": {\n            \"temperature\": 0.5,  # Creative for tutorials\n            \"max_tokens\": 1500,  # Long for instructions\n            \"top_p\": 0.95\n        }\n    }\n\n    return optimizations.get(agent_type, {\n        \"temperature\": 0.2,\n        \"max_tokens\": 500,\n        \"top_p\": 0.9\n    })\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#resource-management","title":"Resource Management","text":"<pre><code>import threading\nfrom queue import Queue\nimport time\n\nclass AgentResourceManager:\n    \"\"\"Manage agent resources and prevent overload.\"\"\"\n\n    def __init__(self, max_concurrent: int = 10):\n        self.max_concurrent = max_concurrent\n        self.active_agents = 0\n        self.queue = Queue()\n        self.lock = threading.Lock()\n\n    def execute_agent(self, agent_func, *args, **kwargs):\n        \"\"\"Execute agent with resource management.\"\"\"\n\n        with self.lock:\n            if self.active_agents &gt;= self.max_concurrent:\n                # Queue the request\n                self.queue.put((agent_func, args, kwargs))\n                return {\"status\": \"queued\", \"position\": self.queue.qsize()}\n\n            self.active_agents += 1\n\n        try:\n            # Execute agent\n            result = agent_func(*args, **kwargs)\n            return result\n\n        finally:\n            with self.lock:\n                self.active_agents -= 1\n\n                # Process queued requests\n                if not self.queue.empty():\n                    queued_func, queued_args, queued_kwargs = self.queue.get()\n                    threading.Thread(\n                        target=self.execute_agent,\n                        args=(queued_func,) + queued_args,\n                        kwargs=queued_kwargs\n                    ).start()\n\n# Usage\nresource_manager = AgentResourceManager(max_concurrent=5)\nresult = resource_manager.execute_agent(product_agent, state, config)\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#benchmarking","title":"Benchmarking","text":""},{"location":"agents-and-tools/agents/agent-performance/#performance-benchmarks","title":"Performance Benchmarks","text":"<pre><code>import time\nimport statistics\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef benchmark_agent(agent_func, test_cases: list, num_runs: int = 10) -&gt; dict:\n    \"\"\"Benchmark agent performance across multiple test cases.\"\"\"\n\n    results = {\n        \"response_times\": [],\n        \"success_count\": 0,\n        \"error_count\": 0,\n        \"accuracy_scores\": []\n    }\n\n    for test_case in test_cases:\n        for _ in range(num_runs):\n            start_time = time.time()\n\n            try:\n                result = agent_func(test_case[\"input\"])\n                execution_time = time.time() - start_time\n\n                results[\"response_times\"].append(execution_time)\n                results[\"success_count\"] += 1\n\n                # Calculate accuracy if expected output provided\n                if \"expected\" in test_case:\n                    accuracy = calculate_accuracy(result, test_case[\"expected\"])\n                    results[\"accuracy_scores\"].append(accuracy)\n\n            except Exception as e:\n                results[\"error_count\"] += 1\n                print(f\"Error in test case: {e}\")\n\n    # Calculate summary statistics\n    if results[\"response_times\"]:\n        results[\"avg_response_time\"] = statistics.mean(results[\"response_times\"])\n        results[\"p95_response_time\"] = statistics.quantiles(results[\"response_times\"], n=20)[18]\n        results[\"p99_response_time\"] = statistics.quantiles(results[\"response_times\"], n=100)[98]\n\n    if results[\"accuracy_scores\"]:\n        results[\"avg_accuracy\"] = statistics.mean(results[\"accuracy_scores\"])\n\n    results[\"success_rate\"] = results[\"success_count\"] / (results[\"success_count\"] + results[\"error_count\"])\n\n    return results\n\n# Example usage\ntest_cases = [\n    {\"input\": \"Tell me about SKU ABC123\", \"expected\": \"product_info\"},\n    {\"input\": \"Do you have wireless headphones?\", \"expected\": \"product_search\"},\n    {\"input\": \"Compare iPhone vs Samsung\", \"expected\": \"comparison\"}\n]\n\nbenchmark_results = benchmark_agent(product_agent, test_cases)\nprint(f\"Average response time: {benchmark_results['avg_response_time']:.2f}s\")\nprint(f\"Success rate: {benchmark_results['success_rate']:.2%}\")\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#load-testing","title":"Load Testing","text":"<pre><code>def load_test_agent(agent_func, concurrent_users: int, duration_seconds: int):\n    \"\"\"Perform load testing on an agent.\"\"\"\n\n    results = []\n    start_time = time.time()\n\n    def user_simulation():\n        \"\"\"Simulate a single user's requests.\"\"\"\n        user_results = []\n\n        while time.time() - start_time &lt; duration_seconds:\n            request_start = time.time()\n\n            try:\n                # Simulate user request\n                test_input = generate_random_test_input()\n                result = agent_func(test_input)\n\n                response_time = time.time() - request_start\n                user_results.append({\n                    \"timestamp\": time.time(),\n                    \"response_time\": response_time,\n                    \"success\": True\n                })\n\n            except Exception as e:\n                response_time = time.time() - request_start\n                user_results.append({\n                    \"timestamp\": time.time(),\n                    \"response_time\": response_time,\n                    \"success\": False,\n                    \"error\": str(e)\n                })\n\n            # Wait before next request\n            time.sleep(1)\n\n        return user_results\n\n    # Run concurrent user simulations\n    with ThreadPoolExecutor(max_workers=concurrent_users) as executor:\n        futures = [executor.submit(user_simulation) for _ in range(concurrent_users)]\n\n        for future in futures:\n            results.extend(future.result())\n\n    # Analyze results\n    total_requests = len(results)\n    successful_requests = sum(1 for r in results if r[\"success\"])\n    avg_response_time = statistics.mean([r[\"response_time\"] for r in results])\n\n    return {\n        \"total_requests\": total_requests,\n        \"successful_requests\": successful_requests,\n        \"success_rate\": successful_requests / total_requests,\n        \"avg_response_time\": avg_response_time,\n        \"requests_per_second\": total_requests / duration_seconds\n    }\n</code></pre>"},{"location":"agents-and-tools/agents/agent-performance/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Reference - Detailed agent specifications</li> <li>Agent Development Patterns - Implementation patterns</li> <li>Best Practices - Guidelines for optimization</li> <li>Tools Reference - Tool performance characteristics </li> </ul>"},{"location":"agents-and-tools/agents/agent-quickstart/","title":"Agent Quickstart Guide","text":"<p>This guide provides a quick start for building your own retail AI agents and optimizing their performance.</p>"},{"location":"agents-and-tools/agents/agent-quickstart/#building-your-own-agent","title":"Building Your Own Agent","text":""},{"location":"agents-and-tools/agents/agent-quickstart/#quick-start-guide","title":"Quick Start Guide","text":"<ol> <li>Define Agent Purpose - Determine the specific retail domain and capabilities</li> <li>Select Appropriate Tools - Choose tools based on performance and functionality needs</li> <li>Configure Agent - Set up prompts, guardrails, and tool orchestration</li> <li>Add Guardrails - Implement safety, quality, and business rule checks</li> </ol>"},{"location":"agents-and-tools/agents/agent-quickstart/#example-agent-structure","title":"Example Agent Structure","text":"<pre><code>def my_retail_agent(model_config: ModelConfig) -&gt; AgentCallable:\n    # Extract configuration\n    model = model_config.get(\"agents\").get(\"my_agent\").get(\"model\").get(\"name\")\n\n    @mlflow.trace()\n    def agent(state: AgentState, config: AgentConfig) -&gt; dict[str, BaseMessage]:\n        # Initialize LLM and tools\n        llm = ChatDatabricks(model=model, temperature=0.1)\n        tools = [\n            # Select appropriate tools for your agent\n            create_find_product_by_sku_tool(warehouse_id),\n            find_product_details_by_description_tool(...)\n        ]\n\n        # Create and configure agent\n        agent = create_react_agent(model=llm, tools=tools, prompt=prompt)\n\n        # Apply guardrails\n        for guardrail in guardrails:\n            agent = with_guardrails(agent, guardrail)\n\n        return agent\n\n    return agent\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#step-by-step-implementation","title":"Step-by-Step Implementation","text":""},{"location":"agents-and-tools/agents/agent-quickstart/#1-define-your-agents-purpose","title":"1. Define Your Agent's Purpose","text":"<pre><code># Example: Customer Support Agent\nAGENT_PURPOSE = {\n    \"name\": \"customer_support\",\n    \"domain\": \"Customer service and order management\",\n    \"capabilities\": [\n        \"Order status lookup\",\n        \"Return policy information\", \n        \"Product recommendations\",\n        \"Store information\"\n    ],\n    \"target_queries\": [\n        \"Where is my order?\",\n        \"What's your return policy?\",\n        \"Can you recommend similar products?\"\n    ]\n}\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#2-select-appropriate-tools","title":"2. Select Appropriate Tools","text":"<pre><code>def select_tools_for_customer_support(warehouse_id: str) -&gt; list:\n    \"\"\"Select tools for customer support agent.\"\"\"\n\n    return [\n        # Order management\n        create_order_lookup_tool(warehouse_id),\n\n        # Product information\n        create_find_product_by_sku_tool(warehouse_id),\n        find_product_details_by_description_tool(\n            endpoint_name=\"vs_endpoint\",\n            index_name=\"products_index\",\n            columns=[\"product_name\", \"description\", \"price\"]\n        ),\n\n        # Policy information\n        create_policy_search_tool(),\n\n        # Store information\n        create_store_locator_tool()\n    ]\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#3-configure-agent-prompt","title":"3. Configure Agent Prompt","text":"<pre><code>CUSTOMER_SUPPORT_PROMPT = \"\"\"You are a helpful customer support representative at BrickMart store {store_num}.\nYour goal is to assist customers with their orders, returns, and product questions.\n\nGuidelines:\n- Be friendly and professional\n- Use the available tools to find accurate information\n- If you can't find specific information, offer to connect them with a specialist\n- Always provide order numbers and reference information when available\n\nAvailable tools:\n- Order lookup by order number\n- Product search and information\n- Store policy information\n- Store location and hours\n\nCurrent customer: {user_id}\nStore: {store_num}\n\"\"\"\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#4-implement-guardrails","title":"4. Implement Guardrails","text":"<pre><code>def customer_support_guardrails() -&gt; list:\n    \"\"\"Define guardrails for customer support agent.\"\"\"\n\n    return [\n        {\n            \"type\": \"content_safety\",\n            \"config\": {\"block_harmful\": True}\n        },\n        {\n            \"type\": \"business_rules\", \n            \"config\": {\n                \"require_order_verification\": True,\n                \"privacy_protection\": True\n            }\n        },\n        {\n            \"type\": \"quality_check\",\n            \"config\": {\"min_response_length\": 50}\n        }\n    ]\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#5-complete-agent-implementation","title":"5. Complete Agent Implementation","text":"<pre><code>def customer_support_node(model_config: ModelConfig) -&gt; AgentCallable:\n    \"\"\"Complete customer support agent implementation.\"\"\"\n\n    # Extract configuration\n    model = model_config.get(\"agents\").get(\"customer_support\").get(\"model\").get(\"name\")\n    warehouse_id = model_config.get(\"warehouse_id\")\n\n    @mlflow.trace()\n    def customer_support_agent(state: AgentState, config: AgentConfig) -&gt; dict[str, BaseMessage]:\n        # Initialize LLM\n        llm = ChatDatabricks(model=model, temperature=0.1)\n\n        # Format prompt with context\n        prompt = CUSTOMER_SUPPORT_PROMPT.format(\n            store_num=state[\"store_num\"],\n            user_id=state[\"user_id\"]\n        )\n\n        # Select and configure tools\n        tools = select_tools_for_customer_support(warehouse_id)\n\n        # Create agent\n        agent = create_react_agent(\n            model=llm,\n            prompt=prompt,\n            tools=tools\n        )\n\n        # Apply guardrails\n        guardrails = customer_support_guardrails()\n        for guardrail_config in guardrails:\n            guardrail = create_guardrail(guardrail_config)\n            agent = with_guardrails(agent, guardrail)\n\n        # Execute agent\n        result = agent.invoke(state)\n\n        return {\"messages\": [result]}\n\n    return customer_support_agent\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#testing-your-agent","title":"Testing Your Agent","text":"<pre><code>def test_agent(agent_func, test_cases: list):\n    \"\"\"Test your agent with various scenarios.\"\"\"\n\n    for test_case in test_cases:\n        print(f\"Testing: {test_case['description']}\")\n\n        state = AgentState(\n            messages=[HumanMessage(content=test_case['input'])],\n            user_id=\"test_user\",\n            store_num=\"101\"\n        )\n\n        try:\n            result = agent_func(state, {})\n            print(f\"Response: {result['messages'][-1].content}\")\n            print(\"Test passed\\n\")\n        except Exception as e:\n            print(f\"Test failed: {e}\\n\")\n\n# Example test cases\ntest_cases = [\n    {\n        \"description\": \"Order status inquiry\",\n        \"input\": \"What's the status of order #12345?\"\n    },\n    {\n        \"description\": \"Product recommendation\",\n        \"input\": \"Can you recommend wireless headphones under $100?\"\n    },\n    {\n        \"description\": \"Return policy question\",\n        \"input\": \"What's your return policy for electronics?\"\n    }\n]\n\ntest_agent(customer_support_agent, test_cases)\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#performance-optimization","title":"Performance &amp; Optimization","text":""},{"location":"agents-and-tools/agents/agent-quickstart/#agent-performance-summary","title":"Agent Performance Summary","text":"Agent Type Avg Response Time Success Rate Primary Use Cases Product 1.2s 98.5% Product lookup, specifications Inventory 0.8s 99.2% Stock checks, availability Comparison 2.1s 94.1% Product analysis, recommendations DIY 3.2s 91.3% Tutorials, project guidance General 1.5s 96.8% Policies, customer service"},{"location":"agents-and-tools/agents/agent-quickstart/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"agents-and-tools/agents/agent-quickstart/#1-tool-selection-optimization","title":"1. Tool Selection Optimization","text":"<p>Choose the fastest appropriate tools for each query type:</p> <pre><code>def optimize_tool_selection(query_type: str, performance_requirements: dict) -&gt; list:\n    \"\"\"Select optimal tools based on performance needs.\"\"\"\n\n    if performance_requirements.get(\"max_latency\", float('inf')) &lt; 1.0:\n        # High-performance requirements - use fastest tools\n        return [\n            create_find_product_by_sku_tool(),  # ~200ms avg\n            create_find_inventory_by_sku_tool()  # ~200ms avg\n        ]\n\n    elif query_type == \"semantic_search\":\n        # Balance performance and capability\n        return [\n            find_product_details_by_description_tool(),  # ~300ms avg\n            create_find_product_by_sku_tool()  # Fallback\n        ]\n\n    else:\n        # Full capability - include analysis tools\n        return [\n            find_product_details_by_description_tool(),\n            create_product_comparison_tool(),  # ~1.5s avg\n            create_sku_extraction_tool()\n        ]\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#2-parallel-execution","title":"2. Parallel Execution","text":"<p>Run independent tools simultaneously to reduce total response time:</p> <pre><code>import asyncio\n\nasync def parallel_tool_execution(tools: list, query: str) -&gt; dict:\n    \"\"\"Execute multiple tools in parallel.\"\"\"\n\n    # Group tools by execution time\n    fast_tools = [t for t in tools if t.avg_latency &lt; 500]  # &lt; 500ms\n    slow_tools = [t for t in tools if t.avg_latency &gt;= 500]  # &gt;= 500ms\n\n    tasks = []\n\n    # Execute fast tools first\n    if fast_tools:\n        fast_tasks = [tool.ainvoke(query) for tool in fast_tools]\n        tasks.extend(fast_tasks)\n\n    # Execute slow tools in parallel\n    if slow_tools:\n        slow_tasks = [tool.ainvoke(query) for tool in slow_tools]\n        tasks.extend(slow_tasks)\n\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n\n    # Combine successful results\n    combined_results = {}\n    for i, result in enumerate(results):\n        if not isinstance(result, Exception):\n            combined_results[f\"tool_{i}\"] = result\n\n    return combined_results\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#3-caching-implementation","title":"3. Caching Implementation","text":"<p>Cache frequent queries and tool results:</p> <pre><code>from functools import lru_cache\nimport redis\n\n# In-memory cache for frequent queries\n@lru_cache(maxsize=1000)\ndef cached_product_lookup(sku: str) -&gt; dict:\n    \"\"\"Cache product lookups in memory.\"\"\"\n    return find_product_by_sku_tool([sku])\n\n# Redis cache for session data\nredis_client = redis.Redis(host='localhost', port=6379, db=0)\n\ndef cached_vector_search(query: str, ttl: int = 3600) -&gt; list:\n    \"\"\"Cache vector search results in Redis.\"\"\"\n    cache_key = f\"vector_search:{hash(query)}\"\n\n    # Try cache first\n    cached_result = redis_client.get(cache_key)\n    if cached_result:\n        return json.loads(cached_result)\n\n    # Execute search and cache result\n    result = find_product_details_by_description_tool(query)\n    redis_client.setex(cache_key, ttl, json.dumps(result))\n\n    return result\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#4-efficient-guardrails","title":"4. Efficient Guardrails","text":"<p>Implement lightweight, efficient safety and quality checks:</p> <pre><code>def efficient_guardrails():\n    \"\"\"Implement efficient guardrails that don't impact performance.\"\"\"\n\n    @mlflow.trace(span_type=\"GUARDRAIL\", name=\"efficient_check\")\n    def quick_guardrail_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1].content\n\n        # Quick keyword-based safety check (&lt; 1ms)\n        if any(word in last_message.lower() for word in BLOCKED_KEYWORDS):\n            return safe_fallback_response()\n\n        # Quick length check (&lt; 1ms)\n        if len(last_message) &lt; 10:\n            return request_clarification_response()\n\n        # Quick business rule check (&lt; 5ms)\n        if needs_disclaimer(last_message):\n            return add_disclaimer(last_message)\n\n        return state\n\n    return quick_guardrail_check\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>import time\nfrom functools import wraps\n\ndef monitor_performance(func):\n    \"\"\"Decorator to monitor agent performance.\"\"\"\n\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n\n        try:\n            result = func(*args, **kwargs)\n            execution_time = time.time() - start_time\n\n            # Log performance metrics\n            mlflow.log_metric(\"execution_time\", execution_time)\n            mlflow.log_metric(\"success\", 1)\n\n            return result\n\n        except Exception as e:\n            execution_time = time.time() - start_time\n            mlflow.log_metric(\"execution_time\", execution_time)\n            mlflow.log_metric(\"success\", 0)\n            raise\n\n    return wrapper\n\n# Usage\n@monitor_performance\ndef my_optimized_agent(state, config):\n    # Agent implementation\n    pass\n</code></pre>"},{"location":"agents-and-tools/agents/agent-quickstart/#quick-performance-tips","title":"Quick Performance Tips","text":"<ol> <li>Use Unity Catalog functions for exact lookups (fastest)</li> <li>Implement caching for repeated queries</li> <li>Run tools in parallel when possible</li> <li>Keep prompts concise to reduce token usage</li> <li>Use appropriate model parameters (lower temperature for factual responses)</li> <li>Implement circuit breakers to prevent cascading failures</li> <li>Monitor and alert on performance degradation</li> </ol>"},{"location":"agents-and-tools/agents/agent-quickstart/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Development Patterns - Advanced implementation patterns and techniques</li> <li>Agent Performance - Detailed performance metrics, optimization, and monitoring</li> <li>Agent Best Practices - Comprehensive guidelines for development and deployment</li> <li>Agent Reference - Detailed specifications for all implemented agents</li> <li>Tools Reference - Complete technical specifications for all tools </li> </ul>"},{"location":"agents-and-tools/references/agent-reference/","title":"Agent Reference","text":"<p>This reference provides detailed information about all implemented retail AI agents, their capabilities, configurations, and usage examples.</p>"},{"location":"agents-and-tools/references/agent-reference/#product-agent","title":"Product Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>product_node()</code></p> <p>Specialization: Product discovery, details, and recommendations</p> <p>Capabilities: - Exact product lookup by SKU or UPC - Semantic product search using natural language - Product feature extraction and analysis - Cross-selling and upselling recommendations</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(\n        endpoint_name=endpoint_name,\n        index_name=index_name,\n        columns=columns,\n        k=num_results,\n    ),\n    create_find_product_by_sku_tool(warehouse_id=warehouse_id),\n    create_find_product_by_upc_tool(warehouse_id=warehouse_id),\n]\n</code></pre></p> <p>Example Usage: <pre><code>from retail_ai.nodes import product_node\n\n# Create agent\nproduct_agent = product_node(model_config)\n\n# Execute\nstate = AgentState(\n    messages=[HumanMessage(content=\"I'm looking for wireless headphones\")],\n    user_id=\"user123\",\n    store_num=\"101\"\n)\nresponse = product_agent.invoke(state, config)\n</code></pre></p> <p>Sample Interactions: <pre><code>User: \"Tell me about SKU STB-KCP-001\"\nAgent: \"That's our Stanley 20oz Tumbler in Charcoal. It features double-wall vacuum insulation, keeps drinks cold for 11 hours or hot for 7 hours. Currently priced at $39.95 with high popularity rating.\"\n\nUser: \"I need wireless headphones under $200\"\nAgent: \"I found several great options! The Sony WH-CH720N offers excellent noise cancellation for $149.99, while the JBL Tune 760NC provides 35-hour battery life for $179.99.\"\n</code></pre></p>"},{"location":"agents-and-tools/references/agent-reference/#inventory-agent","title":"Inventory Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>inventory_node()</code></p> <p>Specialization: Stock levels, availability, and inventory management</p> <p>Capabilities: - Real-time inventory checking across stores and warehouses - Stock level monitoring and alerts - Product availability by location - Inventory movement tracking</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(...),\n    create_find_inventory_by_sku_tool(warehouse_id=warehouse_id),\n    create_find_inventory_by_upc_tool(warehouse_id=warehouse_id),\n    create_find_store_inventory_by_sku_tool(warehouse_id=warehouse_id),\n    create_find_store_inventory_by_upc_tool(warehouse_id=warehouse_id),\n]\n</code></pre></p> <p>Sample Interactions: <pre><code>User: \"Do you have the Nintendo Switch OLED in stock at store 101?\"\nAgent: \"Yes! Store 101 has 3 Nintendo Switch OLED units in stock. They're located in Electronics, aisle E-12. We also have 15 units available in our warehouse.\"\n\nUser: \"Which stores have the Milwaukee M18 drill in stock?\"\nAgent: \"The Milwaukee M18 drill is available at: Store 101 (5 units), Store 105 (2 units), and Store 110 (8 units). Store 103 is currently out of stock but expecting delivery tomorrow.\"\n</code></pre></p>"},{"location":"agents-and-tools/references/agent-reference/#comparison-agent","title":"Comparison Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>comparison_node()</code></p> <p>Specialization: Product comparisons and recommendation analysis</p> <p>Capabilities: - Side-by-side product comparisons - Feature analysis and scoring - Pros and cons evaluation - Personalized recommendations based on user needs</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(...),\n    create_find_product_by_sku_tool(warehouse_id=warehouse_id),\n    create_find_product_by_upc_tool(warehouse_id=warehouse_id),\n]\n</code></pre></p> <p>Sample Interactions: <pre><code>User: \"Compare the DeWalt and Milwaukee cordless drills\"\nAgent: \"Great question! Here's a detailed comparison:\n\n**DeWalt 20V MAX (DCD771C2)**\nPros: Lighter weight (3.6 lbs), longer warranty (3 years), $20 less expensive\nCons: Lower torque (300 in-lbs), shorter battery life\n\n**Milwaukee M18 (2804-20)**  \nPros: Higher torque (725 in-lbs), better battery technology, more durable\nCons: Heavier (4.2 lbs), higher price point\n\n**Recommendation:** For heavy-duty work, choose Milwaukee. For general home use, DeWalt offers better value.\"\n</code></pre></p>"},{"location":"agents-and-tools/references/agent-reference/#diy-agent","title":"DIY Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>diy_node()</code></p> <p>Specialization: Project guidance, tutorials, and general assistance</p> <p>Capabilities: - Web search for external information - General product discovery - Open-ended customer assistance - Fallback for queries outside other agent specializations</p> <p>Tools Configuration: <pre><code>tools = [\n    search_tool(model_config),\n    find_product_details_by_description_tool(...),\n]\n</code></pre></p> <p>Sample Interactions: <pre><code>User: \"How do I install crown molding in my living room?\"\nAgent: \"Here's a step-by-step guide for crown molding installation:\n\n**Tools Needed:** Miter saw, nail gun, measuring tape, stud finder, caulk gun\n**Materials:** Crown molding, finishing nails, wood filler, caulk\n\n**Steps:**\n1. Measure room perimeter and add 10% for waste\n2. Cut inside corners at 45\u00b0 angles using miter saw\n3. Locate wall studs and mark positions\n4. Install molding starting with longest wall\n5. Use nail gun to secure into studs every 16 inches\n\nWould you like product recommendations for any of these tools?\"\n</code></pre></p>"},{"location":"agents-and-tools/references/agent-reference/#general-agent","title":"General Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>general_node()</code></p> <p>Specialization: Store policies, hours, and general customer service</p> <p>Capabilities: - Store information and policies - General customer service inquiries - Fallback for unrouted queries - Policy and procedure guidance</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(...),\n]\n</code></pre></p> <p>Sample Interactions: <pre><code>User: \"What are your store hours and return policy?\"\nAgent: \"Our store hours are Monday-Saturday 6AM-10PM, Sunday 8AM-8PM. \n\n**Return Policy:**\n- 90 days for most items with receipt\n- 365 days for major appliances\n- Original packaging preferred but not required\n- Special orders may have different terms\n\nIs there a specific item you're looking to return or exchange?\"\n</code></pre></p>"},{"location":"agents-and-tools/references/agent-reference/#recommendation-agent","title":"Recommendation Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>recommendation_node()</code></p> <p>Specialization: Product recommendations and suggestions</p> <p>Capabilities: - Personalized product recommendations - Cross-selling and upselling - Product discovery based on preferences - Recommendation explanations</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(...),\n]\n</code></pre></p>"},{"location":"agents-and-tools/references/agent-reference/#agent-orchestration","title":"Agent Orchestration","text":""},{"location":"agents-and-tools/references/agent-reference/#router-agent","title":"Router Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>router_node()</code></p> <p>The router agent intelligently directs user queries to the most appropriate specialized agent based on query analysis.</p> <p>Routing Logic: <pre><code># From model_config.yaml\nallowed_routes:\n  - product      # Product details, features, specifications\n  - comparison   # Comparing multiple products\n  - recommendation # Product suggestions and recommendations\n  - inventory    # Stock levels and availability\n  - diy         # How-to instructions and tutorials\n  - orders      # Order tracking and delivery\n  - general     # Store policies and general inquiries\n</code></pre></p> <p>Example Routing: <pre><code>def route_to_agent(query: str) -&gt; str:\n    query_lower = query.lower()\n\n    if any(keyword in query_lower for keyword in [\"product\", \"find\", \"search\"]):\n        return \"product\"\n    elif any(keyword in query_lower for keyword in [\"stock\", \"inventory\", \"available\"]):\n        return \"inventory\"\n    elif any(keyword in query_lower for keyword in [\"compare\", \"vs\", \"versus\"]):\n        return \"comparison\"\n    # ... additional routing logic\n</code></pre></p>"},{"location":"agents-and-tools/references/agent-reference/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Development Patterns - Common patterns for building agents</li> <li>Agent Performance - Performance metrics and optimization</li> <li>Best Practices - Guidelines for agent development</li> <li>Tools Reference - Detailed tool specifications </li> </ul>"},{"location":"agents-and-tools/references/tools-reference/","title":"Tools Reference Guide","text":"<p>This guide provides detailed technical information about all available tools in the Retail AI system, including input/output specifications, implementation details, and usage examples.</p>"},{"location":"agents-and-tools/references/tools-reference/#tools-by-category","title":"Tools by Category","text":""},{"location":"agents-and-tools/references/tools-reference/#product-discovery-lookup","title":"Product Discovery &amp; Lookup","text":""},{"location":"agents-and-tools/references/tools-reference/#find_product_by_sku","title":"<code>find_product_by_sku</code>","text":"<p>Type: Unity Catalog Function Purpose: Exact product lookup by SKU identifier</p> <p>Input: <pre><code>{\n    \"sku\": [\"STB-KCP-001\", \"DUN-KCP-001\"]  # Array of SKU strings\n}\n</code></pre></p> <p>Output: <pre><code>[\n    {\n        \"product_id\": 12345,\n        \"sku\": \"STB-KCP-001\",\n        \"upc\": \"012345678901\",\n        \"brand_name\": \"Stanley\",\n        \"product_name\": \"Stanley 20oz Tumbler\",\n        \"short_description\": \"Insulated tumbler with lid\",\n        \"long_description\": \"Double-wall vacuum insulated tumbler...\",\n        \"merchandise_class\": \"Kitchen &amp; Dining\",\n        \"class_cd\": \"KD001\",\n        \"department_name\": \"Home\",\n        \"category_name\": \"Drinkware\",\n        \"subcategory_name\": \"Tumblers\",\n        \"base_price\": 39.95,\n        \"msrp\": 44.99\n    }\n]\n</code></pre></p> <p>Implementation: <pre><code># Direct Unity Catalog execution\nresult = client.execute_function(\n    function_name=\"catalog.database.find_product_by_sku\",\n    parameters={\"sku\": [\"STB-KCP-001\"]}\n)\n\n# LangChain tool wrapper\ntool = create_find_product_by_sku_tool(warehouse_id)\nresult = tool.invoke({\"sku\": [\"STB-KCP-001\"]})\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#find_product_by_upc","title":"<code>find_product_by_upc</code>","text":"<p>Type: Unity Catalog Function Purpose: Exact product lookup by UPC barcode</p> <p>Input: <pre><code>{\n    \"upc\": [\"012345678901\", \"123456789012\"]  # Array of UPC strings\n}\n</code></pre></p> <p>Output: Same structure as <code>find_product_by_sku</code></p>"},{"location":"agents-and-tools/references/tools-reference/#find_product_details_by_description","title":"<code>find_product_details_by_description</code>","text":"<p>Type: Vector Search Tool Purpose: Semantic product search using natural language</p> <p>Input: <pre><code>\"wireless bluetooth headphones with noise cancellation\"\n</code></pre></p> <p>Output: <pre><code>[\n    {\n        \"page_content\": \"Sony WH-CH720N Wireless Noise Canceling Headphones\",\n        \"metadata\": {\n            \"product_id\": \"67890\",\n            \"sku\": \"SONY-WH720N\",\n            \"brand_name\": \"Sony\",\n            \"price\": 149.99,\n            \"category\": \"Electronics\",\n            \"score\": 0.89  # Similarity score\n        }\n    },\n    {\n        \"page_content\": \"JBL Tune 760NC Wireless Over-Ear Headphones\",\n        \"metadata\": {\n            \"product_id\": \"67891\",\n            \"sku\": \"JBL-760NC\",\n            \"brand_name\": \"JBL\",\n            \"price\": 179.99,\n            \"category\": \"Electronics\", \n            \"score\": 0.85\n        }\n    }\n]\n</code></pre></p> <p>Implementation: <pre><code>vector_tool = find_product_details_by_description_tool(\n    endpoint_name=\"vs_endpoint\",\n    index_name=\"products_index\",\n    columns=[\"product_name\", \"description\", \"category\", \"price\"],\n    k=10\n)\nresults = vector_tool.invoke(\"wireless bluetooth headphones\")\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#inventory-management","title":"Inventory Management","text":""},{"location":"agents-and-tools/references/tools-reference/#find_inventory_by_sku","title":"<code>find_inventory_by_sku</code>","text":"<p>Type: Unity Catalog Function Purpose: Global inventory lookup across all stores</p> <p>Input: <pre><code>{\n    \"sku\": [\"STB-KCP-001\"]\n}\n</code></pre></p> <p>Output: <pre><code>[\n    {\n        \"inventory_id\": 98765,\n        \"sku\": \"STB-KCP-001\",\n        \"upc\": \"012345678901\",\n        \"product_id\": 12345,\n        \"store_id\": 101,\n        \"store_quantity\": 15,\n        \"warehouse\": \"WH-CENTRAL\",\n        \"warehouse_quantity\": 250,\n        \"retail_amount\": 39.95,\n        \"popularity_rating\": \"High\",\n        \"department\": \"Home\",\n        \"aisle_location\": \"H-12\",\n        \"is_closeout\": false\n    },\n    {\n        \"inventory_id\": 98766,\n        \"sku\": \"STB-KCP-001\", \n        \"upc\": \"012345678901\",\n        \"product_id\": 12345,\n        \"store_id\": 105,\n        \"store_quantity\": 8,\n        \"warehouse\": \"WH-CENTRAL\",\n        \"warehouse_quantity\": 250,\n        \"retail_amount\": 39.95,\n        \"popularity_rating\": \"High\",\n        \"department\": \"Home\",\n        \"aisle_location\": \"H-15\",\n        \"is_closeout\": false\n    }\n]\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#find_store_inventory_by_sku","title":"<code>find_store_inventory_by_sku</code>","text":"<p>Type: Unity Catalog Function Purpose: Store-specific inventory lookup</p> <p>Input: <pre><code>{\n    \"store_id\": 101,\n    \"sku\": [\"STB-KCP-001\", \"DUN-KCP-001\"]\n}\n</code></pre></p> <p>Output: Same structure as <code>find_inventory_by_sku</code> but filtered to specified store</p>"},{"location":"agents-and-tools/references/tools-reference/#product-analysis-comparison","title":"Product Analysis &amp; Comparison","text":""},{"location":"agents-and-tools/references/tools-reference/#product_comparison","title":"<code>product_comparison</code>","text":"<p>Type: LangChain Tool Purpose: AI-powered product comparison and analysis</p> <p>Input: <pre><code>[\n    {\n        \"product_id\": \"A\",\n        \"product_name\": \"DeWalt 20V MAX Drill\",\n        \"price\": 129.99,\n        \"torque\": \"300 in-lbs\",\n        \"weight\": \"3.6 lbs\",\n        \"battery_life\": \"2 hours\",\n        \"warranty\": \"3 years\"\n    },\n    {\n        \"product_id\": \"B\", \n        \"product_name\": \"Milwaukee M18 Drill\",\n        \"price\": 149.99,\n        \"torque\": \"725 in-lbs\",\n        \"weight\": \"4.2 lbs\", \n        \"battery_life\": \"1.5 hours\",\n        \"warranty\": \"5 years\"\n    }\n]\n</code></pre></p> <p>Output: <pre><code>{\n    \"products\": [\n        {\n            \"product_id\": \"A\",\n            \"product_name\": \"DeWalt 20V MAX Drill\",\n            \"attributes\": [\n                {\n                    \"feature\": \"Weight\",\n                    \"value\": \"3.6 lbs\",\n                    \"rating\": 8,\n                    \"pros\": [\"Lightweight\", \"Easy to handle\"],\n                    \"cons\": [\"Less robust feel\"]\n                }\n            ],\n            \"overall_rating\": 7,\n            \"price_value_ratio\": 8,\n            \"summary\": \"Great for home use and light projects\"\n        }\n    ],\n    \"key_features\": [\n        {\n            \"name\": \"Torque\",\n            \"description\": \"Drilling and driving power\",\n            \"importance\": 9\n        }\n    ],\n    \"winner\": \"B\",\n    \"best_value\": \"A\",\n    \"comparison_summary\": \"Milwaukee offers superior torque for heavy-duty tasks, while DeWalt provides better value for home users.\",\n    \"recommendations\": [\n        \"Choose Milwaukee for professional use\",\n        \"Choose DeWalt for home projects and budget-conscious buyers\"\n    ]\n}\n</code></pre></p> <p>Implementation: <pre><code>comparison_tool = create_product_comparison_tool(llm)\nresult = comparison_tool.invoke([product1, product2])\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#sku_extraction","title":"<code>sku_extraction</code>","text":"<p>Type: LangChain Tool Purpose: Extract SKU identifiers from natural language text</p> <p>Input: <pre><code>\"I'm looking for information about SKU ABC123 and also need details on product DUN-KCP-001\"\n</code></pre></p> <p>Output: <pre><code>[\"ABC123\", \"DUN-KCP-001\"]\n</code></pre></p> <p>Implementation: <pre><code>sku_tool = create_sku_extraction_tool(llm)\nskus = sku_tool.invoke(\"I need info about SKU ABC123\")\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#product_classification","title":"<code>product_classification</code>","text":"<p>Type: LangChain Tool Purpose: Classify products into predefined categories</p> <p>Input: <pre><code>\"wireless bluetooth headphones with noise cancellation\"\n</code></pre></p> <p>Output: <pre><code>[\"Electronics\"]\n</code></pre></p> <p>Configuration: <pre><code>categories = [\"Electronics\", \"Clothing\", \"Home &amp; Garden\", \"Sports\", \"Books\"]\nclassification_tool = create_product_classification_tool(\n    llm=llm,\n    allowable_classifications=categories,\n    k=1\n)\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#data-access-queries","title":"Data Access &amp; Queries","text":""},{"location":"agents-and-tools/references/tools-reference/#genie_tool","title":"<code>genie_tool</code>","text":"<p>Type: Databricks Genie Purpose: Natural language to SQL query translation</p> <p>Input: <pre><code>\"What are the top 5 selling products this month?\"\n</code></pre></p> <p>Output: <pre><code>{\n    \"content\": \"Here are the top 5 selling products this month:\\n1. Stanley Tumbler - 1,250 units\\n2. Milwaukee Drill - 890 units...\",\n    \"sql_query\": \"SELECT product_name, SUM(quantity_sold) as total_sold FROM sales WHERE month = CURRENT_MONTH() GROUP BY product_name ORDER BY total_sold DESC LIMIT 5\",\n    \"data\": [\n        {\"product_name\": \"Stanley Tumbler\", \"total_sold\": 1250},\n        {\"product_name\": \"Milwaukee Drill\", \"total_sold\": 890}\n    ]\n}\n</code></pre></p> <p>Implementation: <pre><code>genie = create_genie_tool(space_id=\"workspace_id\")\nresponse = genie.invoke(\"What are the top selling products?\")\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#search_tool","title":"<code>search_tool</code>","text":"<p>Type: External API (DuckDuckGo) Purpose: Web search for external information</p> <p>Input: <pre><code>\"latest smartphone reviews 2024\"\n</code></pre></p> <p>Output: <pre><code>[\n    \"iPhone 15 Pro review: The best iPhone yet with titanium design...\",\n    \"Samsung Galaxy S24 Ultra review: S Pen and AI features shine...\",\n    \"Google Pixel 8 Pro review: Camera excellence continues...\"\n]\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#tool-implementation-patterns","title":"Tool Implementation Patterns","text":""},{"location":"agents-and-tools/references/tools-reference/#unity-catalog-functions","title":"Unity Catalog Functions","text":"<p>Characteristics: - Fastest execution (direct SQL) - Exact match queries - Structured tabular output - Built-in governance</p> <p>When to Use: - Known SKUs or UPCs - Real-time inventory checks - High-volume queries - Exact data lookups</p> <p>Implementation Pattern: <pre><code>def create_uc_function_tool(warehouse_id: str, function_name: str):\n    @tool\n    def uc_function_tool(params: dict) -&gt; tuple:\n        w = WorkspaceClient()\n\n        # Build SQL statement\n        param_str = format_parameters(params)\n        statement = f\"SELECT * FROM {function_name}({param_str})\"\n\n        # Execute\n        response = w.statement_execution.execute_statement(\n            statement=statement, \n            warehouse_id=warehouse_id\n        )\n\n        # Wait for completion\n        while response.status.state in [StatementState.PENDING, StatementState.RUNNING]:\n            response = w.statement_execution.get_statement(response.statement_id)\n\n        return response.result.data_array\n\n    return uc_function_tool\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#vector-search-tools","title":"Vector Search Tools","text":"<p>Characteristics: - Semantic similarity matching - Scalable to large datasets - Relevance-based ranking - MLflow integration</p> <p>When to Use: - Natural language queries - \"Find similar\" requests - Content discovery - Recommendation systems</p> <p>Implementation Pattern: <pre><code>def create_vector_search_tool(\n    endpoint_name: str,\n    index_name: str,\n    columns: Sequence[str],\n    k: int = 10\n):\n    @tool\n    @mlflow.trace(span_type=\"RETRIEVER\", name=\"vector_search\")\n    def vector_search(query: str) -&gt; Sequence[Document]:\n        vector_store = DatabricksVectorSearch(\n            endpoint=endpoint_name,\n            index_name=index_name,\n            columns=columns\n        )\n\n        documents = vector_store.similarity_search(\n            query=query, \n            k=k, \n            filter={}\n        )\n\n        return documents\n\n    return vector_search\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#langchain-tools","title":"LangChain Tools","text":"<p>Characteristics: - Natural language understanding - Flexible input/output - Structured output (Pydantic) - Creative and analytical</p> <p>When to Use: - Complex analysis tasks - Text processing - Classification - Comparison and reasoning</p> <p>Implementation Pattern: <pre><code>def create_langchain_tool(llm: LanguageModelLike):\n    class OutputModel(BaseModel):\n        result: str = Field(description=\"Tool output\")\n\n    @tool\n    def langchain_tool(input: str) -&gt; str:\n        llm_with_structure = llm.with_structured_output(OutputModel)\n        result = llm_with_structure.invoke(input)\n        return result.result\n\n    return langchain_tool\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#performance-comparison","title":"Performance Comparison","text":"Tool Type Avg Latency Throughput Accuracy Use Case Unity Catalog 200ms 1000 req/s 99% Exact lookups Vector Search 300ms 500 req/s 95% Semantic search LangChain 1.5s 100 req/s 92% Analysis tasks External APIs 2s 50 req/s 88% Real-time data"},{"location":"agents-and-tools/references/tools-reference/#tool-selection-guide","title":"Tool Selection Guide","text":""},{"location":"agents-and-tools/references/tools-reference/#decision-matrix","title":"Decision Matrix","text":"Query Type Primary Tool Fallback Tool Example Exact SKU Unity Catalog Vector Search \"Tell me about SKU ABC123\" Product Description Vector Search LangChain \"wireless headphones\" Comparison LangChain Vector Search \"compare iPhone vs Samsung\" How-to Questions External Search Vector Search \"how to install crown molding\" Inventory Check Unity Catalog - \"stock levels for store 101\""},{"location":"agents-and-tools/references/tools-reference/#performance-optimization","title":"Performance Optimization","text":"<pre><code>def optimized_tool_selection(query: str, context: dict):\n    # Extract SKUs first (fastest path)\n    skus = extract_skus(query)\n    if skus:\n        return unity_catalog_lookup(skus)\n\n    # Check for comparison keywords\n    if is_comparison_query(query):\n        products = vector_search(query)\n        return langchain_comparison(products)\n\n    # Default to semantic search\n    return vector_search(query)\n</code></pre>"},{"location":"agents-and-tools/references/tools-reference/#advanced-usage-patterns","title":"Advanced Usage Patterns","text":""},{"location":"agents-and-tools/references/tools-reference/#tool-chaining","title":"Tool Chaining","text":"<pre><code>def product_discovery_chain(user_query: str):\n    # Step 1: Extract any mentioned SKUs\n    skus = sku_extraction_tool(user_query)\n\n    if skus:\n        # Step 2a: Direct lookup for known SKUs\n        products = find_product_by_sku_tool(skus)\n    else:\n        # Step 2b: Semantic search for descriptions\n        products = vector_search_tool(user_query)\n\n    # Step 3: Check inventory for found products\n    inventory = find_inventory_by_sku_tool([p['sku'] for p in products])\n\n    return combine_product_and_inventory(products, inventory)\n</code></pre>"},{"location":"agents-and-tools/references/tools-reference/#parallel-execution","title":"Parallel Execution","text":"<pre><code>import asyncio\n\nasync def parallel_search(query: str):\n    tasks = [\n        vector_search_tool.ainvoke(query),\n        web_search_tool.ainvoke(query),\n        classification_tool.ainvoke(query)\n    ]\n\n    results = await asyncio.gather(*tasks)\n    return combine_results(results)\n</code></pre>"},{"location":"agents-and-tools/references/tools-reference/#caching-strategy","title":"Caching Strategy","text":"<pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=1000)\ndef cached_product_lookup(sku: str):\n    return find_product_by_sku_tool([sku])\n\ndef smart_product_lookup(sku: str):\n    # Try cache first\n    try:\n        return cached_product_lookup(sku)\n    except Exception:\n        # Fallback to direct lookup\n        return find_product_by_sku_tool([sku])\n</code></pre>"},{"location":"agents-and-tools/references/tools-reference/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents-and-tools/references/tools-reference/#common-issues","title":"Common Issues","text":"<p>Tool Not Found <pre><code># Check tool registration\navailable_tools = [tool.name for tool in agent.tools]\nprint(f\"Available: {available_tools}\")\n</code></pre></p> <p>Performance Issues <pre><code># Enable detailed logging\nimport logging\nlogging.getLogger(\"retail_ai.tools\").setLevel(logging.DEBUG)\n\n# Profile tool execution\nimport time\nstart = time.time()\nresult = tool.invoke(input)\nprint(f\"Execution time: {time.time() - start:.2f}s\")\n</code></pre></p> <p>Authentication Errors <pre><code># Test Databricks connection\nfrom databricks.sdk import WorkspaceClient\ntry:\n    w = WorkspaceClient()\n    print(f\"Connected as: {w.current_user.me().user_name}\")\nexcept Exception as e:\n    print(f\"Connection failed: {e}\")\n</code></pre></p>"},{"location":"agents-and-tools/references/tools-reference/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Overview - How agents use these tools</li> <li>AI Agents Implementation - Advanced agent patterns with tools</li> <li>Development Guide - Building custom tools </li> </ul>"},{"location":"applications/streamlit-app/","title":"Store Companion - Streamlit Application","text":"<p>The Store Companion is a Streamlit-based retail store management application with AI assistance, providing a comprehensive interface for store operations.</p>"},{"location":"applications/streamlit-app/#features","title":"\ud83c\udf1f Features","text":"<ul> <li>Multi-store Management: Manage multiple retail locations from a single interface</li> <li>Role-based Access Control: Different views for Store Associates and Managers</li> <li>Real-time Inventory Tracking: Live inventory updates and stock monitoring</li> <li>Order Management: Complete order lifecycle management</li> <li>Staff Management: Employee scheduling and management tools</li> <li>AI-powered Chat: Integrated AI assistant for store operations</li> </ul>"},{"location":"applications/streamlit-app/#application-structure","title":"\ud83c\udfd7\ufe0f Application Structure","text":"<pre><code>streamlit_store_app/\n\u251c\u2500\u2500 app.py                 # Main application entry point\n\u251c\u2500\u2500 config.yaml           # Centralized configuration\n\u251c\u2500\u2500 components/          # Reusable UI components\n\u2502   \u251c\u2500\u2500 chat.py         # AI chat widget\n\u2502   \u251c\u2500\u2500 metrics.py      # Store metrics display\n\u2502   \u251c\u2500\u2500 navigation.py   # Navigation components\n\u2502   \u2514\u2500\u2500 styles.py       # UI styling utilities\n\u251c\u2500\u2500 pages/              # Application pages\n\u2502   \u251c\u2500\u2500 1_\ud83d\udce6_Orders.py\n\u2502   \u251c\u2500\u2500 2_\ud83d\udcca_Inventory.py\n\u2502   \u2514\u2500\u2500 3_\ud83d\udc65_Staff.py\n\u251c\u2500\u2500 utils/              # Utility functions\n\u2502   \u251c\u2500\u2500 config.py       # Configuration management\n\u2502   \u251c\u2500\u2500 database.py     # Database operations\n\u2502   \u2514\u2500\u2500 model_serving.py # AI model integration\n\u2514\u2500\u2500 tests/              # Test suite\n</code></pre>"},{"location":"applications/streamlit-app/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"applications/streamlit-app/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>Access to the Retail AI model endpoint</li> <li>Databricks workspace credentials</li> </ul>"},{"location":"applications/streamlit-app/#installation","title":"Installation","text":"<ol> <li> <p>Navigate to the Streamlit app directory <pre><code>cd streamlit_store_app\n</code></pre></p> </li> <li> <p>Create a virtual environment <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Set up environment variables <pre><code>cp .env.example .env\n# Edit .env with your configuration\n</code></pre></p> </li> <li> <p>Run the application <pre><code>streamlit run app.py\n</code></pre></p> </li> </ol> <p>The application will be available at <code>http://localhost:8501</code>.</p>"},{"location":"applications/streamlit-app/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>All configuration is centralized in <code>config.yaml</code>:</p>"},{"location":"applications/streamlit-app/#application-settings","title":"Application Settings","text":"<pre><code>app:\n  title: \"Store Companion\"\n  page_title: \"Retail Store Management\"\n  page_icon: \"\ud83c\udfea\"\n  layout: \"wide\"\n</code></pre>"},{"location":"applications/streamlit-app/#store-information","title":"Store Information","text":"<pre><code>stores:\n  - id: \"store_001\"\n    name: \"Downtown Location\"\n    address: \"123 Main St, City, State\"\n    manager: \"John Smith\"\n  - id: \"store_002\"\n    name: \"Mall Location\"\n    address: \"456 Mall Blvd, City, State\"\n    manager: \"Jane Doe\"\n</code></pre>"},{"location":"applications/streamlit-app/#user-roles","title":"User Roles","text":"<pre><code>roles:\n  store_associate:\n    permissions:\n      - view_inventory\n      - process_orders\n      - chat_assistance\n  store_manager:\n    permissions:\n      - view_inventory\n      - process_orders\n      - manage_staff\n      - view_analytics\n      - chat_assistance\n</code></pre>"},{"location":"applications/streamlit-app/#chat-interface","title":"Chat Interface","text":"<pre><code>chat:\n  model_endpoint: \"retail_ai_agent\"\n  max_messages: 50\n  welcome_message: \"Hello! I'm your AI store assistant. How can I help you today?\"\n</code></pre>"},{"location":"applications/streamlit-app/#model-serving","title":"Model Serving","text":"<pre><code>model_serving:\n  endpoint_url: \"https://your-databricks-workspace.cloud.databricks.com\"\n  token: \"${DATABRICKS_TOKEN}\"\n  model_name: \"retail_ai_agent\"\n</code></pre>"},{"location":"applications/streamlit-app/#database-settings","title":"Database Settings","text":"<pre><code>database:\n  connection_string: \"${DATABASE_URL}\"\n  pool_size: 10\n  timeout: 30\n</code></pre>"},{"location":"applications/streamlit-app/#application-pages","title":"\ud83d\udcf1 Application Pages","text":""},{"location":"applications/streamlit-app/#main-dashboard-apppy","title":"Main Dashboard (<code>app.py</code>)","text":"<p>The main dashboard provides:</p> <ul> <li>Store Selection: Choose which store location to manage</li> <li>Role Selection: Switch between Store Associate and Manager views</li> <li>Key Metrics: Overview of store performance</li> <li>Quick Actions: Common tasks and shortcuts</li> <li>AI Chat: Integrated assistant for immediate help</li> </ul>"},{"location":"applications/streamlit-app/#orders-page-1__orderspy","title":"Orders Page (<code>1_\ud83d\udce6_Orders.py</code>)","text":"<p>Order management features:</p> <ul> <li>Order List: View all orders with filtering and sorting</li> <li>Order Details: Detailed view of individual orders</li> <li>Status Updates: Update order status and tracking</li> <li>Customer Information: Access customer details and history</li> <li>Fulfillment: Manage picking, packing, and shipping</li> </ul>"},{"location":"applications/streamlit-app/#inventory-page-2__inventorypy","title":"Inventory Page (<code>2_\ud83d\udcca_Inventory.py</code>)","text":"<p>Inventory management tools:</p> <ul> <li>Stock Levels: Real-time inventory across all locations</li> <li>Low Stock Alerts: Automated alerts for items needing restock</li> <li>Product Search: Find products by SKU, name, or category</li> <li>Inventory Adjustments: Record stock adjustments and transfers</li> <li>Reporting: Generate inventory reports and analytics</li> </ul>"},{"location":"applications/streamlit-app/#staff-page-3__staffpy","title":"Staff Page (<code>3_\ud83d\udc65_Staff.py</code>)","text":"<p>Staff management capabilities:</p> <ul> <li>Employee Directory: View all staff members and their roles</li> <li>Scheduling: Create and manage work schedules</li> <li>Performance Metrics: Track employee performance</li> <li>Training Records: Manage training and certifications</li> <li>Communication: Internal messaging and announcements</li> </ul>"},{"location":"applications/streamlit-app/#ai-chat-integration","title":"\ud83e\udd16 AI Chat Integration","text":"<p>The integrated AI chat provides:</p>"},{"location":"applications/streamlit-app/#capabilities","title":"Capabilities","text":"<ul> <li>Product Information: Get details about products and inventory</li> <li>Order Assistance: Help with order processing and customer inquiries</li> <li>Policy Questions: Answer questions about store policies and procedures</li> <li>Troubleshooting: Assist with common issues and problems</li> <li>Analytics: Provide insights and recommendations</li> </ul>"},{"location":"applications/streamlit-app/#usage-examples","title":"Usage Examples","text":"<pre><code># Example chat interactions\n\"What's the current stock level for SKU ABC123?\"\n\"How do I process a return for order #12345?\"\n\"What's our policy on price matching?\"\n\"Show me sales trends for the last month\"\n</code></pre>"},{"location":"applications/streamlit-app/#implementation","title":"Implementation","text":"<p>The chat component (<code>components/chat.py</code>) integrates with the Retail AI model:</p> <pre><code>import streamlit as st\nfrom utils.model_serving import get_model_response\n\ndef chat_interface():\n    if \"messages\" not in st.session_state:\n        st.session_state.messages = []\n\n    # Display chat messages\n    for message in st.session_state.messages:\n        with st.chat_message(message[\"role\"]):\n            st.markdown(message[\"content\"])\n\n    # Chat input\n    if prompt := st.chat_input(\"Ask me anything about store operations...\"):\n        # Add user message\n        st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n\n        # Get AI response\n        response = get_model_response(prompt, st.session_state.messages)\n        st.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\n\n        st.rerun()\n</code></pre>"},{"location":"applications/streamlit-app/#ui-components","title":"\ud83c\udfa8 UI Components","text":""},{"location":"applications/streamlit-app/#reusable-components","title":"Reusable Components","text":"<p>The <code>components/</code> directory contains reusable UI elements:</p>"},{"location":"applications/streamlit-app/#metrics-display-metricspy","title":"Metrics Display (<code>metrics.py</code>)","text":"<pre><code>def display_store_metrics(store_id):\n    col1, col2, col3, col4 = st.columns(4)\n\n    with col1:\n        st.metric(\"Daily Sales\", \"$12,345\", \"5.2%\")\n    with col2:\n        st.metric(\"Orders\", \"89\", \"12\")\n    with col3:\n        st.metric(\"Inventory Items\", \"1,234\", \"-23\")\n    with col4:\n        st.metric(\"Staff On Duty\", \"8\", \"2\")\n</code></pre>"},{"location":"applications/streamlit-app/#navigation-navigationpy","title":"Navigation (<code>navigation.py</code>)","text":"<pre><code>def sidebar_navigation():\n    with st.sidebar:\n        st.title(\"Store Companion\")\n\n        # Store selection\n        store = st.selectbox(\"Select Store\", get_stores())\n\n        # Role selection\n        role = st.selectbox(\"Role\", [\"Store Associate\", \"Store Manager\"])\n\n        # Navigation menu\n        page = st.radio(\"Navigate\", [\"Dashboard\", \"Orders\", \"Inventory\", \"Staff\"])\n\n        return store, role, page\n</code></pre>"},{"location":"applications/streamlit-app/#styling-stylespy","title":"Styling (<code>styles.py</code>)","text":"<pre><code>def apply_custom_styles():\n    st.markdown(\"\"\"\n    &lt;style&gt;\n    .main-header {\n        font-size: 2rem;\n        font-weight: bold;\n        color: #1f77b4;\n        margin-bottom: 1rem;\n    }\n\n    .metric-card {\n        background-color: #f0f2f6;\n        padding: 1rem;\n        border-radius: 0.5rem;\n        border-left: 4px solid #1f77b4;\n    }\n    &lt;/style&gt;\n    \"\"\", unsafe_allow_html=True)\n</code></pre>"},{"location":"applications/streamlit-app/#development","title":"\ud83e\uddea Development","text":""},{"location":"applications/streamlit-app/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Install development dependencies <pre><code>pip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Run tests <pre><code>pytest tests/\n</code></pre></p> </li> <li> <p>Format code <pre><code>black .\nisort .\n</code></pre></p> </li> <li> <p>Type checking <pre><code>mypy .\n</code></pre></p> </li> </ol>"},{"location":"applications/streamlit-app/#testing","title":"Testing","text":"<p>The test suite covers:</p> <ul> <li>Unit Tests: Individual component testing</li> <li>Integration Tests: End-to-end functionality</li> <li>UI Tests: Streamlit component testing</li> <li>API Tests: Model serving integration</li> </ul>"},{"location":"applications/streamlit-app/#code-quality","title":"Code Quality","text":"<ul> <li>Black: Code formatting</li> <li>isort: Import sorting</li> <li>mypy: Type checking</li> <li>pytest: Testing framework</li> <li>pre-commit: Git hooks for quality checks</li> </ul>"},{"location":"applications/streamlit-app/#deployment","title":"\ud83d\ude80 Deployment","text":""},{"location":"applications/streamlit-app/#docker-deployment","title":"Docker Deployment","text":"<p>The application can be deployed using Docker:</p> <pre><code>FROM python:3.9-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nEXPOSE 8501\n\nCMD [\"streamlit\", \"run\", \"app.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]\n</code></pre> <p>Build and run:</p> <pre><code>docker build -t store-companion .\ndocker run -p 8501:8501 store-companion\n</code></pre>"},{"location":"applications/streamlit-app/#cloud-deployment","title":"Cloud Deployment","text":"<p>Deploy to cloud platforms:</p> <ul> <li>Streamlit Cloud: Direct deployment from GitHub</li> <li>Heroku: Using the Heroku CLI</li> <li>AWS/Azure/GCP: Using container services</li> <li>Databricks: As a Databricks app</li> </ul>"},{"location":"applications/streamlit-app/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"applications/streamlit-app/#common-issues","title":"Common Issues","text":"<ol> <li>Model Connection Errors</li> <li>Check Databricks token and endpoint URL</li> <li>Verify model serving endpoint is running</li> <li> <p>Check network connectivity</p> </li> <li> <p>Configuration Issues</p> </li> <li>Validate <code>config.yaml</code> syntax</li> <li>Check environment variable values</li> <li> <p>Verify file permissions</p> </li> <li> <p>Performance Issues</p> </li> <li>Monitor memory usage</li> <li>Check database connection pool</li> <li>Optimize query performance</li> </ol>"},{"location":"applications/streamlit-app/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for troubleshooting:</p> <pre><code># In app.py\nif st.checkbox(\"Debug Mode\"):\n    st.write(\"Session State:\", st.session_state)\n    st.write(\"Configuration:\", st.session_state.config)\n</code></pre>"},{"location":"applications/streamlit-app/#license","title":"\ud83d\udcc4 License","text":"<p>This application is licensed under the MIT License - see the LICENSE file for details.</p> <p>The Store Companion provides a comprehensive, user-friendly interface for retail store management with integrated AI assistance, making store operations more efficient and effective. </p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>The Retail AI system is built as a sophisticated agent-based architecture that routes queries to specialized agents based on the nature of the request. This approach enables domain-specific handling while maintaining a unified interface.</p>"},{"location":"architecture/overview/#core-components","title":"\ud83c\udfd7\ufe0f Core Components","text":""},{"location":"architecture/overview/#message-routing-and-processing","title":"Message Routing and Processing","text":"<ul> <li>Message Validation: Validates incoming requests against required configuration parameters</li> <li>Router Agent: Analyzes user queries and routes them to the appropriate specialized agent</li> <li>Factuality Check: Ensures responses are factually accurate through iterative refinement</li> </ul>"},{"location":"architecture/overview/#specialized-agents","title":"Specialized Agents","text":"<p>The system includes seven specialized agents, each optimized for specific retail operations:</p> <ol> <li>General Agent: Handles general inquiries about store policies and basic information</li> <li>Product Agent: Provides detailed product specifications, availability, and compatibility</li> <li>Inventory Agent: Offers real-time inventory checks and stock availability across locations</li> <li>Recommendation Agent: Suggests products based on user preferences and purchase history</li> <li>Orders Agent: Manages order status inquiries, tracking, and order history</li> <li>Comparison Agent: Compares different products to help customers make informed decisions</li> <li>DIY Agent: Offers project advice, tutorials, and step-by-step instructions for DIY projects</li> </ol>"},{"location":"architecture/overview/#guardrails-and-quality-control","title":"Guardrails and Quality Control","text":"<ul> <li>Factuality Judge: Evaluates responses for factual accuracy and triggers refinement when needed</li> <li>Configuration Validation: Ensures all required parameters are provided before processing</li> <li>Retry Mechanism: Implements intelligent retry logic when responses don't meet quality thresholds</li> </ul>"},{"location":"architecture/overview/#technical-implementation","title":"\ud83d\udd27 Technical Implementation","text":"<p>The system is implemented using:</p> <ul> <li>LangGraph: For workflow orchestration and state management</li> <li>LangChain: For LLM interactions and chain composition</li> <li>MLflow: For model deployment and serving</li> <li>Databricks LLM APIs: As the foundation models for natural language processing</li> </ul>"},{"location":"architecture/overview/#architecture-flow","title":"Architecture Flow","text":"<p>The architecture follows a graph-based state machine pattern:</p> <ol> <li>User Input: Messages enter through validation</li> <li>Routing: Messages are routed by the router agent</li> <li>Processing: Specialized agents process domain-specific requests</li> <li>Quality Check: Responses undergo factuality checking</li> <li>Refinement: If needed, responses are refined until they meet quality thresholds</li> </ol> <pre><code>graph TD\n    A[User Input] --&gt; B[Message Validation]\n    B --&gt; C[Router Agent]\n    C --&gt; D[General Agent]\n    C --&gt; E[Product Agent]\n    C --&gt; F[Inventory Agent]\n    C --&gt; G[Recommendation Agent]\n    C --&gt; H[Orders Agent]\n    C --&gt; I[Comparison Agent]\n    C --&gt; J[DIY Agent]\n    D --&gt; K[Factuality Judge]\n    E --&gt; K\n    F --&gt; K\n    G --&gt; K\n    H --&gt; K\n    I --&gt; K\n    J --&gt; K\n    K --&gt; L{Quality Check}\n    L --&gt;|Pass| M[Response]\n    L --&gt;|Fail| N[Refinement]\n    N --&gt; K</code></pre>"},{"location":"architecture/overview/#project-structure","title":"\ud83d\uddc2\ufe0f Project Structure","text":"<pre><code>retail_ai/\n\u251c\u2500\u2500 agents.py          # Agent implementations\n\u251c\u2500\u2500 catalog.py         # Unity Catalog integration\n\u251c\u2500\u2500 graph.py           # LangGraph workflow definition\n\u251c\u2500\u2500 models.py          # MLflow model integration\n\u251c\u2500\u2500 nodes.py           # Agent node definitions\n\u251c\u2500\u2500 tools.py           # Tool definitions\n\u2514\u2500\u2500 vector_search.py   # Vector search utilities\n\nnotebooks/\n\u251c\u2500\u2500 05_agent_as_code_driver.py    # Model logging &amp; registration\n\u251c\u2500\u2500 06_evaluate_agent.py          # Model evaluation\n\u2514\u2500\u2500 07_deploy_agent.py            # Model deployment &amp; permissions\n\nstreamlit_store_app/   # Store management interface\n\u251c\u2500\u2500 app.py            # Main Streamlit application\n\u251c\u2500\u2500 components/       # Reusable UI components\n\u251c\u2500\u2500 pages/           # Application pages\n\u2514\u2500\u2500 utils/           # Utility functions\n</code></pre>"},{"location":"architecture/overview/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":"<p>The development workflow is organized into focused notebooks:</p> <ol> <li>Data Setup: <code>01_ingest-and-transform.py</code>, <code>02_provision-vector-search.py</code></li> <li>Model Development: <code>05_agent_as_code_driver.py</code> - Model development, logging, and registration</li> <li>Evaluation: <code>06_evaluate_agent.py</code> - Formal MLflow evaluation and performance metrics</li> <li>Deployment: <code>07_deploy_agent.py</code> - Model alias management, endpoint deployment, and permissions</li> </ol>"},{"location":"architecture/overview/#technology-stack","title":"\ud83d\udee0\ufe0f Technology Stack","text":""},{"location":"architecture/overview/#core-technologies","title":"Core Technologies","text":"<ul> <li>Python 3.12+: Primary development language</li> <li>LangGraph: Workflow orchestration and state management</li> <li>LangChain: LLM interactions and tool composition</li> <li>MLflow: Model lifecycle management and serving</li> <li>Pydantic: Data validation and serialization</li> </ul>"},{"location":"architecture/overview/#databricks-platform","title":"Databricks Platform","text":"<ul> <li>Unity Catalog: Data governance and function management</li> <li>Vector Search: Semantic search capabilities</li> <li>Model Serving: LLM endpoint hosting</li> <li>Genie: Natural language to SQL conversion</li> <li>SQL Warehouse: Query execution engine</li> </ul>"},{"location":"architecture/overview/#frontend-interface","title":"Frontend &amp; Interface","text":"<ul> <li>Streamlit: Store management interface</li> <li>REST APIs: Model serving endpoints</li> <li>WebSocket: Real-time chat functionality</li> </ul>"},{"location":"architecture/overview/#security-governance","title":"\ud83d\udd10 Security &amp; Governance","text":""},{"location":"architecture/overview/#data-security","title":"Data Security","text":"<ul> <li>Unity Catalog: Centralized data governance</li> <li>Row-level Security: Fine-grained access control</li> <li>Audit Logging: Complete activity tracking</li> <li>Encryption: Data at rest and in transit</li> </ul>"},{"location":"architecture/overview/#model-governance","title":"Model Governance","text":"<ul> <li>MLflow Model Registry: Version control and lineage</li> <li>Model Validation: Automated quality checks</li> <li>A/B Testing: Safe model deployment</li> <li>Performance Monitoring: Real-time metrics</li> </ul>"},{"location":"architecture/overview/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"architecture/overview/#application-monitoring","title":"Application Monitoring","text":"<ul> <li>MLflow Tracing: End-to-end request tracking</li> <li>Custom Metrics: Business-specific KPIs</li> <li>Error Tracking: Comprehensive error logging</li> <li>Performance Metrics: Latency and throughput monitoring</li> </ul>"},{"location":"architecture/overview/#data-quality","title":"Data Quality","text":"<ul> <li>Data Validation: Input/output schema validation</li> <li>Drift Detection: Model performance monitoring</li> <li>Quality Metrics: Accuracy and relevance scoring</li> <li>Alerting: Automated issue detection</li> </ul> <p>This architecture provides a robust, scalable foundation for retail AI operations while maintaining flexibility for future enhancements and integrations. </p>"},{"location":"deployment/production/","title":"Production Deployment","text":"<p>This guide covers deploying the Retail AI system to production environments.</p>"},{"location":"deployment/production/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before deploying to production, ensure you have:</p> <ul> <li>Python 3.12+: Required runtime environment</li> <li>Databricks Workspace: With appropriate permissions and resources</li> <li>Unity Catalog: Enabled and configured</li> <li>Model Endpoints: Access to required LLM and embedding endpoints</li> </ul>"},{"location":"deployment/production/#required-databricks-resources","title":"Required Databricks Resources","text":"<ul> <li>Unity Catalog: Data governance and function management</li> <li>Model Serving: For hosting LLM endpoints</li> <li>Vector Search: For semantic search capabilities</li> <li>Genie: Natural language to SQL conversion</li> <li>SQL Warehouse: For query execution</li> </ul>"},{"location":"deployment/production/#default-model-endpoints","title":"Default Model Endpoints","text":"<ul> <li>LLM Endpoint: <code>databricks-meta-llama-3-3-70b-instruct</code></li> <li>Embedding Model: <code>databricks-gte-large-en</code></li> </ul>"},{"location":"deployment/production/#deployment-process","title":"\ud83d\ude80 Deployment Process","text":""},{"location":"deployment/production/#step-1-environment-setup","title":"Step 1: Environment Setup","text":"<ol> <li> <p>Clone the Repository <pre><code>git clone https://github.com/your-org/retail-ai.git\ncd retail-ai\n</code></pre></p> </li> <li> <p>Create Virtual Environment <pre><code># Using uv (recommended)\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv sync\n</code></pre></p> </li> <li> <p>Configure Environment <pre><code># Copy configuration template\ncp model_config.yaml.template model_config.yaml\n\n# Update with your Databricks workspace details\n# See Configuration section below\n</code></pre></p> </li> </ol>"},{"location":"deployment/production/#step-2-data-setup","title":"Step 2: Data Setup","text":"<p>Run the data preparation notebooks in order:</p> <pre><code># 1. Ingest and transform data\npython 01_ingest-and-transform.py\n\n# 2. Provision vector search\npython 02_provision-vector-search.py\n\n# 3. Generate evaluation data (optional)\npython 03_generate_evaluation_data.py\n</code></pre>"},{"location":"deployment/production/#step-3-model-development-and-registration","title":"Step 3: Model Development and Registration","text":"<pre><code># Develop, log, and register the model\npython 05_agent_as_code_driver.py\n</code></pre> <p>This notebook will: - Build the agent graph - Log the model to MLflow - Register the model in the MLflow Model Registry</p>"},{"location":"deployment/production/#step-4-model-evaluation","title":"Step 4: Model Evaluation","text":"<pre><code># Run formal evaluation\npython 06_evaluate_agent.py\n</code></pre> <p>This provides: - Performance metrics - Quality assessments - Evaluation reports</p>"},{"location":"deployment/production/#step-5-production-deployment","title":"Step 5: Production Deployment","text":"<pre><code># Deploy to production\npython 07_deploy_agent.py\n</code></pre> <p>This notebook handles: - Model alias management (Champion) - Endpoint deployment - Permissions configuration</p>"},{"location":"deployment/production/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>Configuration is managed through <code>model_config.yaml</code>. Key sections include:</p>"},{"location":"deployment/production/#catalog-and-database","title":"Catalog and Database","text":"<pre><code>catalog_name: \"your_catalog\"\ndatabase_name: \"your_database\"\n</code></pre>"},{"location":"deployment/production/#model-endpoints","title":"Model Endpoints","text":"<pre><code>resources:\n  endpoints:\n    llm_endpoint: \"databricks-meta-llama-3-3-70b-instruct\"\n    embedding_endpoint: \"databricks-gte-large-en\"\n</code></pre>"},{"location":"deployment/production/#vector-search","title":"Vector Search","text":"<pre><code>vector_search:\n  endpoint_name: \"your_vector_search_endpoint\"\n  index_name: \"your_vector_index\"\n</code></pre>"},{"location":"deployment/production/#genie-configuration","title":"Genie Configuration","text":"<pre><code>genie:\n  space_id: \"your_genie_space_id\"\n</code></pre>"},{"location":"deployment/production/#application-settings","title":"Application Settings","text":"<pre><code>application:\n  name: \"retail_ai_agent\"\n  version: \"1.0.0\"\n  description: \"Retail AI conversational agent\"\n</code></pre>"},{"location":"deployment/production/#production-usage","title":"\ud83d\udd27 Production Usage","text":""},{"location":"deployment/production/#rest-api-endpoint","title":"REST API Endpoint","text":"<p>Once deployed, the agent can be called via REST API:</p> <pre><code>from mlflow.deployments import get_deploy_client\n\nclient = get_deploy_client(\"databricks\")\nresponse = client.predict(\n    endpoint=\"retail_ai_agent\",\n    inputs={\n        \"messages\": [\n            {\"role\": \"user\", \"content\": \"Can you recommend a lamp to match my oak side tables?\"}\n        ],\n        \"custom_inputs\": {\n            \"configurable\": {\n                \"thread_id\": \"1\",\n                \"tone\": \"friendly\"\n            }\n        }\n    }\n)\n</code></pre>"},{"location":"deployment/production/#streamlit-application","title":"Streamlit Application","text":"<p>Deploy the store management interface:</p> <pre><code>cd streamlit_store_app\nstreamlit run app.py\n</code></pre>"},{"location":"deployment/production/#monitoring-and-observability","title":"\ud83d\udcca Monitoring and Observability","text":""},{"location":"deployment/production/#mlflow-tracking","title":"MLflow Tracking","text":"<p>Enable comprehensive tracking:</p> <pre><code>import mlflow\nmlflow.set_tracking_uri(\"databricks\")\n\n# View traces and metrics in MLflow UI\n</code></pre>"},{"location":"deployment/production/#debug-logging","title":"Debug Logging","text":"<p>Enable debug logging for troubleshooting:</p> <pre><code>import logging\nlogging.getLogger(\"retail_ai\").setLevel(logging.DEBUG)\n</code></pre>"},{"location":"deployment/production/#performance-monitoring","title":"Performance Monitoring","text":"<p>Monitor key metrics: - Response Time: End-to-end latency - Accuracy: Response quality scores - Usage: Request volume and patterns - Errors: Error rates and types</p>"},{"location":"deployment/production/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"deployment/production/#access-control","title":"Access Control","text":"<ul> <li>Unity Catalog Permissions: Ensure proper data access controls</li> <li>Model Serving Permissions: Restrict endpoint access</li> <li>API Authentication: Implement proper authentication</li> <li>Network Security: Configure VPC and firewall rules</li> </ul>"},{"location":"deployment/production/#data-privacy","title":"Data Privacy","text":"<ul> <li>PII Handling: Implement data anonymization</li> <li>Audit Logging: Enable comprehensive audit trails</li> <li>Encryption: Ensure data encryption at rest and in transit</li> <li>Compliance: Meet regulatory requirements</li> </ul>"},{"location":"deployment/production/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"deployment/production/#common-issues","title":"Common Issues","text":"<ol> <li>Tool Not Found</li> <li>Verify tool registration in agent configuration</li> <li> <p>Check Unity Catalog function permissions</p> </li> <li> <p>Type Errors</p> </li> <li>Validate Pydantic model definitions</li> <li> <p>Check field types and constraints</p> </li> <li> <p>Database Errors</p> </li> <li>Verify Unity Catalog permissions</li> <li> <p>Check function names and schemas</p> </li> <li> <p>Vector Search Issues</p> </li> <li>Verify endpoint status</li> <li>Check index configuration and permissions</li> </ol>"},{"location":"deployment/production/#debug-steps","title":"Debug Steps","text":"<ol> <li> <p>Check Configuration <pre><code># Validate model_config.yaml\npython -c \"import yaml; print(yaml.safe_load(open('model_config.yaml')))\"\n</code></pre></p> </li> <li> <p>Test Endpoints <pre><code># Test LLM endpoint\nfrom databricks.sdk import WorkspaceClient\nw = WorkspaceClient()\n# Test endpoint connectivity\n</code></pre></p> </li> <li> <p>Verify Permissions <pre><code>-- Check Unity Catalog permissions\nSHOW GRANTS ON CATALOG your_catalog;\nSHOW GRANTS ON SCHEMA your_catalog.your_schema;\n</code></pre></p> </li> </ol>"},{"location":"deployment/production/#scaling-considerations","title":"\ud83d\udcc8 Scaling Considerations","text":""},{"location":"deployment/production/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Endpoint Scaling: Configure auto-scaling for model endpoints</li> <li>Caching: Implement response caching for common queries</li> <li>Load Balancing: Distribute traffic across multiple endpoints</li> <li>Resource Allocation: Optimize compute resources</li> </ul>"},{"location":"deployment/production/#cost-optimization","title":"Cost Optimization","text":"<ul> <li>Endpoint Management: Scale down during low usage periods</li> <li>Query Optimization: Optimize SQL queries and vector searches</li> <li>Resource Monitoring: Track and optimize resource usage</li> <li>Cost Alerts: Set up cost monitoring and alerts</li> </ul>"},{"location":"deployment/production/#continuous-deployment","title":"\ud83d\udd04 Continuous Deployment","text":""},{"location":"deployment/production/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>Set up automated deployment:</p> <pre><code># .github/workflows/deploy.yml\nname: Deploy Retail AI\non:\n  push:\n    branches: [main]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy to Databricks\n        run: |\n          # Run deployment scripts\n          python 07_deploy_agent.py\n</code></pre>"},{"location":"deployment/production/#model-updates","title":"Model Updates","text":"<p>For model updates:</p> <ol> <li>Development: Update model in development environment</li> <li>Testing: Run evaluation and quality checks</li> <li>Staging: Deploy to staging environment</li> <li>Production: Promote to production with alias update</li> </ol> <p>This deployment guide ensures a robust, secure, and scalable production deployment of the Retail AI system. </p>"},{"location":"development/contributing/","title":"Contributing to Retail AI","text":"<p>This guide helps developers understand the tools architecture and contribute effectively to the Retail AI project.</p>"},{"location":"development/contributing/#tools-architecture-patterns","title":"\ud83c\udfd7\ufe0f Tools Architecture &amp; Patterns","text":""},{"location":"development/contributing/#tool-design-philosophy","title":"Tool Design Philosophy","text":"<p>The <code>retail_ai/tools.py</code> module follows a factory pattern approach where functions create specialized tools that can be used by LangChain agents. This design provides:</p> <ul> <li>Modularity: Each tool is self-contained and reusable</li> <li>Type Safety: Pydantic models ensure data consistency</li> <li>Observability: MLflow tracing and logging throughout</li> <li>Databricks Native: Leverages the full Databricks platform</li> </ul>"},{"location":"development/contributing/#tool-categories","title":"Tool Categories","text":""},{"location":"development/contributing/#1-llm-powered-analysis-tools","title":"1. LLM-Powered Analysis Tools","text":"<p>These tools use language models with structured output to perform complex analysis:</p> <pre><code>def create_product_comparison_tool(llm: LanguageModelLike) -&gt; Callable:\n    @tool\n    def product_comparison(products: list[dict]) -&gt; ComparisonResult:\n        llm_with_tools = llm.with_structured_output(ComparisonResult)\n        return llm_with_tools.invoke(formatted_prompt)\n    return product_comparison\n</code></pre> <p>Pattern:  - Define Pydantic models for structured output - Create prompt templates for consistent results - Use <code>llm.with_structured_output()</code> for type-safe responses</p> <p>Examples: - <code>create_product_comparison_tool()</code>: Compare multiple products - <code>create_product_classification_tool()</code>: Classify products into categories - <code>create_sku_extraction_tool()</code>: Extract SKU codes from text</p>"},{"location":"development/contributing/#2-database-query-tools","title":"2. Database Query Tools","text":"<p>These tools execute SQL queries against Databricks warehouses:</p> <pre><code>def create_find_product_by_sku_tool(warehouse_id: str):\n    @tool\n    def find_product_by_sku(skus: list[str]) -&gt; tuple:\n        w = WorkspaceClient()\n        statement = f\"SELECT * FROM catalog.schema.function(ARRAY({skus}))\"\n        response = w.statement_execution.execute_statement(statement, warehouse_id)\n        # Handle async execution with polling\n        return response.result.data_array\n    return find_product_by_sku\n</code></pre> <p>Pattern: - Use <code>WorkspaceClient()</code> for Databricks API access - Execute SQL statements with proper error handling - Poll for completion on long-running queries - Return structured data from Unity Catalog functions</p>"},{"location":"development/contributing/#3-vector-search-tools","title":"3. Vector Search Tools","text":"<p>These tools perform semantic search using Databricks Vector Search:</p> <pre><code>def find_product_details_by_description_tool(endpoint_name, index_name, columns):\n    @tool\n    @mlflow.trace(span_type=\"RETRIEVER\", name=\"vector_search\")\n    def find_product_details_by_description(content: str):\n        vector_search = DatabricksVectorSearch(\n            endpoint=endpoint_name,\n            index_name=index_name,\n            columns=columns\n        )\n        return vector_search.similarity_search(query=content, k=k)\n    return find_product_details_by_description\n</code></pre> <p>Pattern: - Use <code>@mlflow.trace()</code> for observability - Initialize <code>DatabricksVectorSearch</code> with endpoint/index - Return <code>Document</code> objects with metadata - Register retriever schema with MLflow</p>"},{"location":"development/contributing/#4-unity-catalog-integration-tools","title":"4. Unity Catalog Integration Tools","text":"<p>These tools automatically wrap UC functions as LangChain tools:</p> <pre><code>def create_uc_tools(function_names: str | Sequence[str]) -&gt; Sequence[BaseTool]:\n    client = DatabricksFunctionClient()\n    toolkit = UCFunctionToolkit(function_names=function_names, client=client)\n    return toolkit.tools\n</code></pre>"},{"location":"development/contributing/#5-external-service-tools","title":"5. External Service Tools","text":"<p>These tools integrate with external services:</p> <pre><code>def create_genie_tool(space_id: Optional[str] = None):\n    genie = Genie(space_id=space_id)\n\n    @tool\n    def genie_tool(question: str) -&gt; GenieResponse:\n        return genie.ask_question(question)\n    return genie_tool\n</code></pre>"},{"location":"development/contributing/#data-models","title":"Data Models","text":"<p>The tools use Pydantic models for structured data:</p> <pre><code>class ProductInfo(BaseModel):\n    product_id: str = Field(description=\"Unique identifier\")\n    product_name: str = Field(description=\"Name of the product\")\n    attributes: list[ProductAttribute] = Field(description=\"Product attributes\")\n    overall_rating: int = Field(description=\"Rating 1-10\")\n\n    model_config = {\n        \"extra\": \"forbid\",  # Prevent additional properties\n        \"json_schema_extra\": {\"additionalProperties\": False}\n    }\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"\ud83d\ude80 Development Workflow","text":""},{"location":"development/contributing/#project-structure","title":"Project Structure","text":"<pre><code>retail_ai/\n\u251c\u2500\u2500 agents.py          # Agent implementations\n\u251c\u2500\u2500 catalog.py         # Unity Catalog integration\n\u251c\u2500\u2500 graph.py           # LangGraph workflow definition\n\u251c\u2500\u2500 models.py          # MLflow model integration\n\u251c\u2500\u2500 nodes.py           # Agent node definitions\n\u251c\u2500\u2500 tools.py           # Tool definitions (main focus)\n\u2514\u2500\u2500 vector_search.py   # Vector search utilities\n\nnotebooks/\n\u251c\u2500\u2500 05_agent_as_code_driver.py    # Model logging &amp; registration\n\u251c\u2500\u2500 06_evaluate_agent.py          # Model evaluation\n\u2514\u2500\u2500 07_deploy_agent.py            # Model deployment &amp; permissions\n</code></pre>"},{"location":"development/contributing/#notebook-workflow","title":"Notebook Workflow","text":"<p>The development workflow is organized into focused notebooks:</p> <ol> <li><code>05_agent_as_code_driver.py</code>: Model development, logging, and registration</li> <li><code>06_evaluate_agent.py</code>: Formal MLflow evaluation and performance metrics</li> <li><code>07_deploy_agent.py</code>: Model alias management, endpoint deployment, and permissions</li> </ol>"},{"location":"development/contributing/#adding-new-tools","title":"\ud83d\udd27 Adding New Tools","text":"<p>To add a new tool, follow these patterns:</p>"},{"location":"development/contributing/#1-define-data-models-if-needed","title":"1. Define Data Models (if needed)","text":"<pre><code>class YourDataModel(BaseModel):\n    field_name: str = Field(description=\"Clear description\")\n\n    model_config = {\n        \"extra\": \"forbid\",\n        \"json_schema_extra\": {\"additionalProperties\": False}\n    }\n</code></pre>"},{"location":"development/contributing/#2-create-tool-factory-function","title":"2. Create Tool Factory Function","text":"<pre><code>def create_your_tool(required_params) -&gt; Callable:\n    \"\"\"\n    Create a tool that does something specific.\n\n    Args:\n        required_params: Description of parameters\n\n    Returns:\n        A callable tool function\n    \"\"\"\n\n    @tool\n    def your_tool(input_param: str) -&gt; YourDataModel:\n        \"\"\"\n        Tool description that the agent will see.\n\n        Args:\n            input_param: Description of what this parameter does\n\n        Returns:\n            Structured result following YourDataModel schema\n        \"\"\"\n        logger.debug(f\"your_tool: input={input_param}\")\n\n        # Tool implementation here\n        result = process_input(input_param)\n\n        logger.debug(f\"your_tool: result={result}\")\n        return result\n\n    return your_tool\n</code></pre>"},{"location":"development/contributing/#3-add-mlflow-tracing-for-retrieval-tools","title":"3. Add MLflow Tracing (for retrieval tools)","text":"<pre><code>@tool\n@mlflow.trace(span_type=\"RETRIEVER\", name=\"your_tool_name\")\ndef your_retrieval_tool(query: str) -&gt; Sequence[Document]:\n    # Implementation\n    pass\n</code></pre>"},{"location":"development/contributing/#4-register-with-agent","title":"4. Register with Agent","text":"<p>Add your tool to the appropriate agent in <code>retail_ai/graph.py</code>:</p> <pre><code># In the agent creation function\nyour_tool = create_your_tool(config_params)\ntools = [existing_tools..., your_tool]\n</code></pre>"},{"location":"development/contributing/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"development/contributing/#unit-testing","title":"Unit Testing","text":"<pre><code>def test_your_tool():\n    tool = create_your_tool(test_params)\n    result = tool.invoke(\"test input\")\n    assert isinstance(result, YourDataModel)\n    assert result.field_name == \"expected_value\"\n</code></pre>"},{"location":"development/contributing/#integration-testing","title":"Integration Testing","text":"<p>Test tools in the context of the full agent:</p> <pre><code># Use the evaluation notebook\nexample_input = {\"messages\": [{\"role\": \"user\", \"content\": \"test your tool\"}]}\nresult = app.invoke(example_input)\n</code></pre>"},{"location":"development/contributing/#best-practices","title":"\ud83d\udccb Best Practices","text":""},{"location":"development/contributing/#1-error-handling","title":"1. Error Handling","text":"<pre><code>@tool\ndef robust_tool(input_param: str) -&gt; ResultModel:\n    try:\n        result = external_service.call(input_param)\n        if not result:\n            logger.warning(f\"No results for input: {input_param}\")\n            return ResultModel(status=\"no_results\")\n        return ResultModel(data=result)\n    except Exception as e:\n        logger.error(f\"Tool failed: {e}\")\n        raise\n</code></pre>"},{"location":"development/contributing/#2-logging","title":"2. Logging","text":"<pre><code>from loguru import logger\n\n@tool\ndef well_logged_tool(input_param: str):\n    logger.debug(f\"tool_name: input={input_param}\")\n\n    # Log important intermediate steps\n    processed = process_input(input_param)\n    logger.debug(f\"tool_name: processed={processed}\")\n\n    result = generate_result(processed)\n    logger.debug(f\"tool_name: result={result}\")\n    return result\n</code></pre>"},{"location":"development/contributing/#3-configuration","title":"3. Configuration","text":"<p>Use the model config for tool parameters:</p> <pre><code>def create_configurable_tool(model_config: ModelConfig):\n    endpoint = model_config.get(\"resources\").get(\"endpoints\").get(\"your_endpoint\")\n\n    @tool\n    def configurable_tool(input_param: str):\n        # Use endpoint from config\n        pass\n    return configurable_tool\n</code></pre>"},{"location":"development/contributing/#4-documentation","title":"4. Documentation","text":"<ul> <li>Write clear docstrings that agents can understand</li> <li>Include parameter descriptions and examples</li> <li>Document return value structure</li> <li>Add type hints for all parameters</li> </ul>"},{"location":"development/contributing/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"development/contributing/#common-issues","title":"Common Issues","text":"<ol> <li>Tool Not Found: Ensure tool is registered in the agent configuration</li> <li>Type Errors: Check Pydantic model definitions and field types</li> <li>Database Errors: Verify Unity Catalog permissions and function names</li> <li>Vector Search Issues: Check endpoint status and index configuration</li> </ol>"},{"location":"development/contributing/#debugging","title":"Debugging","text":"<p>Enable debug logging:</p> <pre><code>import logging\nlogging.getLogger(\"retail_ai\").setLevel(logging.DEBUG)\n</code></pre> <p>Use MLflow tracing to debug tool execution:</p> <pre><code># View traces in MLflow UI\nmlflow.set_tracking_uri(\"databricks\")\n</code></pre>"},{"location":"development/contributing/#contributing-guidelines","title":"\ud83e\udd1d Contributing Guidelines","text":""},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository and create a feature branch</li> <li>Add tests for any new tools or functionality</li> <li>Update documentation including docstrings and examples</li> <li>Run quality checks (linting, type checking, tests)</li> <li>Submit pull request with clear description of changes</li> </ol>"},{"location":"development/contributing/#code-review-checklist","title":"Code Review Checklist","text":"<ul> <li> Tool follows established patterns</li> <li> Proper error handling and logging</li> <li> Type hints and Pydantic models</li> <li> Clear documentation and examples</li> <li> Tests cover new functionality</li> <li> MLflow tracing for retrieval tools</li> <li> Configuration uses model config</li> </ul>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: Use GitHub issues for bugs and feature requests</li> <li>Discussions: Use GitHub discussions for questions and ideas</li> <li>Documentation: Check existing docs and code examples</li> <li>Community: Join the project community channels</li> </ul> <p>This contributing guide provides the foundation for building robust, maintainable tools that integrate seamlessly with the Retail AI architecture. </p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide provides detailed installation instructions for the Retail AI system across different environments.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.9 or higher</li> <li>Memory: 8GB RAM minimum, 16GB recommended</li> <li>Storage: 10GB free space</li> <li>Network: Internet connection for package downloads</li> </ul>"},{"location":"getting-started/installation/#databricks-requirements","title":"Databricks Requirements","text":"<ul> <li>Databricks Workspace: Access to a Databricks workspace</li> <li>Unity Catalog: Enabled and configured</li> <li>SQL Warehouse: Running SQL warehouse for function execution</li> <li>Permissions: Ability to create functions and access data</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-standard-installation","title":"Method 1: Standard Installation","text":"<ol> <li> <p>Clone the Repository <pre><code>git clone https://github.com/your-org/retail-ai.git\ncd retail-ai\n</code></pre></p> </li> <li> <p>Create Virtual Environment <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#method-2-development-installation","title":"Method 2: Development Installation","text":"<p>For contributors and developers:</p> <ol> <li> <p>Clone with Development Dependencies <pre><code>git clone https://github.com/your-org/retail-ai.git\ncd retail-ai\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\npip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Install Pre-commit Hooks <pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#method-3-docker-installation","title":"Method 3: Docker Installation","text":"<ol> <li> <p>Build Docker Image <pre><code>docker build -t retail-ai .\n</code></pre></p> </li> <li> <p>Run Container <pre><code>docker run -p 8501:8501 retail-ai\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#environment-configuration","title":"Environment Configuration","text":""},{"location":"getting-started/installation/#1-databricks-configuration","title":"1. Databricks Configuration","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># Databricks Configuration\nDATABRICKS_HOST=https://your-workspace.cloud.databricks.com\nDATABRICKS_TOKEN=your-personal-access-token\nDATABRICKS_WAREHOUSE_ID=your-sql-warehouse-id\n\n# Optional: Specific endpoint configurations\nDATABRICKS_CLUSTER_ID=your-cluster-id\nDATABRICKS_WORKSPACE_ID=your-workspace-id\n</code></pre>"},{"location":"getting-started/installation/#2-model-configuration","title":"2. Model Configuration","text":"<p>Edit <code>model_config.yaml</code> to match your environment:</p> <pre><code>catalog_name: your_catalog_name\ndatabase_name: your_database_name\nvolume_name: your_volume_name\n\n# Update function names to match your catalog/database\nfunctions:\n  find_product_by_sku:\n    name: your_catalog.your_database.find_product_by_sku\n  # ... other functions\n</code></pre>"},{"location":"getting-started/installation/#3-vector-search-configuration-optional","title":"3. Vector Search Configuration (Optional)","text":"<p>If using vector search capabilities:</p> <pre><code>vector_stores:\n  products_vector_store:\n    index_name: your_catalog.your_database.product_description_index\n    endpoint_name: your-vector-search-endpoint\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-test-python-installation","title":"1. Test Python Installation","text":"<pre><code>python --version  # Should be 3.9+\npip list | grep -E \"(databricks|langchain|mlflow)\"\n</code></pre>"},{"location":"getting-started/installation/#2-test-databricks-connection","title":"2. Test Databricks Connection","text":"<pre><code>from databricks.sdk import WorkspaceClient\n\ntry:\n    w = WorkspaceClient()\n    print(\"\u2705 Databricks connection successful\")\n    print(f\"Workspace URL: {w.config.host}\")\nexcept Exception as e:\n    print(f\"\u274c Databricks connection failed: {e}\")\n</code></pre>"},{"location":"getting-started/installation/#3-test-unity-catalog-access","title":"3. Test Unity Catalog Access","text":"<pre><code>from databricks.sdk import WorkspaceClient\nfrom unitycatalog.ai.core.databricks import DatabricksFunctionClient\n\ntry:\n    w = WorkspaceClient()\n    client = DatabricksFunctionClient(client=w)\n    print(\"\u2705 Unity Catalog client initialized\")\nexcept Exception as e:\n    print(f\"\u274c Unity Catalog access failed: {e}\")\n</code></pre>"},{"location":"getting-started/installation/#platform-specific-instructions","title":"Platform-Specific Instructions","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ol> <li>Install Python from Microsoft Store or python.org</li> <li>Use PowerShell or Command Prompt</li> <li>Virtual Environment Activation:    <pre><code>.venv\\Scripts\\activate\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<ol> <li>Install Python via Homebrew (recommended):    <pre><code>brew install python@3.9\n</code></pre></li> <li>Or use pyenv for version management:    <pre><code>brew install pyenv\npyenv install 3.9.18\npyenv global 3.9.18\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<ol> <li> <p>Install Python and dependencies:    <pre><code>sudo apt update\nsudo apt install python3.9 python3.9-venv python3.9-dev\n</code></pre></p> </li> <li> <p>Install build tools if needed:    <pre><code>sudo apt install build-essential\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Python version conflicts <pre><code># Check Python version\npython --version\npython3 --version\n\n# Use specific Python version\npython3.9 -m venv .venv\n</code></pre></p> <p>Permission errors on Windows <pre><code># Run as administrator or use:\npip install --user -r requirements.txt\n</code></pre></p> <p>SSL certificate errors <pre><code># Upgrade certificates\npip install --upgrade certifi\n# Or use trusted hosts\npip install --trusted-host pypi.org --trusted-host pypi.python.org -r requirements.txt\n</code></pre></p> <p>Memory errors during installation <pre><code># Install packages one by one\npip install --no-cache-dir -r requirements.txt\n</code></pre></p> <p>Databricks authentication issues <pre><code># Check token validity\ndatabricks auth login --host https://your-workspace.cloud.databricks.com\n\n# Or set environment variables\nexport DATABRICKS_HOST=\"https://your-workspace.cloud.databricks.com\"\nexport DATABRICKS_TOKEN=\"your-token\"\n</code></pre></p>"},{"location":"getting-started/installation/#package-specific-issues","title":"Package-Specific Issues","text":"<p>LangChain installation <pre><code># If you encounter issues with LangChain\npip install --upgrade langchain langchain-community\n</code></pre></p> <p>MLflow installation <pre><code># For MLflow tracking issues\npip install --upgrade mlflow[extras]\n</code></pre></p> <p>Databricks SDK issues <pre><code># Ensure latest SDK version\npip install --upgrade databricks-sdk\n</code></pre></p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure your environment - Configuration Guide</li> <li>Run the quick start - Quick Start Guide</li> <li>Set up Unity Catalog functions - Run <code>python 04_unity_catalog_tools.py</code></li> <li>Test the system - Run <code>python 05a_run_examples.py</code></li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter installation issues:</p> <ol> <li>Check the troubleshooting section above</li> <li>Review system requirements</li> <li>Check GitHub issues for similar problems</li> <li>Create a new issue with:</li> <li>Operating system and version</li> <li>Python version</li> <li>Error messages</li> <li>Installation method used</li> </ol>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>To completely remove the installation:</p> <pre><code># Deactivate virtual environment\ndeactivate\n\n# Remove virtual environment\nrm -rf .venv\n\n# Remove cloned repository\ncd ..\nrm -rf retail-ai\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/","title":"MkDocs Quickstart Guide","text":"<p>This guide will get you up and running with the MkDocs documentation system for Retail AI in just a few minutes.</p>"},{"location":"getting-started/mkdocs-quickstart/#what-is-mkdocs","title":"What is MkDocs?","text":"<p>MkDocs is a fast, simple static site generator that builds beautiful documentation from Markdown files. Your Retail AI project uses MkDocs with the Material theme for a modern, professional documentation experience.</p>"},{"location":"getting-started/mkdocs-quickstart/#quick-setup-2-minutes","title":"\ud83d\ude80 Quick Setup (2 minutes)","text":""},{"location":"getting-started/mkdocs-quickstart/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<p>Choose one of these methods:</p> Using Make (Recommended)Using pip directlyUsing the setup script <pre><code>make docs-install\n</code></pre> <pre><code>pip install -r requirements-docs.txt\n</code></pre> <pre><code>./scripts/setup-docs.sh\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/#step-2-start-the-development-server","title":"Step 2: Start the Development Server","text":"<pre><code>make docs-serve\n</code></pre> <p>Or directly: <pre><code>mkdocs serve\n</code></pre></p>"},{"location":"getting-started/mkdocs-quickstart/#step-3-open-your-browser","title":"Step 3: Open Your Browser","text":"<p>Navigate to: http://localhost:8000</p> <p>\ud83c\udf89 That's it! Your documentation is now running locally.</p>"},{"location":"getting-started/mkdocs-quickstart/#creating-your-first-page","title":"\ud83d\udcdd Creating Your First Page","text":""},{"location":"getting-started/mkdocs-quickstart/#1-create-a-new-markdown-file","title":"1. Create a New Markdown File","text":"<pre><code># Create a new guide\ntouch docs/guides/my-first-guide.md\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/#2-add-content","title":"2. Add Content","text":"<pre><code># My First Guide\n\nThis is my first documentation page!\n\n## Features\n\n- Easy to write in Markdown\n- Live preview with auto-reload\n- Beautiful Material Design theme\n\n## Code Examples\n\n```python\ndef hello_world():\n    print(\"Hello, MkDocs!\")\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Tools Overview</li> <li>Quick Start <pre><code>### 3. Add to Navigation\n\nEdit `mkdocs.yml` and add your page to the navigation:\n\n```yaml\nnav:\n  - Home: index.md\n  - Getting Started:\n    - Quick Start: getting-started/quick-start.md\n    - MkDocs Guide: getting-started/mkdocs-quickstart.md\n  - User Guides:\n    - My First Guide: guides/my-first-guide.md  # Add this line\n</code></pre></li> </ul>"},{"location":"getting-started/mkdocs-quickstart/#4-see-your-changes","title":"4. See Your Changes","text":"<p>The page will automatically appear in your browser at http://localhost:8000</p>"},{"location":"getting-started/mkdocs-quickstart/#styling-and-features","title":"\ud83c\udfa8 Styling and Features","text":""},{"location":"getting-started/mkdocs-quickstart/#admonitions-callout-boxes","title":"Admonitions (Callout Boxes)","text":"<pre><code>!!! note \"Pro Tip\"\n    This creates a blue info box\n\n!!! warning \"Important\"\n    This creates a yellow warning box\n\n!!! danger \"Critical\"\n    This creates a red danger box\n\n!!! success \"Great Job\"\n    This creates a green success box\n</code></pre> <p>Result:</p> <p>Pro Tip</p> <p>This creates a blue info box</p>"},{"location":"getting-started/mkdocs-quickstart/#code-blocks-with-syntax-highlighting","title":"Code Blocks with Syntax Highlighting","text":"<p><pre><code>```python title=\"example.py\"\ndef find_product(sku: str) -&gt; dict:\n    \"\"\"Find a product by SKU.\"\"\"\n    return {\"sku\": sku, \"name\": \"Coffee Pods\"}\n</code></pre> <pre><code>### Tabbed Content\n\n```markdown\n=== \"Python\"\n\n    ```python\n    print(\"Hello from Python!\")\n    ```\n\n=== \"JavaScript\"\n\n    ```javascript\n    console.log(\"Hello from JavaScript!\");\n    ```\n\n=== \"Bash\"\n\n    ```bash\n    echo \"Hello from Bash!\"\n    ```\n</code></pre></p> <p>Result:</p> PythonJavaScriptBash <pre><code>print(\"Hello from Python!\")\n</code></pre> <pre><code>console.log(\"Hello from JavaScript!\");\n</code></pre> <pre><code>echo \"Hello from Bash!\"\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<p><pre><code>```mermaid\ngraph LR\n    A[User] --&gt; B[MkDocs]\n    B --&gt; C[Beautiful Docs]\n    C --&gt; D[Happy Users]\n</code></pre> <pre><code>Result:\n```mermaid\ngraph LR\n    A[User] --&gt; B[MkDocs]\n    B --&gt; C[Beautiful Docs]\n    C --&gt; D[Happy Users]\n</code></pre></p>"},{"location":"getting-started/mkdocs-quickstart/#essential-commands","title":"\ud83d\udd27 Essential Commands","text":""},{"location":"getting-started/mkdocs-quickstart/#development-commands","title":"Development Commands","text":"Command Purpose When to Use <code>make docs-serve</code> Start development server Writing documentation <code>make docs-build</code> Build static site Testing before deploy <code>make docs-deploy</code> Deploy to GitHub Pages Publishing changes <code>make docs-clean</code> Clean build files Troubleshooting"},{"location":"getting-started/mkdocs-quickstart/#advanced-commands","title":"Advanced Commands","text":"<pre><code># Build with strict mode (fails on warnings)\nmkdocs build --strict\n\n# Serve on different port\nmkdocs serve --dev-addr=127.0.0.1:8001\n\n# Build to custom directory\nmkdocs build --site-dir custom-site\n\n# Deploy with custom message\nmkdocs gh-deploy --message \"Updated documentation\"\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/#file-organization","title":"\ud83d\udcc1 File Organization","text":""},{"location":"getting-started/mkdocs-quickstart/#recommended-structure","title":"Recommended Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Homepage\n\u251c\u2500\u2500 getting-started/            # Getting started guides\n\u2502   \u251c\u2500\u2500 quick-start.md\n\u2502   \u251c\u2500\u2500 installation.md\n\u2502   \u2514\u2500\u2500 mkdocs-quickstart.md\n\u251c\u2500\u2500 tools/                      # Tool documentation\n\u2502   \u251c\u2500\u2500 overview.md\n\u2502   \u2514\u2500\u2500 unity-catalog-functions.md\n\u251c\u2500\u2500 guides/                     # User guides\n\u2502   \u2514\u2500\u2500 store-manager.md\n\u251c\u2500\u2500 development/                # Developer docs\n\u2502   \u2514\u2500\u2500 setup.md\n\u251c\u2500\u2500 api/                        # API reference\n\u2502   \u2514\u2500\u2500 functions.md\n\u2514\u2500\u2500 examples/                   # Examples and tutorials\n    \u2514\u2500\u2500 basic-usage.md\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/#file-naming-conventions","title":"File Naming Conventions","text":"<ul> <li>Use lowercase with hyphens: <code>my-awesome-guide.md</code></li> <li>Be descriptive: <code>unity-catalog-functions.md</code> not <code>uc-funcs.md</code></li> <li>Group related files in directories</li> <li>Use <code>index.md</code> for directory landing pages</li> </ul>"},{"location":"getting-started/mkdocs-quickstart/#linking-between-pages","title":"\ud83d\udd17 Linking Between Pages","text":""},{"location":"getting-started/mkdocs-quickstart/#relative-links","title":"Relative Links","text":"<pre><code># Link to another page\n[Quick Start Guide](../getting-started/quick-start.md)\n\n# Link to a section\n[Unity Catalog Functions](../agents-and-tools/overview.md#unity-catalog-functions)\n\n# Link to external site\n[MkDocs Documentation](https://www.mkdocs.org/)\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/#navigation-links","title":"Navigation Links","text":"<p>Links in the navigation are automatically generated from your <code>mkdocs.yml</code> configuration.</p>"},{"location":"getting-started/mkdocs-quickstart/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"getting-started/mkdocs-quickstart/#writing-tips","title":"Writing Tips","text":"<ol> <li>Start with an outline - Plan your page structure first</li> <li>Use headings hierarchically - H1 \u2192 H2 \u2192 H3, don't skip levels</li> <li>Include code examples - Show, don't just tell</li> <li>Add cross-references - Link to related pages</li> <li>Keep paragraphs short - Easier to read online</li> </ol>"},{"location":"getting-started/mkdocs-quickstart/#technical-tips","title":"Technical Tips","text":"<ol> <li>Test your links - Use <code>mkdocs build --strict</code> to catch broken links</li> <li>Optimize images - Keep file sizes reasonable</li> <li>Use consistent formatting - Follow the existing style</li> <li>Preview before committing - Always check in the browser first</li> </ol>"},{"location":"getting-started/mkdocs-quickstart/#publishing-your-documentation","title":"\ud83d\ude80 Publishing Your Documentation","text":""},{"location":"getting-started/mkdocs-quickstart/#automatic-deployment-recommended","title":"Automatic Deployment (Recommended)","text":"<p>Your project is set up with GitHub Actions for automatic deployment:</p> <ol> <li>Push to main branch</li> <li>GitHub Actions builds and deploys automatically</li> <li>Documentation is live at your GitHub Pages URL</li> </ol>"},{"location":"getting-started/mkdocs-quickstart/#manual-deployment","title":"Manual Deployment","text":"<pre><code># Deploy to GitHub Pages\nmake docs-deploy\n\n# Or directly\nmkdocs gh-deploy\n</code></pre>"},{"location":"getting-started/mkdocs-quickstart/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"getting-started/mkdocs-quickstart/#common-issues","title":"Common Issues","text":"<p>Port already in use <pre><code># Use a different port\nmkdocs serve --dev-addr=127.0.0.1:8001\n</code></pre></p> <p>Broken links warning <pre><code># Find and fix broken links\nmkdocs build --strict\n</code></pre></p> <p>Changes not showing <pre><code># Hard refresh browser (Ctrl+F5 or Cmd+Shift+R)\n# Or clear browser cache\n</code></pre></p> <p>Build fails <pre><code># Check for syntax errors in mkdocs.yml\n# Validate YAML syntax online\n</code></pre></p>"},{"location":"getting-started/mkdocs-quickstart/#getting-help","title":"Getting Help","text":"<ol> <li>Check the MkDocs logs in your terminal</li> <li>Validate your YAML configuration</li> <li>Test with <code>mkdocs build --strict</code></li> <li>Check the MkDocs documentation</li> </ol>"},{"location":"getting-started/mkdocs-quickstart/#next-steps_1","title":"\ud83d\udcda Next Steps","text":"<p>Now that you know the basics:</p> <ol> <li>Explore the Material theme features: Material for MkDocs</li> <li>Add more content to your documentation</li> <li>Customize the theme in <code>mkdocs.yml</code></li> <li>Set up automatic deployment with GitHub Actions</li> <li>Share your documentation with your team</li> </ol>"},{"location":"getting-started/mkdocs-quickstart/#youre-ready","title":"\ud83c\udf89 You're Ready!","text":"<p>You now have everything you need to create beautiful documentation with MkDocs. Start writing, and remember:</p> <ul> <li>Keep it simple - Markdown is easy to learn</li> <li>Focus on content - The theme handles the styling</li> <li>Iterate quickly - Use the live preview to see changes instantly</li> <li>Have fun - Good documentation makes everyone's life easier!</li> </ul> <p>Happy documenting! \ud83d\udcd6\u2728 </p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get the Retail AI system up and running quickly.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Access to a Databricks workspace</li> <li>Unity Catalog enabled</li> <li>Git</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":""},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/your-org/retail-ai.git\ncd retail-ai\n</code></pre>"},{"location":"getting-started/quick-start/#2-set-up-python-environment","title":"2. Set Up Python Environment","text":"<pre><code># Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/quick-start/#3-configure-environment","title":"3. Configure Environment","text":"<p>Create a <code>.env</code> file with your Databricks configuration:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your settings:</p> <pre><code>DATABRICKS_HOST=https://your-workspace.cloud.databricks.com\nDATABRICKS_TOKEN=your-access-token\nDATABRICKS_WAREHOUSE_ID=your-warehouse-id\n</code></pre>"},{"location":"getting-started/quick-start/#4-configure-model-settings","title":"4. Configure Model Settings","text":"<p>Edit <code>model_config.yaml</code> to match your environment:</p> <pre><code>catalog_name: your_catalog\ndatabase_name: your_database\n</code></pre>"},{"location":"getting-started/quick-start/#initial-setup","title":"Initial Setup","text":""},{"location":"getting-started/quick-start/#1-create-unity-catalog-functions","title":"1. Create Unity Catalog Functions","text":"<p>Run the setup script to create all necessary Unity Catalog functions:</p> <pre><code>python 04_unity_catalog_tools.py\n</code></pre> <p>This will create the following functions: - <code>find_product_by_sku</code> - <code>find_product_by_upc</code> - <code>find_inventory_by_sku</code> - <code>find_inventory_by_upc</code> - <code>find_store_inventory_by_sku</code> - <code>find_store_inventory_by_upc</code></p>"},{"location":"getting-started/quick-start/#2-set-up-vector-search-optional","title":"2. Set Up Vector Search (Optional)","text":"<p>If you want to use semantic search capabilities:</p> <pre><code>python 02_provision-vector-search.py\n</code></pre>"},{"location":"getting-started/quick-start/#3-generate-test-data-optional","title":"3. Generate Test Data (Optional)","text":"<p>Create evaluation data for testing:</p> <pre><code>python 03_generate_evaluation_data.py\n</code></pre>"},{"location":"getting-started/quick-start/#testing-the-installation","title":"Testing the Installation","text":""},{"location":"getting-started/quick-start/#1-test-unity-catalog-functions","title":"1. Test Unity Catalog Functions","text":"<pre><code>from databricks.sdk import WorkspaceClient\nfrom unitycatalog.ai.core.databricks import DatabricksFunctionClient\n\n# Initialize clients\nw = WorkspaceClient()\nclient = DatabricksFunctionClient(client=w)\n\n# Test a function\nresult = client.execute_function(\n    function_name=\"your_catalog.your_database.find_product_by_sku\",\n    parameters={\"sku\": [\"TEST-SKU-001\"]}\n)\nprint(result.value)\n</code></pre>"},{"location":"getting-started/quick-start/#2-test-the-agent-system","title":"2. Test the Agent System","text":"<pre><code>python 05a_run_examples.py\n</code></pre>"},{"location":"getting-started/quick-start/#3-run-the-streamlit-app","title":"3. Run the Streamlit App","text":"<pre><code>cd streamlit_store_app\nstreamlit run app.py\n</code></pre>"},{"location":"getting-started/quick-start/#basic-usage-examples","title":"Basic Usage Examples","text":""},{"location":"getting-started/quick-start/#product-lookup","title":"Product Lookup","text":"<pre><code>from retail_ai.tools import create_find_product_by_sku_tool\n\n# Create tool\ntool = create_find_product_by_sku_tool(warehouse_id=\"your-warehouse-id\")\n\n# Use tool\nresult = tool.invoke({\"skus\": [\"STB-KCP-001\"]})\nprint(result)\n</code></pre>"},{"location":"getting-started/quick-start/#product-comparison","title":"Product Comparison","text":"<pre><code>from retail_ai.tools import create_product_comparison_tool\nfrom langchain_community.llms import Databricks\n\n# Initialize LLM\nllm = Databricks(endpoint_name=\"your-llm-endpoint\")\n\n# Create comparison tool\ncomparison_tool = create_product_comparison_tool(llm)\n\n# Compare products\nresult = comparison_tool.invoke({\n    \"products\": [\n        {\"product_id\": \"1\", \"name\": \"Product A\", \"price\": 10.99},\n        {\"product_id\": \"2\", \"name\": \"Product B\", \"price\": 12.99}\n    ]\n})\nprint(result)\n</code></pre>"},{"location":"getting-started/quick-start/#vector-search","title":"Vector Search","text":"<pre><code>from retail_ai.tools import find_product_details_by_description_tool\n\n# Create search tool\nsearch_tool = find_product_details_by_description_tool(\n    endpoint_name=\"your-endpoint\",\n    index_name=\"your_catalog.your_database.product_description_index\",\n    columns=[\"sku\", \"product_name\", \"description\"]\n)\n\n# Search for products\nresults = search_tool.invoke({\n    \"content\": \"medium roast coffee pods\"\n})\nprint(results)\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have the system running:</p> <ol> <li>Explore the Tools: Check out the Tools Reference to understand all available capabilities</li> <li>Try Examples: Run through the Examples to see common use cases</li> <li>Customize: Follow the Developer Guide to add your own tools</li> <li>Deploy: Use the Deployment Guide to deploy to production</li> </ol>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Function not found error <pre><code>Solution: Ensure Unity Catalog functions are created and you have proper permissions\n</code></pre></p> <p>Vector search errors <pre><code>Solution: Check that vector search index exists and endpoint is accessible\n</code></pre></p> <p>Authentication errors <pre><code>Solution: Verify your Databricks token and workspace URL in .env file\n</code></pre></p> <p>Import errors <pre><code>Solution: Ensure all dependencies are installed with pip install -r requirements.txt\n</code></pre></p>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the troubleshooting section</li> <li>Review the logs for error details</li> <li>Open an issue on GitHub with error details</li> <li>Contact the development team</li> </ol>"},{"location":"getting-started/quick-start/#configuration-reference","title":"Configuration Reference","text":"<p>For detailed configuration options, see: - Configuration Guide - Model Configuration - Environment Variables </p>"},{"location":"tools/overview/","title":"Retail AI Agents &amp; Tools Overview","text":"<p>The Retail AI system is built around specialized AI agents that orchestrate multiple tools to handle complex retail operations. This guide explains how to build and use these agents for retail customer assistance, inventory management, and product discovery.</p>"},{"location":"tools/overview/#what-are-retail-ai-agents","title":"\ud83e\udd16 What are Retail AI Agents?","text":"<p>Retail AI agents are autonomous, conversational AI systems that: - \ud83e\udde0 Reason and plan multi-step workflows to solve customer problems - \ud83d\udd27 Use specialized tools for data access, search, and analysis - \ud83d\udcac Maintain conversation context across multiple interactions - \ud83d\udee1\ufe0f Apply business rules and safety guardrails - \ud83c\udfaf Specialize in retail domains like products, inventory, and customer service</p>"},{"location":"tools/overview/#agent-architecture","title":"Agent Architecture","text":"<pre><code>graph TD\n    A[Customer Query] --&gt; B[Router Agent]\n    B --&gt; C{Query Type?}\n\n    C --&gt;|Product Info| D[Product Agent]\n    C --&gt;|Stock Check| E[Inventory Agent]\n    C --&gt;|Compare Items| F[Comparison Agent]\n    C --&gt;|DIY Help| G[DIY Agent]\n    C --&gt;|General| H[General Agent]\n\n    D --&gt; I[Unity Catalog Tools]\n    D --&gt; J[Vector Search Tools]\n    E --&gt; I\n    E --&gt; J\n    F --&gt; I\n    F --&gt; K[LangChain Tools]\n    G --&gt; L[Web Search Tools]\n    G --&gt; J\n    H --&gt; J\n\n    I --&gt; M[Response]\n    J --&gt; M\n    K --&gt; M\n    L --&gt; M\n\n    style D fill:#e1f5fe\n    style E fill:#f3e5f5\n    style F fill:#e8f5e8\n    style G fill:#fff3e0\n    style H fill:#fce4ec</code></pre>"},{"location":"tools/overview/#implemented-agents","title":"\ud83c\udfaf Implemented Agents","text":""},{"location":"tools/overview/#product-agent","title":"\ud83d\udecd\ufe0f Product Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>product_node()</code></p> <p>Specialization: Product discovery, details, and recommendations</p> <p>Capabilities: - Exact product lookup by SKU or UPC - Semantic product search using natural language - Product feature extraction and analysis - Cross-selling and upselling recommendations</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(\n        endpoint_name=endpoint_name,\n        index_name=index_name,\n        columns=columns,\n        k=num_results,\n    ),\n    create_find_product_by_sku_tool(warehouse_id=warehouse_id),\n    create_find_product_by_upc_tool(warehouse_id=warehouse_id),\n]\n</code></pre></p> <p>Example Usage: <pre><code>from retail_ai.nodes import product_node\n\n# Create agent\nproduct_agent = product_node(model_config)\n\n# Execute\nstate = AgentState(\n    messages=[HumanMessage(content=\"I'm looking for wireless headphones\")],\n    user_id=\"user123\",\n    store_num=\"101\"\n)\nresponse = product_agent.invoke(state, config)\n</code></pre></p> <p>Sample Interactions: <pre><code>\ud83d\udc64 \"Tell me about SKU STB-KCP-001\"\n\ud83e\udd16 \"That's our Stanley 20oz Tumbler in Charcoal. It features double-wall vacuum insulation, keeps drinks cold for 11 hours or hot for 7 hours. Currently priced at $39.95 with high popularity rating.\"\n\n\ud83d\udc64 \"I need wireless headphones under $200\"\n\ud83e\udd16 \"I found several great options! The Sony WH-CH720N offers excellent noise cancellation for $149.99, while the JBL Tune 760NC provides 35-hour battery life for $179.99.\"\n</code></pre></p>"},{"location":"tools/overview/#inventory-agent","title":"\ud83d\udce6 Inventory Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>inventory_node()</code></p> <p>Specialization: Stock levels, availability, and inventory management</p> <p>Capabilities: - Real-time inventory checking across stores and warehouses - Stock level monitoring and alerts - Product availability by location - Inventory movement tracking</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(...),\n    create_find_inventory_by_sku_tool(warehouse_id=warehouse_id),\n    create_find_inventory_by_upc_tool(warehouse_id=warehouse_id),\n    create_find_store_inventory_by_sku_tool(warehouse_id=warehouse_id),\n    create_find_store_inventory_by_upc_tool(warehouse_id=warehouse_id),\n]\n</code></pre></p> <p>Sample Interactions: <pre><code>\ud83d\udc64 \"Do you have the Nintendo Switch OLED in stock at store 101?\"\n\ud83e\udd16 \"Yes! Store 101 has 3 Nintendo Switch OLED units in stock. They're located in Electronics, aisle E-12. We also have 15 units available in our warehouse.\"\n\n\ud83d\udc64 \"Which stores have the Milwaukee M18 drill in stock?\"\n\ud83e\udd16 \"The Milwaukee M18 drill is available at: Store 101 (5 units), Store 105 (2 units), and Store 110 (8 units). Store 103 is currently out of stock but expecting delivery tomorrow.\"\n</code></pre></p>"},{"location":"tools/overview/#comparison-agent","title":"\u2696\ufe0f Comparison Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>comparison_node()</code></p> <p>Specialization: Product comparisons and recommendation analysis</p> <p>Capabilities: - Side-by-side product comparisons - Feature analysis and scoring - Pros and cons evaluation - Personalized recommendations based on user needs</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(...),\n    create_find_product_by_sku_tool(warehouse_id=warehouse_id),\n    create_find_product_by_upc_tool(warehouse_id=warehouse_id),\n]\n</code></pre></p> <p>Sample Interactions: <pre><code>\ud83d\udc64 \"Compare the DeWalt and Milwaukee cordless drills\"\n\ud83e\udd16 \"Great question! Here's a detailed comparison:\n\n**DeWalt 20V MAX (DCD771C2)**\n\u2705 Pros: Lighter weight (3.6 lbs), longer warranty (3 years), $20 less expensive\n\u274c Cons: Lower torque (300 in-lbs), shorter battery life\n\n**Milwaukee M18 (2804-20)**  \n\u2705 Pros: Higher torque (725 in-lbs), better battery technology, more durable\n\u274c Cons: Heavier (4.2 lbs), higher price point\n\n**Recommendation:** For heavy-duty work, choose Milwaukee. For general home use, DeWalt offers better value.\"\n</code></pre></p>"},{"location":"tools/overview/#diy-agent","title":"\ud83d\udd27 DIY Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>diy_node()</code></p> <p>Specialization: Project guidance, tutorials, and general assistance</p> <p>Capabilities: - Web search for external information - General product discovery - Open-ended customer assistance - Fallback for queries outside other agent specializations</p> <p>Tools Configuration: <pre><code>tools = [\n    search_tool(model_config),\n    find_product_details_by_description_tool(...),\n]\n</code></pre></p> <p>Sample Interactions: <pre><code>\ud83d\udc64 \"How do I install crown molding in my living room?\"\n\ud83e\udd16 \"Here's a step-by-step guide for crown molding installation:\n\n**Tools Needed:** Miter saw, nail gun, measuring tape, stud finder, caulk gun\n**Materials:** Crown molding, finishing nails, wood filler, caulk\n\n**Steps:**\n1. Measure room perimeter and add 10% for waste\n2. Cut inside corners at 45\u00b0 angles using miter saw\n3. Locate wall studs and mark positions\n4. Install molding starting with longest wall\n5. Use nail gun to secure into studs every 16 inches\n\nWould you like product recommendations for any of these tools?\"\n</code></pre></p>"},{"location":"tools/overview/#general-agent","title":"\ud83c\udfea General Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>general_node()</code></p> <p>Specialization: Store policies, hours, and general customer service</p> <p>Capabilities: - Store information and policies - General customer service inquiries - Fallback for unrouted queries - Policy and procedure guidance</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(...),\n]\n</code></pre></p> <p>Sample Interactions: <pre><code>\ud83d\udc64 \"What are your store hours and return policy?\"\n\ud83e\udd16 \"Our store hours are Monday-Saturday 6AM-10PM, Sunday 8AM-8PM. \n\n**Return Policy:**\n- 90 days for most items with receipt\n- 365 days for major appliances\n- Original packaging preferred but not required\n- Special orders may have different terms\n\nIs there a specific item you're looking to return or exchange?\"\n</code></pre></p>"},{"location":"tools/overview/#recommendation-agent","title":"\ud83c\udfaf Recommendation Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>recommendation_node()</code></p> <p>Specialization: Product recommendations and suggestions</p> <p>Capabilities: - Personalized product recommendations - Cross-selling and upselling - Product discovery based on preferences - Recommendation explanations</p> <p>Tools Configuration: <pre><code>tools = [\n    find_product_details_by_description_tool(...),\n]\n</code></pre></p>"},{"location":"tools/overview/#agent-orchestration","title":"\ud83d\udd04 Agent Orchestration","text":""},{"location":"tools/overview/#router-agent","title":"Router Agent","text":"<p>File: <code>retail_ai/nodes.py</code> \u2192 <code>router_node()</code></p> <p>The router agent intelligently directs user queries to the most appropriate specialized agent based on query analysis.</p> <p>Routing Logic: <pre><code># From model_config.yaml\nallowed_routes:\n  - product      # Product details, features, specifications\n  - comparison   # Comparing multiple products\n  - recommendation # Product suggestions and recommendations\n  - inventory    # Stock levels and availability\n  - diy         # How-to instructions and tutorials\n  - orders      # Order tracking and delivery\n  - general     # Store policies and general inquiries\n</code></pre></p> <p>Example Routing: <pre><code>def route_to_agent(query: str) -&gt; str:\n    query_lower = query.lower()\n\n    if any(keyword in query_lower for keyword in [\"product\", \"find\", \"search\"]):\n        return \"product\"\n    elif any(keyword in query_lower for keyword in [\"stock\", \"inventory\", \"available\"]):\n        return \"inventory\"\n    elif any(keyword in query_lower for keyword in [\"compare\", \"vs\", \"versus\"]):\n        return \"comparison\"\n    # ... additional routing logic\n</code></pre></p>"},{"location":"tools/overview/#tools-for-building-agents","title":"\ud83d\udee0\ufe0f Tools for Building Agents","text":"<p>Agents use different types of tools depending on their needs. Here's how to choose and implement tools:</p>"},{"location":"tools/overview/#unity-catalog-functions","title":"\u26a1 Unity Catalog Functions","text":"<p>High-performance SQL functions for exact data lookups</p> <p>When to Use: Known SKUs/UPCs, real-time inventory checks, exact product matches</p> <p>Example Implementation: <pre><code># Product agent using Unity Catalog tools\ntools = [\n    create_find_product_by_sku_tool(warehouse_id),\n    create_find_product_by_upc_tool(warehouse_id),\n]\n\nagent = create_react_agent(\n    model=llm,\n    tools=tools,\n    prompt=\"You are a product specialist...\"\n)\n</code></pre></p> <p>Available Functions: - <code>find_product_by_sku(sku: list[str])</code> \u2192 Product details - <code>find_product_by_upc(upc: list[str])</code> \u2192 Product details - <code>find_inventory_by_sku(sku: list[str])</code> \u2192 Global inventory - <code>find_store_inventory_by_sku(store_id: int, sku: list[str])</code> \u2192 Store inventory</p> <p>Input/Output Example: <pre><code># Input\n{\"sku\": [\"STB-KCP-001\"]}\n\n# Output\n{\n  \"product_id\": 12345,\n  \"sku\": \"STB-KCP-001\", \n  \"product_name\": \"Stanley 20oz Tumbler\",\n  \"brand_name\": \"Stanley\",\n  \"base_price\": 39.95,\n  \"department_name\": \"Kitchen &amp; Dining\"\n}\n</code></pre></p>"},{"location":"tools/overview/#vector-search-tools","title":"\ud83d\udd0d Vector Search Tools","text":"<p>Semantic search for natural language queries</p> <p>When to Use: Natural language product discovery, \"find similar\" queries, content search</p> <p>Example Implementation: <pre><code># Agent with vector search capability\nvector_tool = find_product_details_by_description_tool(\n    endpoint_name=\"vs_endpoint\",\n    index_name=\"products_index\", \n    columns=[\"product_name\", \"description\", \"category\"],\n    k=10\n)\n\nagent = create_react_agent(\n    model=llm,\n    tools=[vector_tool],\n    prompt=\"You help customers find products...\"\n)\n</code></pre></p> <p>Input/Output Example: <pre><code># Input\n\"wireless bluetooth headphones with noise cancellation\"\n\n# Output\n[\n  {\n    \"page_content\": \"Sony WH-CH720N Wireless Noise Canceling Headphones\",\n    \"metadata\": {\n      \"product_id\": \"67890\",\n      \"price\": 149.99,\n      \"score\": 0.89\n    }\n  },\n  {\n    \"page_content\": \"JBL Tune 760NC Wireless Over-Ear Headphones\", \n    \"metadata\": {\n      \"product_id\": \"67891\",\n      \"price\": 179.99,\n      \"score\": 0.85\n    }\n  }\n]\n</code></pre></p>"},{"location":"tools/overview/#langchain-tools","title":"\ud83e\udde0 LangChain Tools","text":"<p>AI-powered analysis and processing tools</p> <p>When to Use: Product comparison, text extraction, classification, complex analysis</p> <p>Example Implementation: <pre><code># Comparison agent with LangChain tools\ncomparison_tool = create_product_comparison_tool(llm)\nsku_tool = create_sku_extraction_tool(llm)\n\nagent = create_react_agent(\n    model=llm,\n    tools=[comparison_tool, sku_tool],\n    prompt=\"You compare products and help customers decide...\"\n)\n</code></pre></p> <p>Available Tools: - <code>product_comparison(products: list[dict])</code> \u2192 Detailed comparison analysis - <code>sku_extraction(text: str)</code> \u2192 Extract SKUs from text - <code>product_classification(description: str)</code> \u2192 Categorize products</p> <p>Input/Output Example: <pre><code># Product Comparison Input\n[\n  {\"product_id\": \"A\", \"name\": \"DeWalt Drill\", \"price\": 129.99, \"torque\": \"300 in-lbs\"},\n  {\"product_id\": \"B\", \"name\": \"Milwaukee Drill\", \"price\": 149.99, \"torque\": \"725 in-lbs\"}\n]\n\n# Output\n{\n  \"winner\": \"B\",\n  \"comparison_summary\": \"Milwaukee offers superior torque for heavy-duty tasks...\",\n  \"recommendations\": [\n    \"Choose Milwaukee for professional use\",\n    \"Choose DeWalt for home projects and budget-conscious buyers\"\n  ]\n}\n</code></pre></p>"},{"location":"tools/overview/#external-tools","title":"\ud83c\udf10 External Tools","text":"<p>Web search and external data sources</p> <p>When to Use: Real-time information, tutorials, general knowledge, trending topics</p> <p>Example Implementation: <pre><code># DIY agent with web search\nsearch_tool = DuckDuckGoSearchRun()\n\nagent = create_react_agent(\n    model=llm,\n    tools=[search_tool, vector_tool],\n    prompt=\"You help with DIY projects and tutorials...\"\n)\n</code></pre></p>"},{"location":"tools/overview/#building-your-own-agent","title":"\ud83d\ude80 Building Your Own Agent","text":""},{"location":"tools/overview/#1-define-agent-purpose","title":"1\ufe0f\u20e3 Define Agent Purpose","text":"<pre><code># Example: Customer Service Agent\ndef customer_service_node(model_config: ModelConfig):\n    model = model_config.get(\"agents\").get(\"customer_service\").get(\"model\").get(\"name\")\n    prompt = \"\"\"You are a helpful customer service representative at BrickMart store {store_num}.\n    Help customers with orders, returns, and general inquiries.\n    Always be polite and provide accurate information.\"\"\"\n</code></pre>"},{"location":"tools/overview/#2-select-appropriate-tools","title":"2\ufe0f\u20e3 Select Appropriate Tools","text":"<pre><code># Choose tools based on agent needs\ntools = [\n    # For order lookups\n    create_uc_tools([\"catalog.database.find_order_by_id\"]),\n\n    # For product questions\n    find_product_details_by_description_tool(...),\n\n    # For policy questions  \n    create_vector_search_tool(\n        name=\"policy_search\",\n        description=\"Search store policies and procedures\",\n        index_name=\"policies_index\"\n    )\n]\n</code></pre>"},{"location":"tools/overview/#3-configure-agent","title":"3\ufe0f\u20e3 Configure Agent","text":"<pre><code>@mlflow.trace()\ndef customer_service(state: AgentState, config: AgentConfig):\n    llm = ChatDatabricks(model=model, temperature=0.1)\n\n    system_prompt = prompt.format(\n        store_num=state[\"store_num\"]\n    )\n\n    agent = create_react_agent(\n        model=llm,\n        prompt=system_prompt,\n        tools=tools\n    )\n\n    return agent\n</code></pre>"},{"location":"tools/overview/#4-add-guardrails","title":"4\ufe0f\u20e3 Add Guardrails","text":"<pre><code># Add safety and quality checks\nfor guardrail_definition in guardrails:\n    guardrail = reflection_guardrail(guardrail_definition)\n    agent = with_guardrails(agent, guardrail)\n</code></pre>"},{"location":"tools/overview/#agent-development-patterns","title":"\ud83d\udee0\ufe0f Agent Development Patterns","text":""},{"location":"tools/overview/#common-agent-structure","title":"Common Agent Structure","text":"<pre><code>def my_agent_node(model_config: ModelConfig) -&gt; AgentCallable:\n    # Extract configuration\n    model = model_config.get(\"agents\").get(\"my_agent\").get(\"model\").get(\"name\")\n    prompt = model_config.get(\"agents\").get(\"my_agent\").get(\"prompt\")\n    guardrails = model_config.get(\"agents\").get(\"my_agent\").get(\"guardrails\") or []\n\n    @mlflow.trace()\n    def my_agent(state: AgentState, config: AgentConfig) -&gt; dict[str, BaseMessage]:\n        # Initialize LLM\n        llm = ChatDatabricks(model=model, temperature=0.1)\n\n        # Format prompt with context\n        prompt_template = PromptTemplate.from_template(prompt)\n        system_prompt = prompt_template.format(\n            user_id=state[\"user_id\"],\n            store_num=state[\"store_num\"]\n        )\n\n        # Configure tools\n        tools = [\n            # Add relevant tools for this agent\n        ]\n\n        # Create agent\n        agent = create_react_agent(\n            model=llm,\n            prompt=system_prompt,\n            tools=tools\n        )\n\n        # Apply guardrails\n        for guardrail_definition in guardrails:\n            guardrail = reflection_guardrail(guardrail_definition)\n            agent = with_guardrails(agent, guardrail)\n\n        return agent\n\n    return my_agent\n</code></pre>"},{"location":"tools/overview/#agent-state-management","title":"Agent State Management","text":"<pre><code>class AgentState(MessagesState):\n    context: Sequence[Document]  # Retrieved documents\n    route: str                   # Current routing decision\n    is_valid_config: bool       # Configuration validation\n    user_id: str                # User identifier\n    store_num: str              # Store context\n</code></pre>"},{"location":"tools/overview/#guardrails-implementation","title":"Guardrails Implementation","text":"<pre><code>def reflection_guardrail(guardrail_definition: dict):\n    @mlflow.trace()\n    def guardrail_check(state: AgentState) -&gt; dict:\n        last_message = state[\"messages\"][-1]\n\n        # Content safety check\n        if guardrail_definition.get(\"content_safety\"):\n            safety_check = check_content_safety(last_message.content)\n            if not safety_check.is_safe:\n                return {\"messages\": [AIMessage(content=\"I apologize, but I cannot provide that information.\")]}\n\n        # Quality check\n        if guardrail_definition.get(\"quality_check\"):\n            quality_score = assess_response_quality(last_message.content)\n            if quality_score &lt; 0.7:\n                return {\"messages\": [AIMessage(content=\"Let me provide a better response...\")]}\n\n        return state\n\n    return guardrail_check\n</code></pre>"},{"location":"tools/overview/#agent-performance-comparison","title":"\ud83d\udcca Agent Performance Comparison","text":"Agent Type Response Time Accuracy Use Cases Tools Used Product \u26a1\u26a1\u26a1\u26a1 95% Product lookup, specs UC Functions + Vector Search Inventory \u26a1\u26a1\u26a1\u26a1\u26a1 98% Stock checks, availability UC Functions Comparison \u26a1\u26a1\u26a1 92% Product analysis UC + LangChain + Vector DIY \u26a1\u26a1 88% Tutorials, guidance Web Search + Vector General \u26a1\u26a1\u26a1 90% Policies, store info Vector Search"},{"location":"tools/overview/#best-practices-for-agent-development","title":"\ud83c\udfaf Best Practices for Agent Development","text":""},{"location":"tools/overview/#tool-selection","title":"\ud83d\udd27 Tool Selection","text":"<ol> <li>Start with Unity Catalog for exact data lookups</li> <li>Add Vector Search for semantic understanding  </li> <li>Include LangChain tools for complex analysis</li> <li>Use Web Search for real-time information</li> </ol>"},{"location":"tools/overview/#prompt-engineering","title":"\ud83e\udde0 Prompt Engineering","text":"<ol> <li>Be specific about the agent's role and expertise</li> <li>Include context like store number and user information</li> <li>Set clear boundaries for what the agent should/shouldn't do</li> <li>Provide examples of good responses</li> </ol>"},{"location":"tools/overview/#guardrails-safety","title":"\ud83d\udee1\ufe0f Guardrails &amp; Safety","text":"<ol> <li>Content safety - Block harmful or inappropriate content</li> <li>Business rules - Enforce pricing, policy, and operational rules</li> <li>Quality control - Ensure responses meet standards</li> <li>Fallback handling - Graceful degradation when tools fail</li> </ol>"},{"location":"tools/overview/#monitoring-optimization","title":"\ud83d\udcc8 Monitoring &amp; Optimization","text":"<ol> <li>Track performance - Response time, accuracy, user satisfaction</li> <li>Monitor tool usage - Which tools are most/least effective</li> <li>Analyze conversations - Common patterns and failure modes</li> <li>Iterate and improve - Regular updates based on feedback</li> </ol>"},{"location":"tools/overview/#detailed-documentation","title":"\ud83d\udcda Detailed Documentation","text":""},{"location":"tools/overview/#tool-specific-guides","title":"Tool-Specific Guides","text":"<ul> <li>Tools Reference - Comprehensive technical tool documentation</li> <li>Unity Catalog Functions - SQL-based data access</li> <li>Vector Search Tools - Semantic search capabilities  </li> <li>LangChain Tools - AI-powered analysis tools</li> <li>AI Agent Implementation - Advanced agent patterns</li> </ul>"},{"location":"tools/overview/#development-resources","title":"Development Resources","text":"<ul> <li>Development Guide - Building custom agents and tools</li> <li>Architecture Overview - System design and patterns</li> <li>Deployment Guide - Production deployment</li> </ul>"},{"location":"tools/overview/#quick-troubleshooting","title":"\ud83c\udd98 Quick Troubleshooting","text":""},{"location":"tools/overview/#agent-not-responding","title":"Agent Not Responding","text":"<pre><code># Check agent configuration\nlogger.info(f\"Agent tools: {[tool.name for tool in agent.tools]}\")\nlogger.info(f\"Model: {model}\")\n</code></pre>"},{"location":"tools/overview/#tool-errors","title":"Tool Errors","text":"<pre><code># Test individual tools\ntry:\n    result = tool.invoke(test_input)\n    logger.info(f\"Tool working: {result}\")\nexcept Exception as e:\n    logger.error(f\"Tool failed: {e}\")\n</code></pre>"},{"location":"tools/overview/#performance-issues","title":"Performance Issues","text":"<pre><code># Enable detailed tracing\n@mlflow.trace(span_type=\"AGENT\")\ndef my_agent(state, config):\n    # Agent implementation\n    pass\n</code></pre> <p>For comprehensive troubleshooting, see the Development Guide. </p>"}]}